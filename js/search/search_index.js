var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/classes/Acknowledgement.html",[0,0.214,1,2.422]],["body/classes/Acknowledgement.html",[0,0.216,1,3.333,2,0.797,3,0.136,4,0.117,5,0.117,6,3.245,7,0.239,8,1.088,9,5.68,10,1.753,11,2.73,12,6.593,13,3.351,14,0.534,15,0.018,16,1.14,17,1.042,18,3.613,19,2.546,20,2.369,21,1.12,22,0.616,23,3.766,24,0.693,25,1.801,26,1.801,27,1.801,28,3.766,29,2.425,30,2.571,31,1.801,32,2.726,33,3.963,34,3.766,35,3.963,36,4.433,37,3.766,38,4.433,39,3.766,40,0.274,41,1.318,42,1.258,43,2.928,44,1.882,45,0.957,46,2.645,47,2.901,48,3.766,49,1.318,50,1.318,51,0.136,52,2.571,53,3.766,54,3.766,55,0.009,56,0.012,57,0.009]],["title/controllers/AppController.html",[58,1.249,59,2.625]],["body/controllers/AppController.html",[0,0.302,3,0.191,4,0.164,5,0.164,7,0.333,15,0.018,16,1.415,17,0.832,22,0.492,40,0.298,51,0.191,55,0.012,56,0.014,57,0.012,58,2.133,59,4.484,60,1.758,61,4.536,62,2.037,63,6.158,64,5.265,65,1.679,66,1.166,67,4.142,68,4.536,69,2.789,70,2.358,71,1.604,72,5.265]],["title/modules/AppModule.html",[73,1.139,74,2.625]],["body/modules/AppModule.html",[0,0.212,3,0.134,4,0.115,5,0.115,14,0.299,15,0.018,20,1.234,40,0.342,51,0.134,55,0.008,56,0.012,57,0.008,59,4.074,60,1.696,66,0.818,67,4.077,68,3.183,73,1.768,74,5.405,75,1.655,76,1.655,77,1.846,78,1.846,79,1.655,80,2.899,81,1.846,82,3.183,83,3.183,84,3.183,85,4.383,86,4.64,87,4.383,88,4.383,89,4.383,90,4.383,91,4.383,92,2.537,93,1.846,94,1.746,95,3.695,96,2.69,97,1.957,98,1.293,99,3.695,100,1.846,101,2.393,102,3.695,103,3.695,104,3.695,105,1.655,106,2.393,107,3.695,108,3.695,109,3.695,110,3.695,111,3.695,112,5.078,113,3.183,114,3.695,115,3.695,116,3.695,117,2.846,118,2.594,119,3.695,120,3.183,121,3.695,122,3.695,123,3.695,124,3.695,125,3.695]],["title/injectables/AppService.html",[67,2.253,126,1.249]],["body/injectables/AppService.html",[0,0.312,3,0.197,4,0.169,5,0.169,7,0.345,15,0.017,16,1.444,22,0.509,40,0.254,51,0.197,55,0.012,56,0.015,57,0.012,62,2.079,63,6.228,65,1.737,66,1.206,67,3.927,71,1.659,126,2.177,127,2.72,128,4.691,129,5.445,130,5.445,131,5.445]],["title/classes/Appointment.html",[0,0.214,132,1.512]],["body/classes/Appointment.html",[0,0.197,2,0.725,3,0.124,4,0.107,5,0.107,7,0.217,8,1.019,10,1.694,13,3.274,14,0.55,15,0.018,16,1.067,17,1.072,18,3.384,19,2.313,20,2.128,21,1.044,22,0.635,24,0.649,25,1.686,26,1.686,27,1.686,29,2.328,30,2.407,31,2.23,32,1.815,38,4.151,40,0.309,41,1.199,42,1.145,43,2.785,44,1.712,45,0.871,47,2.64,49,1.199,50,1.199,51,0.124,52,2.407,55,0.008,56,0.011,57,0.008,105,2.853,132,1.948,133,2.952,134,5.573,135,3.913,136,4.802,137,3.61,138,2.254,139,4.819,140,3.427,141,3.376,142,2.633,143,3.427,144,3.427,145,4.127,146,3.427,147,3.427,148,2.64,149,3.427,150,1.773,151,4.151,152,3.427,153,1.619,154,2.406,155,2.952,156,2.952,157,2.64,158,3.427,159,3.427,160,3.427,161,2.633,162,3.427,163,3.427,164,2.952]],["title/classes/AuthCredentialsDto.html",[0,0.214,165,2.422]],["body/classes/AuthCredentialsDto.html",[0,0.359,2,1.078,3,0.184,4,0.158,5,0.158,7,0.323,8,1.324,14,0.507,15,0.018,16,1.566,17,0.989,22,0.585,40,0.293,51,0.184,55,0.012,56,0.014,57,0.012,117,5.22,118,4.759,165,4.055,166,5.838,167,4.39,168,6.26,169,5.096,170,5.096,171,6.777,172,3.578,173,3.82,174,3.301,175,2.408]],["title/controllers/AuthenticationController.html",[58,1.249,176,2.625]],["body/controllers/AuthenticationController.html",[0,0.235,3,0.149,4,0.128,5,0.128,7,0.26,14,0.442,15,0.018,17,0.861,21,0.861,22,0.509,40,0.326,51,0.149,55,0.009,56,0.012,57,0.009,58,1.37,60,1.37,62,1.738,65,1.738,66,0.909,69,2.173,71,1.25,138,2.475,150,1.814,165,4.613,176,3.827,177,3.534,178,2.313,179,3.534,180,2.442,181,5.848,182,5.618,183,3.534,184,5.45,185,4.102,186,5.45,187,1.907,188,1.66,189,2.723,190,4.102,191,4.102,192,4.102,193,4.695,194,4.695,195,3.284,196,2.313,197,3.534,198,4.102,199,3.534,200,3.534,201,3.284,202,3.534,203,3.534,204,2.658,205,2.472,206,4.102,207,1.837,208,4.102,209,4.102,210,2.098,211,4.102,212,4.102,213,4.102,214,4.102,215,4.102]],["title/modules/AuthenticationModule.html",[73,1.139,85,2.422]],["body/modules/AuthenticationModule.html",[0,0.236,3,0.149,4,0.128,5,0.128,15,0.018,40,0.346,51,0.149,55,0.009,56,0.012,57,0.009,60,1.826,66,0.913,73,1.869,75,1.846,76,1.846,77,2.059,78,2.059,79,1.846,80,3.065,81,3.065,85,4.746,92,2.731,93,2.059,94,1.948,96,2.184,97,2.184,98,1.443,150,1.147,176,4.307,201,4.21,202,3.551,204,2.67,207,1.846,216,3.551,217,3.551,218,3.551,219,4.689,220,3.491,221,4.122,222,4.122,223,3.175,224,3.082,225,3.175,226,4.122,227,3.175,228,5.467,229,4.122,230,3.551,231,4.122,232,4.122,233,3.839,234,4.122,235,4.122,236,3.551,237,3.175,238,4.122,239,4.122,240,4.71,241,3.551,242,4.122,243,4.122,244,4.122]],["title/injectables/AuthenticationService.html",[126,1.249,201,2.253]],["body/injectables/AuthenticationService.html",[0,0.189,3,0.119,4,0.102,5,0.102,7,0.209,10,1.247,14,0.442,15,0.018,21,0.862,22,0.51,29,1.269,40,0.314,51,0.119,55,0.007,56,0.011,57,0.007,62,1.496,65,1.496,66,0.73,71,1.663,117,4.204,118,2.315,126,1.566,127,1.647,138,2.715,150,0.917,165,4.686,179,4.04,180,2.284,181,4.04,183,4.04,187,1.91,188,1.663,189,2.97,194,5.41,199,2.841,200,2.841,201,2.825,207,1.477,210,1.805,220,2.97,223,2.54,227,2.54,233,3.293,245,2.841,246,4.689,247,2.484,248,2.841,249,6.714,250,3.297,251,4.04,252,3.297,253,4.689,254,4.689,255,3.297,256,4.174,257,4.689,258,5.457,259,4.174,260,1.477,261,2.841,262,2.841,263,3.038,264,2.841,265,2.841,266,3.297,267,3.297,268,2.841,269,2.343,270,3.346,271,2.809,272,3.297,273,3.297,274,3.297,275,2.136,276,1.402,277,2.841,278,4.04,279,2.841,280,4.689,281,3.297,282,4.689,283,3.297,284,4.689,285,3.297,286,4.689,287,3.297,288,3.297]],["title/classes/EmergencyContact.html",[0,0.214,289,2.253]],["body/classes/EmergencyContact.html",[0,0.201,2,0.742,3,0.127,4,0.109,5,0.109,7,0.222,8,1.036,10,1.709,11,2.475,14,0.554,15,0.018,16,1.589,17,1.08,19,2.56,20,1.637,21,1.156,22,0.639,24,0.66,25,1.715,26,1.715,27,2.56,29,2.762,31,1.228,40,0.229,41,1.228,42,1.172,45,0.892,46,2.464,49,1.228,50,1.228,51,0.127,55,0.008,56,0.011,57,0.008,142,1.658,153,1.658,161,1.658,289,2.952,290,3.023,291,3.037,292,3.964,293,3.964,294,3.964,295,4.349,296,6.428,297,3.051,298,3.509,299,3.509,300,2.448,301,3.509,302,2.448,303,3.509,304,3.509,305,4.221,306,3.509,307,3.509,308,3.509,309,3.023]],["title/classes/FamilyDoctor.html",[0,0.214,310,2.253]],["body/classes/FamilyDoctor.html",[0,0.213,2,0.785,3,0.134,4,0.115,5,0.115,7,0.235,8,1.077,10,1.744,11,2.525,14,0.549,15,0.018,16,1.566,17,1.07,19,2.539,20,1.701,21,1.188,22,0.633,24,0.686,25,1.782,26,1.782,27,2.539,29,2.721,31,1.299,40,0.238,41,1.299,42,1.239,45,0.943,46,2.605,49,1.299,50,1.299,51,0.134,55,0.008,56,0.012,57,0.008,142,1.753,153,1.753,161,1.753,291,3.099,294,4.083,295,4.479,297,3.005,305,4.387,310,3.068,311,3.197,312,4.605,313,3.71,314,3.71,315,3.71,316,3.71,317,3.71,318,3.71,319,3.71,320,3.197]],["title/classes/Form.html",[0,0.214,141,1.981]],["body/classes/Form.html",[0,0.218,2,0.803,3,0.138,4,0.118,5,0.118,7,0.241,8,1.095,10,1.758,14,0.536,15,0.018,16,1.147,17,1.045,19,2.487,20,2.332,21,1.123,22,0.618,24,0.697,25,1.811,26,1.811,27,1.811,29,2.433,30,2.586,31,1.811,32,2.013,40,0.275,41,1.33,42,1.269,43,2.941,44,1.898,45,0.965,49,1.33,50,1.33,51,0.138,52,2.586,55,0.009,56,0.012,57,0.009,132,2.874,141,2.742,148,2.927,297,2.201,321,3.273,322,3.813,323,4.534,324,4.207,325,3.987,326,3.799,327,1.729,328,3.634,329,4.459,330,3.799,331,5.175,332,3.799,333,5.175,334,3.799,335,3.799,336,2.461,337,3.799,338,3.799,339,3.799,340,3.799,341,3.799]],["title/classes/FormDTO.html",[0,0.214,342,2.422]],["body/classes/FormDTO.html",[0,0.272,2,1.002,3,0.171,4,0.147,5,0.147,7,0.3,8,1.265,14,0.558,15,0.018,16,1.325,17,1.088,22,0.644,24,0.928,40,0.221,51,0.171,55,0.011,56,0.014,57,0.011,70,3.43,173,4.239,175,2.238,322,4.247,323,5.05,327,1.998,342,3.875,343,4.081,344,4.247,345,5.05,346,4.736,347,4.736,348,4.736,349,4.736]],["title/classes/FormTemplate.html",[0,0.214,324,2.253]],["body/classes/FormTemplate.html",[0,0.245,2,0.904,3,0.155,4,0.133,5,0.133,7,0.271,8,1.184,10,1.829,14,0.537,15,0.018,16,1.24,17,1.047,19,2.47,20,2.357,21,1.185,22,0.619,24,0.754,25,1.959,26,1.959,27,1.959,31,1.495,40,0.262,41,1.495,42,1.427,45,1.086,49,1.495,50,1.495,51,0.155,55,0.01,56,0.013,57,0.01,135,4.384,141,3.644,142,2.019,153,2.019,155,3.681,161,2.019,297,2.381,322,4.045,324,3.373,327,1.87,328,3.931,329,4.823,350,3.681,351,4.273,352,4.273,353,4.273,354,4.273,355,4.273,356,4.273]],["title/classes/FormTemplateDTO.html",[0,0.214,357,2.422]],["body/classes/FormTemplateDTO.html",[0,0.298,2,1.097,3,0.188,4,0.161,5,0.161,7,0.328,8,1.338,14,0.513,15,0.017,16,1.402,17,1,21,1.079,22,0.592,40,0.242,51,0.188,55,0.012,56,0.014,57,0.012,70,3.322,173,4.11,175,2.451,322,4.424,327,2.114,357,4.099,358,4.468,359,5.186,360,5.186]],["title/controllers/FormsController.html",[58,1.249,361,2.625]],["body/controllers/FormsController.html",[0,0.161,3,0.101,4,0.087,5,0.087,7,0.177,14,0.499,15,0.018,17,1.009,21,0.974,22,0.597,24,0.944,40,0.257,51,0.101,55,0.006,56,0.009,57,0.006,58,0.935,60,0.935,62,1.328,65,2.036,66,0.62,69,1.484,71,1.945,94,1.967,132,1.684,135,1.966,141,3.712,178,1.579,180,2.605,187,2.158,188,1.878,195,2.509,196,3.316,210,2.525,342,4.136,344,3.22,345,5.163,357,4.667,361,2.924,362,2.413,363,3.587,364,3.587,365,4.282,366,4.742,367,3.587,368,3.587,369,3.587,370,2.413,371,2.8,372,2.924,373,4.164,374,2.413,375,2.8,376,2.347,377,5.651,378,2.413,379,4.164,380,2.8,381,3.587,382,2.8,383,3.587,384,2.413,385,4.164,386,2.8,387,3.587,388,2.916,389,2.413,390,4.164,391,2.8,392,2.413,393,4.164,394,2.8,395,3.587,396,1.484,397,1.966,398,2.509,399,2.413,400,2.413,401,2.413,402,2.8,403,2.8,404,2.8,405,2.8,406,2.8,407,2.8,408,2.8,409,2.8,410,2.8,411,2.8,412,2.8,413,2.8,414,2.8,415,2.8,416,2.8]],["title/modules/FormsModule.html",[73,1.139,86,2.422]],["body/modules/FormsModule.html",[0,0.27,3,0.17,4,0.146,5,0.146,15,0.018,40,0.348,51,0.17,55,0.011,56,0.014,57,0.011,60,1.988,66,1.041,73,1.99,75,2.104,76,2.104,77,2.347,78,2.347,79,2.104,80,3.263,81,2.347,86,4.689,92,2.973,93,2.347,94,2.22,96,2.489,97,2.489,98,1.644,132,2.406,141,3.153,150,1.656,207,2.104,324,2.831,361,4.587,398,4.361,399,4.048,417,4.048,418,4.048,419,4.698,420,4.698,421,4.048,422,4.048,423,3.299,424,4.698]],["title/injectables/FormsService.html",[126,1.249,398,2.253]],["body/injectables/FormsService.html",[0,0.118,3,0.075,4,0.064,5,0.064,7,0.13,10,1.09,14,0.463,15,0.018,21,1.012,22,0.555,24,0.878,40,0.286,45,0.524,51,0.075,55,0.005,56,0.007,57,0.005,62,1.048,65,1.823,66,0.456,71,1.742,98,0.721,126,1.098,127,1.03,132,1.329,135,2.308,141,3.812,150,0.573,180,2.492,187,2,188,1.742,189,3.351,207,0.923,210,2.201,247,1.741,259,2.879,269,2.338,270,2.574,271,2.964,276,2.524,322,3.529,323,2.532,324,2.47,327,1.098,342,3.703,344,3.529,345,4.934,357,4.396,363,2.832,364,2.832,365,3.532,366,4.031,367,2.832,368,2.832,369,2.832,370,2.832,372,2.879,374,2.832,376,2.637,377,5.907,378,1.775,383,2.832,384,2.832,387,1.775,388,1.092,389,2.832,392,2.832,395,2.832,396,1.092,398,1.98,400,1.775,401,1.775,421,1.775,422,1.775,423,1.447,425,1.775,426,2.061,427,3.731,428,4.1,429,3.532,430,2.879,431,2.061,432,3.287,433,2.061,434,3.287,435,3.287,436,2.061,437,2.061,438,2.479,439,2.129,440,2.061,441,3.589,442,2.061,443,3.287,444,3.287,445,2.061,446,3.285,447,2.061,448,1.162,449,2.061,450,2.061,451,1.775,452,1.447,453,2.061,454,2.061,455,3.937,456,3.285,457,2.061,458,2.061,459,2.061,460,2.061,461,3.937,462,3.937,463,3.937,464,2.129,465,1.587,466,3.287,467,2.061,468,2.061,469,2.061,470,2.061,471,2.061,472,2.061,473,2.061,474,2.061,475,1.775,476,2.061,477,2.061,478,2.061,479,1.335,480,2.061,481,1.587]],["title/interfaces/JwtPayloadInterface.html",[263,2.422,482,2.422]],["body/interfaces/JwtPayloadInterface.html",[3,0.204,4,0.175,5,0.175,7,0.357,8,1.407,14,0.457,15,0.017,16,1.568,51,0.204,55,0.013,56,0.015,57,0.013,263,4.31,279,6.3,482,3.652,483,4.343,484,4.858,485,4.858]],["title/classes/JwtStrategy.html",[0,0.214,219,2.422]],["body/classes/JwtStrategy.html",[0,0.25,2,0.922,3,0.158,4,0.135,5,0.135,7,0.276,14,0.459,15,0.018,21,0.896,22,0.53,40,0.332,51,0.158,55,0.01,56,0.013,57,0.01,62,1.809,65,1.39,66,0.966,71,1.328,98,1.525,138,2.7,180,2.206,187,1.985,188,1.728,204,2.823,219,3.674,220,3.336,223,3.357,233,3.982,240,3.755,241,3.755,247,3.004,248,3.755,251,4.886,256,3.982,261,3.755,262,3.755,263,4.325,264,3.755,265,3.755,268,3.755,269,2.178,270,2.059,271,2.059,275,2.823,276,1.853,277,3.755,278,3.755,448,2.457,486,3.755,487,4.358,488,5.671,489,4.358,490,4.358,491,4.358,492,3.755,493,4.358,494,4.358,495,4.358,496,4.358,497,4.358,498,4.358,499,4.358,500,4.358]],["title/classes/Patient.html",[0,0.214,11,1.44]],["body/classes/Patient.html",[0,0.12,1,3.333,2,0.442,3,0.076,4,0.065,5,0.065,7,0.132,8,0.702,9,2.861,10,1.368,11,1.279,13,2.431,14,0.578,15,0.018,16,1.618,17,1.113,18,2.332,19,2.591,20,1.574,21,1.176,22,0.659,24,0.447,25,1.162,26,1.162,27,2.575,29,2.85,30,1.659,31,1.649,40,0.24,41,0.731,42,0.697,43,2.066,44,1.659,45,0.53,47,1.608,49,0.731,50,0.731,51,0.076,52,1.043,55,0.005,56,0.008,57,0.005,142,1.569,148,2.558,153,1.569,161,0.986,289,3.462,291,2.431,292,2.904,293,2.904,297,3.106,300,1.659,302,1.659,310,3.462,312,3.612,501,1.799,502,3.563,503,4.135,504,4.135,505,3.963,506,3.963,507,3.563,508,4.135,509,3.963,510,4.135,511,4.135,512,4.135,513,4.135,514,2.088,515,2.558,516,2.088,517,2.558,518,2.088,519,2.088,520,2.088,521,2.558,522,2.088,523,2.558,524,2.088,525,2.088,526,2.088,527,2.558,528,2.088,529,2.558,530,2.088,531,2.088,532,2.088,533,2.088,534,2.558,535,2.088,536,2.558,537,2.088,538,2.558,539,2.088,540,2.088,541,2.088,542,2.088,543,2.088,544,1.799,545,2.088,546,2.088,547,2.088,548,2.088,549,2.088,550,2.088,551,1.799]],["title/controllers/PatientController.html",[58,1.249,552,2.625]],["body/controllers/PatientController.html",[0,0.176,3,0.111,4,0.095,5,0.095,7,0.194,11,2.528,14,0.36,15,0.018,17,0.907,21,0.702,22,0.537,24,0.705,40,0.268,51,0.111,55,0.012,56,0.01,57,0.007,58,1.022,60,1.022,62,1.418,65,1.832,66,0.678,69,1.621,71,1.75,73,1.354,178,1.725,180,2.497,187,1.555,188,1.354,195,1.844,196,2.95,205,2.678,210,2.015,270,1.446,271,2.1,275,1.982,276,1.89,294,3.121,327,1.918,376,2.506,388,2.355,438,2.355,446,3.121,552,3.121,553,2.637,554,3.829,555,4.948,556,5.482,557,2.637,558,4.253,559,3.06,560,4.445,561,3.06,562,3.06,563,3.829,564,3.06,565,3.675,566,4.445,567,3.06,568,3.829,569,3.829,570,4.445,571,3.829,572,4.445,573,3.829,574,4.445,575,4.445,576,4.445,577,4.445,578,5.744,579,4.445,580,6.364,581,3.424,582,3.829,583,4.445,584,4.445,585,4.445,586,3.829,587,4.445,588,3.424,589,4.445,590,4.445,591,4.445,592,3.829,593,4.445,594,3.829,595,4.445,596,4.445,597,4.445,598,4.445,599,4.445,600,3.424,601,4.445,602,4.445,603,4.445,604,4.445,605,3.153,606,2.637,607,2.637,608,2.149,609,3.06,610,3.06,611,3.06,612,3.06,613,3.06,614,3.06,615,3.06,616,3.06,617,3.06,618,3.06,619,3.06]],["title/classes/PatientDTO.html",[0,0.214,558,2.422]],["body/classes/PatientDTO.html",[0,0.168,2,0.619,3,0.106,4,0.091,5,0.091,7,0.185,8,0.91,11,1.656,14,0.592,15,0.018,16,1.691,17,1.154,22,0.683,24,0.758,40,0.137,51,0.106,55,0.007,56,0.01,57,0.007,70,3.505,174,4.989,175,1.383,188,2.303,260,1.311,291,2.41,300,2.549,302,2.549,312,3.582,327,1.437,505,3.93,506,3.93,509,3.93,515,3.93,517,3.93,521,3.93,523,3.93,527,3.93,529,3.93,534,3.93,536,3.93,538,3.93,558,2.787,620,2.522,621,2.592,622,3.021,623,2.927,624,2.927,625,2.927,626,2.927,627,2.927,628,2.927,629,2.927,630,2.927,631,2.927,632,2.927,633,2.927,634,2.927,635,2.927,636,2.927,637,2.927,638,2.927]],["title/modules/PatientModule.html",[73,1.139,87,2.422]],["body/modules/PatientModule.html",[0,0.271,3,0.171,4,0.147,5,0.147,11,1.819,15,0.018,40,0.344,51,0.171,55,0.011,56,0.014,57,0.011,60,1.995,66,1.046,73,1.995,75,2.115,76,2.115,77,2.36,78,2.36,79,2.115,80,3.272,81,2.36,87,4.695,92,2.984,93,2.36,94,2.232,96,2.502,97,2.502,98,1.653,289,3.598,310,3.598,552,4.598,605,4.367,606,4.07,639,4.07,640,4.07,641,4.724,642,5.145,643,4.724,644,4.07,645,4.07,646,3.317,647,4.724]],["title/injectables/PatientService.html",[126,1.249,605,2.253]],["body/injectables/PatientService.html",[0,0.176,3,0.068,4,0.059,5,0.059,7,0.12,10,0.814,11,2.349,14,0.36,15,0.018,21,0.827,22,0.489,24,0.521,29,0.726,40,0.277,45,0.479,51,0.068,55,0.004,56,0.007,57,0.004,62,0.977,65,1.559,66,0.418,70,0.845,71,1.177,73,0.575,98,0.66,113,1.626,126,1.023,127,0.943,172,1.325,180,2.328,187,1.556,188,1.355,189,3.048,193,1.626,210,1.179,237,1.454,247,1.622,256,1.325,260,0.845,269,2.222,270,2.883,271,3.211,275,1.984,276,2.595,289,2.945,291,1.447,292,2.15,293,2.15,294,2.15,295,3.425,300,1.53,302,1.53,309,1.626,310,2.945,312,2.15,320,1.626,327,1.633,376,1.726,427,3.439,448,1.064,464,1.984,505,1.454,506,2.359,507,1.626,509,2.359,515,2.359,517,2.359,521,2.359,523,2.359,527,2.359,529,3.425,534,2.359,536,2.359,538,2.359,554,2.638,556,3.831,557,2.638,558,3.573,565,3.122,568,4.51,569,2.638,571,1.626,573,1.626,581,1.454,582,1.626,586,2.638,588,1.454,592,2.638,594,1.626,605,1.845,607,1.626,621,1.137,644,1.626,645,1.626,646,1.325,648,1.626,649,3.062,650,4.446,651,1.887,652,3.864,653,3.864,654,5.515,655,1.887,656,2.638,657,1.887,658,3.062,659,1.887,660,2.359,661,1.887,662,3.062,663,1.887,664,1.887,665,2.638,666,1.626,667,1.887,668,1.887,669,1.626,670,1.887,671,1.887,672,1.887,673,2.638,674,1.626,675,1.887,676,1.887,677,1.887,678,1.887,679,1.887,680,1.887,681,1.887,682,1.887,683,1.887,684,1.887,685,3.062,686,1.887,687,1.887,688,1.887,689,1.887,690,1.887,691,1.887,692,1.887,693,1.887,694,1.887,695,1.887,696,1.887,697,1.887,698,1.887,699,1.887,700,1.887,701,1.887,702,1.887,703,3.062,704,1.887,705,3.864,706,1.887,707,3.864,708,1.887,709,3.864,710,1.887,711,1.887,712,1.887,713,3.864,714,1.887,715,3.864,716,1.887,717,1.887,718,1.887,719,1.887,720,1.887,721,1.887,722,1.887,723,1.887,724,1.887,725,1.887,726,1.887,727,1.887,728,1.887,729,1.887,730,1.887,731,1.887,732,1.887,733,1.887,734,1.887,735,3.062,736,1.887,737,1.887,738,1.887,739,1.887,740,1.887,741,1.887,742,1.887,743,1.887,744,1.887,745,1.887,746,1.887,747,1.887,748,1.887,749,1.887,750,1.887,751,1.887,752,1.887,753,1.626,754,1.887,755,1.887,756,1.887,757,1.887,758,1.887,759,1.887,760,1.887,761,1.887,762,1.887,763,3.062,764,1.887,765,1.626,766,1.887,767,1.887,768,1.887,769,1.887,770,3.864,771,1.887,772,3.864,773,1.887,774,1.887,775,2.638,776,1.887,777,1.887,778,1.626,779,1.626,780,1.626,781,1.626,782,2.638,783,1.887,784,1.887,785,1.887,786,1.887,787,1.887,788,1.887,789,1.887,790,1.887,791,1.887,792,1.887,793,1.887,794,1.887,795,1.887,796,1.887,797,1.887,798,1.887,799,1.887,800,1.887,801,2.638,802,1.887,803,1.626,804,1.454,805,1.626,806,1.626,807,1.626,808,1.626,809,1.887]],["title/classes/Report.html",[0,0.214,145,2.422]],["body/classes/Report.html",[0,0.226,2,0.834,3,0.143,4,0.123,5,0.123,7,0.25,8,1.123,10,1.781,14,0.543,15,0.018,17,1.014,19,2.509,20,2.305,21,1.09,22,0.6,24,0.715,25,1.858,26,1.858,27,1.858,29,2.471,30,2.653,31,1.858,32,2.813,40,0.28,41,1.381,42,1.318,43,2.998,44,2.653,45,1.002,49,1.381,50,1.381,51,0.143,52,1.971,55,0.009,56,0.012,57,0.009,132,2.899,145,3.439,325,4.09,327,1.773,328,3.728,336,2.555,810,3.399,811,5.17,812,6.001,813,3.945,814,3.945,815,4.574,816,3.945,817,4.507,818,5.309,819,3.945,820,3.945,821,3.945,822,3.945,823,3.945,824,3.945]],["title/classes/ReportTemplates.html",[0,0.214,817,2.625]],["body/classes/ReportTemplates.html",[0,0.245,2,0.904,3,0.155,4,0.133,5,0.133,7,0.271,8,1.184,10,1.829,14,0.537,15,0.018,16,1.24,17,1.047,19,2.47,20,2.357,21,1.185,22,0.619,24,0.754,25,1.959,26,1.959,27,1.959,31,1.495,40,0.262,41,1.495,42,1.427,45,1.086,49,1.495,50,1.495,51,0.155,55,0.01,56,0.013,57,0.01,136,5.379,142,2.019,145,4.456,153,2.019,156,3.681,161,2.019,297,2.381,327,1.87,328,3.931,811,5.379,815,4.823,817,3.931,825,3.681,826,4.273,827,4.273,828,4.273,829,4.273,830,4.273,831,4.273]],["title/classes/Scan.html",[0,0.214,105,1.674]],["body/classes/Scan.html",[0,0.209,2,0.77,3,0.132,4,0.113,5,0.113,7,0.231,8,1.063,10,1.732,14,0.528,15,0.018,17,1.029,19,2.529,20,2.306,21,1.091,22,0.609,24,0.677,25,1.759,26,1.759,27,1.759,29,2.593,30,2.876,31,2.015,32,3.05,35,3.872,36,4.331,40,0.29,41,1.274,42,1.216,43,3.102,44,1.819,45,0.925,49,1.274,50,1.274,51,0.132,52,2.876,55,0.008,56,0.011,57,0.008,105,2.251,132,2.845,138,2.328,150,1.812,151,4.331,154,2.557,325,3.872,336,2.358,832,3.137,833,5.018,834,5.757,835,3.641,836,3.641,837,3.641,838,3.74,839,5.027,840,3.641,841,3.641,842,3.641,843,3.641,844,3.641,845,3.641,846,3.641,847,3.641]],["title/classes/ScanDTO.html",[0,0.214,848,2.422]],["body/classes/ScanDTO.html",[0,0.26,2,0.958,3,0.164,4,0.141,5,0.141,7,0.287,8,1.229,14,0.549,15,0.018,17,1.07,22,0.633,24,0.966,35,4.477,40,0.212,51,0.164,55,0.01,56,0.013,57,0.01,70,3.409,105,2.603,173,4.205,175,2.139,260,2.028,327,1.941,344,4.159,621,3.502,622,4.082,833,4.945,848,3.765,849,4.538,850,3.901,851,5.531,852,3.619,853,4.528,854,4.528,855,4.528,856,4.528]],["title/controllers/ScanTrackingController.html",[58,1.249,857,2.625]],["body/controllers/ScanTrackingController.html",[0,0.168,3,0.106,4,0.091,5,0.091,7,0.186,14,0.525,15,0.018,17,0.991,21,0.948,22,0.586,24,0.953,40,0.239,51,0.106,55,0.007,56,0.01,57,0.007,58,0.981,60,0.981,62,1.376,65,2.001,66,0.651,69,1.556,71,1.911,105,3.169,106,4.308,137,2.794,178,1.656,180,2.587,187,2.1,188,1.828,195,2.599,196,2.881,210,2.496,276,1.834,381,3.716,388,2.285,396,2.708,397,2.062,441,4.404,456,3.029,848,4.704,849,4.199,852,2.881,857,3.029,858,2.53,859,4.313,860,3.716,861,3.716,862,4.853,863,3.716,864,3.716,865,3.716,866,2.53,867,2.937,868,3.716,869,2.53,870,4.313,871,2.937,872,4.339,873,5.846,874,2.937,875,3.716,876,2.53,877,3.716,878,2.937,879,2.53,880,4.313,881,2.937,882,2.53,883,4.313,884,2.937,885,2.53,886,2.599,887,2.53,888,2.937,889,2.937,890,2.937,891,2.937,892,2.937,893,2.937,894,2.937,895,2.937,896,2.937,897,2.937,898,2.937,899,2.937,900,2.937]],["title/modules/ScanTrackingModule.html",[73,1.139,88,2.422]],["body/modules/ScanTrackingModule.html",[0,0.267,3,0.168,4,0.144,5,0.144,15,0.018,40,0.347,51,0.168,55,0.011,56,0.013,57,0.011,60,1.974,66,1.03,73,1.98,75,2.082,76,2.082,77,2.322,78,2.322,79,2.082,80,3.247,81,2.322,88,4.676,92,2.953,93,2.322,94,2.196,96,2.463,97,2.463,98,1.627,105,2.911,106,3.011,132,2.39,150,1.644,207,2.082,423,3.264,838,3.561,849,3.011,857,4.564,886,4.349,887,4.005,901,4.005,902,4.005,903,4.648,904,4.648,905,4.005,906,4.005,907,4.648]],["title/injectables/ScanTrackingService.html",[126,1.249,886,2.253]],["body/injectables/ScanTrackingService.html",[0,0.128,3,0.081,4,0.069,5,0.069,7,0.141,10,0.592,14,0.477,15,0.018,21,0.89,22,0.551,24,0.896,40,0.285,45,0.566,51,0.081,55,0.005,56,0.008,57,0.005,62,1.114,65,1.796,66,0.493,71,1.488,98,0.779,105,3.21,106,3.951,126,1.167,127,1.112,132,0.9,137,3.164,150,0.619,164,1.918,180,2.476,187,1.971,188,1.716,189,3.322,207,0.997,210,2.168,247,1.851,259,2.453,269,2.44,270,2.308,271,3.186,276,2.257,327,0.744,344,3.164,372,1.563,376,1.255,388,1.851,396,2.285,423,1.563,427,3.801,429,3.715,430,3.028,438,2.588,439,3.164,441,3.028,446,2.453,448,1.255,451,1.918,452,1.563,455,4.338,456,3.028,461,4.338,462,4.338,463,4.338,464,2.263,465,1.715,475,3.01,479,1.442,481,1.715,833,3.763,838,1.341,848,4.469,849,3.951,851,3.01,852,3.175,860,3.01,861,3.01,862,4.208,863,3.01,864,3.01,865,3.01,866,3.01,868,1.918,869,3.01,872,2.691,873,5.074,875,1.918,876,3.01,879,3.01,882,3.01,885,1.918,886,2.105,905,1.918,906,1.918,908,1.918,909,2.226,910,4.312,911,2.226,912,3.494,913,2.226,914,2.691,915,2.226,916,2.226,917,3.494,918,2.226,919,2.226,920,2.226,921,2.226,922,2.226,923,2.226,924,2.226,925,3.494,926,2.226,927,2.226,928,3.494,929,2.226,930,2.226,931,2.691,932,2.226,933,2.226,934,1.918,935,1.918,936,2.226,937,2.226,938,2.226,939,2.226]],["title/classes/ScanTypes.html",[0,0.214,838,2.253]],["body/classes/ScanTypes.html",[0,0.26,2,0.958,3,0.164,4,0.141,5,0.141,7,0.287,8,1.229,10,1.863,14,0.52,15,0.018,16,1.288,17,1.014,19,2.371,20,2.263,21,1.178,22,0.6,24,0.783,25,2.034,26,2.034,27,2.034,31,1.585,40,0.272,41,1.585,42,1.512,45,1.151,49,1.585,50,1.585,51,0.164,55,0.01,56,0.013,57,0.01,105,3.137,137,4.159,142,2.139,153,2.139,157,3.488,161,2.139,297,2.472,838,3.502,934,3.901,940,3.901,941,4.528,942,4.528,943,4.528,944,4.528]],["title/classes/Task.html",[0,0.214,100,1.868]],["body/classes/Task.html",[0,0.19,2,0.7,3,0.12,4,0.103,5,0.103,7,0.21,8,0.994,10,1.672,14,0.556,15,0.018,16,1.522,17,1.085,18,4.181,19,2.604,20,2.456,21,1.191,22,0.642,24,0.802,25,1.646,26,1.646,27,1.646,29,2.292,30,2.349,31,1.646,32,2.491,40,0.22,41,1.158,42,1.106,43,2.732,44,1.654,45,0.841,49,1.158,50,1.158,51,0.12,52,2.349,55,0.008,56,0.011,57,0.008,100,2.349,150,1.944,154,2.324,260,2.816,297,2.532,945,2.851,946,5.469,947,5.469,948,5.469,949,5.469,950,4.845,951,3.622,952,3.31,953,4.702,954,3.31,955,3.622,956,3.31,957,3.622,958,3.31,959,3.31,960,3.31,961,3.31,962,4.702,963,3.31,964,3.31,965,3.31,966,3.31]],["title/classes/TaskDTO.html",[0,0.214,967,2.422]],["body/classes/TaskDTO.html",[0,0.239,2,0.88,3,0.151,4,0.129,5,0.129,7,0.264,8,1.163,14,0.568,15,0.018,16,1.607,17,1.107,21,0.974,22,0.655,24,0.884,40,0.194,51,0.151,55,0.009,56,0.012,57,0.009,70,3.452,100,2.749,173,4.263,175,1.966,260,2.937,327,1.838,621,3.315,622,3.863,950,4.748,951,4.748,955,4.748,957,4.748,967,3.564,968,4.629,969,3.585,970,4.161,971,4.161,972,4.161,973,4.161,974,4.161,975,4.161]],["title/controllers/TaskManagerController.html",[58,1.249,976,2.625]],["body/controllers/TaskManagerController.html",[0,0.17,3,0.107,4,0.092,5,0.092,7,0.187,14,0.487,15,0.018,17,0.95,21,0.95,22,0.562,24,0.98,40,0.264,51,0.107,55,0.007,56,0.01,57,0.007,58,0.988,60,0.988,62,1.382,65,1.919,66,0.655,69,1.566,71,1.833,100,3.452,101,4.073,138,2.285,150,1.206,178,1.667,180,2.544,187,2.105,188,1.833,195,3.092,196,1.667,203,2.547,204,1.915,210,2.565,396,2.718,397,2.076,438,2.296,441,3.968,464,2.808,852,3.832,872,3.339,914,3.339,967,4.768,968,4.073,976,3.044,977,2.547,978,4.334,979,3.734,980,3.734,981,3.734,982,3.734,983,3.734,984,2.547,985,4.334,986,2.957,987,5.417,988,2.547,989,4.334,990,2.957,991,4.353,992,2.547,993,4.334,994,2.957,995,2.547,996,4.334,997,2.957,998,5.417,999,2.547,1000,4.334,1001,2.957,1002,4.334,1003,4.334,1004,2.547,1005,2.611,1006,2.547,1007,2.957,1008,2.957,1009,2.957,1010,2.957,1011,2.957,1012,2.957,1013,2.957,1014,2.957,1015,2.957,1016,2.957,1017,2.957,1018,2.957]],["title/modules/TaskManagerModule.html",[73,1.139,89,2.422]],["body/modules/TaskManagerModule.html",[0,0.275,3,0.174,4,0.149,5,0.149,15,0.018,40,0.34,51,0.174,55,0.011,56,0.014,57,0.011,60,2.015,66,1.064,73,2.01,75,2.15,76,2.15,77,2.399,78,2.399,79,2.15,80,3.296,81,2.399,89,4.715,92,3.014,93,2.399,94,2.269,96,2.544,97,2.544,98,1.68,100,3.296,101,3.11,150,1.679,207,2.15,968,3.11,976,4.633,1005,4.385,1006,4.137,1019,4.137,1020,4.137,1021,4.802,1022,4.802,1023,4.137,1024,4.802]],["title/injectables/TaskManagerService.html",[126,1.249,1005,2.253]],["body/injectables/TaskManagerService.html",[0,0.129,3,0.081,4,0.07,5,0.07,7,0.142,14,0.458,15,0.018,21,1.016,22,0.528,24,0.931,40,0.264,45,0.569,51,0.081,55,0.005,56,0.008,57,0.005,62,1.12,65,1.698,66,0.496,71,1.622,98,0.784,100,3.484,101,3.824,126,1.173,127,1.119,138,2.471,150,0.623,180,2.417,187,1.976,188,1.721,189,3.212,207,1.003,210,2.273,247,1.86,259,2.466,260,2.195,269,1.754,270,2.316,271,2.969,276,2.264,327,0.748,372,2.466,376,1.263,396,1.86,427,3.328,430,3.041,438,2.597,439,3.175,446,1.573,448,1.263,452,1.573,455,4.101,456,3.041,461,4.101,462,4.101,463,4.101,464,2.275,465,1.726,479,2.275,481,2.705,852,3.694,914,2.705,931,1.726,950,3.776,951,3.776,955,3.776,957,3.776,967,4.554,968,3.824,979,3.025,980,3.025,981,3.025,982,3.025,983,3.025,984,3.025,987,5.266,988,3.025,991,4.708,992,3.025,995,3.025,998,4.586,999,3.025,1004,1.93,1005,2.116,1023,1.93,1025,1.93,1026,2.24,1027,2.24,1028,3.511,1029,2.24,1030,2.24,1031,3.511,1032,4.902,1033,2.24,1034,3.511,1035,2.24,1036,2.24,1037,2.24,1038,3.511,1039,2.24,1040,3.511,1041,3.511,1042,3.511,1043,3.511,1044,2.24,1045,2.24,1046,2.24,1047,2.24,1048,2.24,1049,2.24,1050,2.24,1051,2.24,1052,1.93,1053,2.24,1054,2.24,1055,2.24,1056,2.24,1057,2.24,1058,2.24,1059,2.24,1060,2.24,1061,1.93,1062,2.24,1063,2.24,1064,2.24]],["title/classes/TestTable.html",[0,0.214,1065,2.88]],["body/classes/TestTable.html",[0,0.275,2,1.013,3,0.173,4,0.149,5,0.149,7,0.303,8,1.274,10,1.895,14,0.488,15,0.018,16,1.334,17,0.952,19,2.42,20,2.012,21,1.092,22,0.563,24,0.812,25,2.108,26,2.108,27,2.42,29,2.319,40,0.224,41,1.676,42,1.599,45,1.217,49,1.676,50,1.676,51,0.173,55,0.011,56,0.014,57,0.011,297,2.561,1065,4.64,1066,4.125,1067,6.589,1068,4.788,1069,6.023,1070,4.788,1071,4.788]],["title/classes/Treatment.html",[0,0.214,13,1.767]],["body/classes/Treatment.html",[0,0.198,1,4.137,2,0.729,3,0.125,4,0.107,5,0.107,7,0.218,8,1.023,10,1.698,11,2.672,13,2.286,14,0.562,15,0.018,16,1.072,17,1.074,19,2.501,20,2.356,21,1.114,22,0.636,24,0.892,25,2.317,26,2.122,27,2.122,29,2.334,30,1.722,31,1.957,32,1.826,33,3.727,40,0.283,41,1.206,42,1.151,43,2.417,44,1.722,45,0.876,46,2.42,49,1.206,50,1.206,51,0.125,52,1.722,55,0.008,56,0.011,57,0.008,132,2.582,142,2.286,153,2.286,161,1.629,297,2.058,336,2.233,502,4.817,544,2.97,1072,2.97,1073,4.817,1074,4.484,1075,5.591,1076,5.591,1077,3.447,1078,3.447,1079,3.447,1080,3.447,1081,3.447,1082,4.839,1083,3.447,1084,4.839,1085,3.447,1086,3.447,1087,3.447,1088,3.447,1089,3.447]],["title/controllers/TreatmentController.html",[58,1.249,1090,2.625]],["body/controllers/TreatmentController.html",[0,0.223,3,0.141,4,0.121,5,0.121,7,0.246,11,2.458,13,3.151,14,0.426,15,0.018,17,0.942,21,0.831,22,0.557,24,0.976,40,0.246,51,0.141,55,0.009,56,0.012,57,0.009,58,1.3,60,1.3,62,1.678,65,1.901,66,0.862,69,2.062,71,1.816,178,2.194,180,2.535,187,1.841,188,1.603,196,2.194,210,2.458,236,4.533,388,3.382,563,4.533,565,4.826,1074,5.085,1090,3.694,1091,3.353,1092,5.5,1093,4.533,1094,5.135,1095,5.261,1096,3.892,1097,4.533,1098,3.353,1099,3.892,1100,5.261,1101,3.353,1102,5.261,1103,3.892,1104,3.591,1105,3.353,1106,3.892,1107,3.892,1108,3.892,1109,3.892,1110,3.892,1111,3.892,1112,3.892]],["title/classes/TreatmentDTO.html",[0,0.214,608,2.625]],["body/classes/TreatmentDTO.html",[0,0.286,2,1.056,3,0.181,4,0.155,5,0.155,7,0.316,8,1.308,13,2.921,14,0.501,15,0.018,17,0.977,22,0.578,24,0.946,33,5.173,40,0.233,51,0.181,55,0.011,56,0.014,57,0.011,70,3.291,173,4.066,174,3.235,175,2.359,260,2.236,327,2.065,608,4.342,621,3.725,622,4.342,1074,4.716,1113,4.302,1114,4.994,1115,4.994]],["title/modules/TreatmentModule.html",[73,1.139,90,2.422]],["body/modules/TreatmentModule.html",[0,0.277,3,0.175,4,0.15,5,0.15,11,2.331,13,2.281,15,0.018,40,0.341,51,0.175,55,0.011,56,0.014,57,0.011,60,2.022,66,1.07,73,2.015,75,2.162,76,2.162,77,2.412,78,2.412,79,2.162,80,3.305,81,2.412,90,4.721,92,3.025,93,2.412,94,2.281,96,2.558,97,2.558,98,1.69,642,5.216,646,3.39,1090,4.644,1104,4.391,1105,4.159,1116,4.159,1117,4.159,1118,4.828,1119,4.828,1120,4.159,1121,4.828]],["title/injectables/TreatmentService.html",[126,1.249,1104,2.253]],["body/injectables/TreatmentService.html",[0,0.183,3,0.116,4,0.099,5,0.099,7,0.202,11,2.769,13,3.143,14,0.434,15,0.018,21,0.847,22,0.548,24,0.934,31,1.118,40,0.29,42,1.531,45,0.812,51,0.116,55,0.007,56,0.01,57,0.007,62,1.462,65,1.71,66,0.708,71,1.785,98,1.118,120,3.95,126,1.531,127,1.596,180,2.425,187,1.877,188,1.634,189,3.226,210,2.064,247,2.429,260,2.053,269,2.291,270,2.768,271,3.143,276,1.358,427,3.75,438,3.104,448,1.801,479,2.069,551,2.752,565,4.866,646,2.243,656,4.62,660,4.513,669,2.752,673,3.95,674,3.95,1074,5.05,1092,5.048,1093,3.95,1094,4.62,1097,3.95,1098,3.95,1101,2.752,1104,2.762,1120,2.752,1122,2.752,1123,3.195,1124,3.195,1125,4.585,1126,3.195,1127,3.195,1128,3.195,1129,2.752,1130,3.195,1131,4.585,1132,3.95,1133,3.195,1134,3.195,1135,3.195,1136,3.195,1137,3.195,1138,3.195,1139,3.195,1140,3.195,1141,3.195,1142,3.195]],["title/classes/UpdateUserDTO.html",[0,0.214,1143,2.422]],["body/classes/UpdateUserDTO.html",[0,0.25,2,0.922,3,0.158,4,0.135,5,0.135,7,0.276,8,1.199,14,0.561,15,0.017,16,1.623,17,1.094,22,0.647,24,0.764,40,0.204,51,0.158,55,0.01,56,0.013,57,0.01,70,3.437,174,4.875,175,2.059,188,2.276,291,2.979,300,3.15,302,3.15,1143,3.674,1144,6.113,1145,3.755,1146,4.084,1147,4.084,1148,4.358,1149,4.358,1150,4.358,1151,4.358,1152,4.358]],["title/interfaces/User.html",[138,1.512,482,2.422]],["body/interfaces/User.html",[3,0.176,4,0.151,5,0.151,7,0.307,8,1.285,10,1.848,14,0.591,15,0.017,16,1.703,24,0.983,51,0.176,55,0.011,56,0.014,57,0.011,70,3.269,138,2.457,291,3.283,300,3.472,302,3.472,482,3.145,483,3.74,1146,4.501,1147,4.501,1153,4.183]],["title/controllers/UserController.html",[58,1.249,1154,2.625]],["body/controllers/UserController.html",[0,0.188,3,0.119,4,0.102,5,0.102,7,0.208,14,0.481,15,0.018,17,0.991,21,0.937,22,0.586,24,0.94,40,0.277,51,0.119,55,0.007,56,0.011,57,0.007,58,1.097,60,1.097,62,1.492,65,2,66,0.728,69,1.74,71,1.911,138,2.97,150,1.301,178,1.852,180,2.587,187,2.077,188,1.808,195,2.818,196,3.07,205,2.818,210,2.509,220,2.721,276,1.989,376,2.636,388,2.478,396,2.478,397,2.307,438,2.478,439,3.03,555,5.112,852,3.932,877,4.029,1143,3.844,1154,3.284,1155,2.83,1156,4.029,1157,4.029,1158,4.692,1159,2.83,1160,4.344,1161,3.285,1162,2.83,1163,4.677,1164,3.285,1165,3.285,1166,2.83,1167,3.285,1168,2.83,1169,4.677,1170,3.285,1171,2.83,1172,2.83,1173,2.83,1174,2.83,1175,3.285,1176,3.285,1177,3.285,1178,3.285,1179,3.285,1180,3.285,1181,3.285,1182,3.285,1183,3.285,1184,3.285]],["title/classes/UserDTO.html",[0,0.214,1160,2.422]],["body/classes/UserDTO.html",[0,0.258,2,0.953,3,0.163,4,0.14,5,0.14,7,0.285,8,1.225,14,0.567,15,0.018,16,1.634,17,1.105,22,0.654,24,0.781,40,0.21,51,0.163,55,0.01,56,0.013,57,0.01,70,3.45,173,4.201,174,4.149,175,2.128,188,1.765,291,3.026,300,3.2,302,3.2,1146,4.149,1147,4.149,1160,3.753,1185,3.881,1186,4.504,1187,4.504,1188,4.504,1189,4.504,1190,4.504]],["title/classes/UserGroups.html",[0,0.214,224,2.108]],["body/classes/UserGroups.html",[0,0.26,2,0.958,3,0.164,4,0.141,5,0.141,7,0.287,8,1.229,10,1.863,14,0.52,15,0.018,16,1.288,17,1.014,19,2.371,20,2.263,21,1.178,22,0.6,24,0.783,25,2.034,26,2.034,27,2.034,31,1.585,40,0.272,41,1.585,42,1.512,45,1.151,49,1.585,50,1.585,51,0.164,55,0.01,56,0.013,57,0.01,142,2.139,150,1.949,153,2.139,154,3.179,161,2.139,224,3.277,297,2.472,1191,3.901,1192,6.42,1193,4.528,1194,4.528,1195,4.528,1196,4.528,1197,4.528]],["title/modules/UserModule.html",[73,1.139,91,2.422]],["body/modules/UserModule.html",[0,0.279,3,0.176,4,0.151,5,0.151,15,0.018,40,0.341,51,0.176,55,0.011,56,0.014,57,0.011,60,2.029,66,1.076,73,2.02,75,2.174,76,2.174,77,2.426,78,2.426,79,2.174,80,3.313,81,2.426,91,4.728,92,3.035,93,2.426,94,2.294,96,2.572,97,2.572,98,1.699,150,1.351,207,2.174,220,3.647,224,3.425,225,3.74,230,4.183,1154,4.656,1171,4.183,1198,4.855,1199,4.855,1200,4.855,1201,4.855]],["title/injectables/UserService.html",[126,1.249,220,1.868]],["body/injectables/UserService.html",[0,0.201,3,0.081,4,0.069,5,0.069,7,0.141,10,0.93,14,0.477,15,0.018,16,0.956,21,0.931,22,0.57,24,0.896,40,0.285,45,0.566,51,0.081,55,0.008,56,0.008,57,0.005,62,1.115,65,1.879,66,0.494,71,1.717,98,0.78,126,1.168,127,1.114,138,2.761,150,1.36,172,1.565,180,2.523,187,2.062,188,1.795,189,3.411,205,2.107,207,0.998,210,2.169,220,1.747,224,2.433,225,1.717,237,1.717,247,1.853,256,1.565,260,2.378,269,1.747,270,2.784,271,3.092,275,2.265,276,2.079,291,3.143,300,1.747,302,1.747,327,1.633,388,2.985,396,2.286,427,3.322,430,2.456,438,2.59,439,2.265,448,1.256,452,1.565,479,1.444,660,4.945,665,3.013,666,1.92,775,3.013,778,1.92,779,1.92,780,1.92,781,1.92,782,3.013,801,3.013,803,1.92,804,1.717,805,1.92,806,1.92,807,1.92,808,1.92,852,4.041,931,2.694,1052,1.92,1129,1.92,1132,3.013,1143,3.166,1146,2.265,1147,2.265,1156,3.013,1157,3.013,1158,3.718,1159,3.013,1160,4.369,1162,3.013,1166,3.013,1168,1.92,1172,1.92,1173,1.92,1174,1.92,1202,1.92,1203,3.497,1204,3.497,1205,4.888,1206,2.229,1207,4.316,1208,2.229,1209,2.229,1210,2.229,1211,3.497,1212,2.229,1213,3.497,1214,2.229,1215,3.497,1216,2.229,1217,2.229,1218,2.229,1219,2.229,1220,2.229,1221,2.229,1222,2.229,1223,2.229,1224,2.229,1225,2.229,1226,2.229,1227,2.229,1228,2.229,1229,2.229,1230,2.229,1231,2.229,1232,2.229,1233,2.229,1234,2.229,1235,2.229,1236,2.229,1237,2.229,1238,2.229,1239,2.229,1240,2.229,1241,2.229,1242,2.229,1243,2.229,1244,2.229,1245,2.229,1246,2.229,1247,2.229]],["title/classes/Users.html",[0,0.214,150,1.04]],["body/classes/Users.html",[0,0.144,2,0.529,3,0.091,4,0.078,5,0.078,7,0.159,8,0.809,10,1.49,14,0.561,15,0.018,16,1.608,17,1.08,19,2.448,20,2.252,21,1.115,22,0.654,24,0.516,25,1.339,26,1.339,27,1.82,29,1.473,30,1.251,31,1.961,32,1.326,40,0.276,41,0.876,42,0.836,43,1.912,44,1.251,45,0.636,49,0.876,50,0.876,51,0.091,52,1.251,55,0.006,56,0.009,57,0.006,62,1.22,65,1.481,71,1.166,100,3.246,105,2.509,118,2.687,132,2.266,137,3.009,142,2.457,150,1.065,153,1.183,157,1.928,161,2.457,180,2.068,187,1.339,188,1.166,189,2.598,224,3.465,269,2.321,270,1.808,271,1.808,291,2.648,292,3.261,293,3.261,297,2.819,300,1.912,302,1.912,336,1.622,935,2.157,991,3.578,1061,2.157,1073,4.002,1146,2.479,1147,2.479,1248,2.157,1249,4.645,1250,4.645,1251,4.645,1252,4.645,1253,3.827,1254,5.201,1255,3.827,1256,2.503,1257,2.503,1258,2.503,1259,2.503,1260,2.503,1261,2.503,1262,3.827,1263,2.503,1264,2.503,1265,2.503,1266,2.503,1267,2.503,1268,3.827,1269,6.147,1270,2.503,1271,2.503,1272,2.503,1273,3.827,1274,2.503,1275,3.827,1276,3.827,1277,2.503,1278,2.503,1279,2.157,1280,2.503,1281,2.503,1282,4.645,1283,2.503,1284,2.503,1285,3.827,1286,3.827,1287,2.503,1288,2.503,1289,2.503,1290,2.503,1291,3.827]],["title/coverage.html",[1292,3.944]],["body/coverage.html",[0,0.437,1,1.935,5,0.093,6,2.574,11,1.15,13,1.411,14,0.242,15,0.018,55,0.007,56,0.01,57,0.007,58,2.232,59,2.098,61,2.574,67,1.8,79,1.338,100,1.492,101,2.829,105,1.338,106,2.829,126,2.232,128,2.574,132,1.208,133,2.574,138,1.208,141,1.583,145,1.935,150,0.831,165,1.935,166,2.574,167,2.574,176,2.098,177,2.574,201,1.8,205,1.8,219,1.935,220,1.492,224,1.684,245,2.574,263,1.935,276,1.27,289,1.8,290,2.574,310,1.8,311,2.574,321,2.574,324,1.8,342,1.935,343,2.574,350,2.574,357,1.935,358,2.574,361,2.098,362,2.574,398,1.8,425,2.574,482,2.829,484,2.574,485,2.574,486,2.574,501,2.574,552,2.098,553,2.574,558,1.935,605,1.8,608,2.098,620,2.574,648,2.574,753,2.574,804,5.878,810,2.574,817,2.098,825,2.574,832,2.574,838,1.8,848,1.935,849,3.344,850,2.574,857,2.098,858,2.574,886,1.8,908,2.574,940,2.574,945,2.574,967,1.935,968,3.344,969,2.574,976,2.098,977,2.574,1005,1.8,1025,2.574,1065,2.301,1066,2.574,1072,2.574,1090,2.098,1091,2.574,1104,1.8,1113,2.574,1122,2.574,1143,1.935,1144,2.574,1145,2.574,1153,2.574,1154,2.098,1155,2.574,1160,1.935,1185,2.574,1191,2.574,1202,2.574,1248,2.574,1292,2.301,1293,2.987,1294,2.987,1295,2.987,1296,5.162,1297,4.367,1298,2.987,1299,2.987,1300,2.987,1301,5.678,1302,2.574,1303,2.574,1304,2.987,1305,2.987,1306,2.987,1307,6.041,1308,5.162,1309,4.367,1310,5.678,1311,2.987,1312,4.367,1313,2.987,1314,2.987,1315,2.987,1316,2.987,1317,2.987,1318,2.987,1319,2.574,1320,2.987,1321,2.987,1322,2.987,1323,2.987,1324,2.987,1325,2.987,1326,2.987,1327,2.987,1328,2.987,1329,2.987,1330,2.987,1331,4.367,1332,2.987,1333,2.987,1334,2.987,1335,4.367,1336,4.367,1337,2.987,1338,2.987,1339,2.987,1340,2.987,1341,2.987,1342,2.987,1343,2.987,1344,2.987,1345,2.987,1346,2.987]],["title/dependencies.html",[76,2.016,1347,3.114]],["body/dependencies.html",[0,0.346,15,0.018,45,1.533,55,0.011,56,0.014,57,0.011,66,1.064,76,2.15,98,1.68,172,3.372,175,2.269,204,3.11,227,3.699,233,3.372,492,5.198,1279,4.137,1348,6.598,1349,4.802,1350,4.802,1351,4.802,1352,4.802,1353,6.033,1354,4.802,1355,4.802,1356,6.033,1357,6.033,1358,4.802,1359,4.802,1360,4.802,1361,4.802,1362,4.802,1363,4.802,1364,4.802,1365,4.802,1366,4.802,1367,4.802,1368,4.802,1369,4.802,1370,4.802,1371,4.802,1372,4.802,1373,4.802,1374,4.802,1375,4.802,1376,4.802,1377,4.802,1378,4.802,1379,4.802,1380,4.802,1381,4.802,1382,4.802]],["title/miscellaneous/functions.html",[600,3.468,1383,2.187]],["body/miscellaneous/functions.html",[7,0.377,15,0.016,55,0.013,56,0.016,57,0.013,79,3.24,600,4.58,1319,5.122,1383,4.175,1384,5.945]],["title/index.html",[7,0.197,765,2.683,1385,3.114]],["body/index.html",[4,0.143,15,0.018,55,0.01,56,0.013,57,0.01,182,5.05,260,2.054,427,2.586,581,4.976,588,3.534,1292,3.534,1386,4.587,1387,4.587,1388,5.861,1389,4.587,1390,4.587,1391,4.587,1392,4.587,1393,4.587,1394,4.587,1395,4.587,1396,4.587,1397,4.587,1398,4.587,1399,4.587,1400,7.312,1401,4.587,1402,4.587,1403,4.587,1404,7.193,1405,4.587,1406,4.587,1407,5.861,1408,4.587,1409,4.587,1410,4.587,1411,4.587,1412,5.861,1413,4.587,1414,4.587,1415,4.587,1416,5.861,1417,5.861,1418,4.587,1419,4.587,1420,4.587,1421,4.587,1422,4.587,1423,3.952,1424,4.587,1425,4.587,1426,4.587,1427,4.587,1428,4.587,1429,4.587,1430,4.587,1431,4.587,1432,4.587,1433,4.587,1434,4.587,1435,4.587,1436,4.587,1437,4.587,1438,4.587,1439,4.587,1440,4.587,1441,4.587]],["title/modules.html",[75,2.293]],["body/modules.html",[15,0.015,55,0.012,56,0.015,57,0.012,74,3.753,75,2.394,85,3.462,86,3.462,87,3.462,88,3.462,89,3.462,90,3.462,91,3.462,1423,6.566,1442,7.622,1443,7.622,1444,7.622]],["title/overview.html",[1445,4.41]],["body/overview.html",[2,0.86,15,0.018,55,0.009,56,0.012,57,0.009,60,1.358,67,3.67,73,1.238,74,5.428,75,1.82,76,1.82,77,2.031,78,2.031,79,1.82,80,2.031,81,2.031,82,3.501,83,3.501,84,3.501,85,4.675,86,4.508,87,4.383,88,4.383,89,4.383,90,4.383,91,4.383,92,2.706,93,2.031,94,1.92,127,2.031,201,3.67,216,3.501,217,3.501,218,3.501,219,4.208,220,3.246,398,3.67,417,3.501,418,3.501,483,3.131,605,3.67,639,3.501,640,3.501,886,3.67,901,3.501,902,3.501,1005,3.67,1019,3.501,1020,3.501,1104,3.67,1116,3.501,1117,3.501,1445,3.501,1446,6.092,1447,4.064,1448,4.064]],["title/miscellaneous/variables.html",[1383,2.187,1449,3.878]],["body/miscellaneous/variables.html",[7,0.351,15,0.017,55,0.013,56,0.015,57,0.013,71,1.691,138,2.244,150,1.544,197,4.78,205,3.971,327,1.853,621,3.343,1302,4.78,1303,5.678,1383,3.896,1449,4.78,1450,5.549,1451,5.549,1452,5.549,1453,5.549,1454,5.549,1455,5.549,1456,5.549,1457,5.549,1458,5.549,1459,5.549]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"classes/Acknowledgement.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Appointment.html":{},"classes/AuthCredentialsDto.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormDTO.html":{},"classes/FormTemplate.html":{},"classes/FormTemplateDTO.html":{},"controllers/FormsController.html":{},"modules/FormsModule.html":{},"injectables/FormsService.html":{},"interfaces/JwtPayloadInterface.html":{},"classes/JwtStrategy.html":{},"classes/Patient.html":{},"controllers/PatientController.html":{},"classes/PatientDTO.html":{},"modules/PatientModule.html":{},"injectables/PatientService.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"classes/ScanDTO.html":{},"controllers/ScanTrackingController.html":{},"modules/ScanTrackingModule.html":{},"injectables/ScanTrackingService.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TaskDTO.html":{},"controllers/TaskManagerController.html":{},"modules/TaskManagerModule.html":{},"injectables/TaskManagerService.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"controllers/TreatmentController.html":{},"classes/TreatmentDTO.html":{},"modules/TreatmentModule.html":{},"injectables/TreatmentService.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserGroups.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/Users.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":804,"title":{},"body":{"injectables/PatientService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["0.0.2",{"_index":1365,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":1374,"title":{},"body":{"dependencies.html":{}}}],["0.10.1",{"_index":1363,"title":{},"body":{"dependencies.html":{}}}],["0.2.19",{"_index":1382,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":1362,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":1368,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1320,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1314,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1296,"title":{},"body":{"coverage.html":{}}}],["0/20",{"_index":1311,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1301,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1312,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1310,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1307,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1309,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1308,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1313,"title":{},"body":{"coverage.html":{}}}],["0458795",{"_index":679,"title":{},"body":{"injectables/PatientService.html":{}}}],["1",{"_index":729,"title":{},"body":{"injectables/PatientService.html":{}}}],["1.4.2",{"_index":1367,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1306,"title":{},"body":{"coverage.html":{}}}],["1/17",{"_index":1322,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1324,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":1334,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":1340,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1305,"title":{},"body":{"coverage.html":{}}}],["1231",{"_index":241,"title":{},"body":{"modules/AuthenticationModule.html":{},"classes/JwtStrategy.html":{}}}],["14",{"_index":1339,"title":{},"body":{"coverage.html":{}}}],["167.71.36.250",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["2",{"_index":1448,"title":{},"body":{"overview.html":{}}}],["2/3",{"_index":1298,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":1300,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1333,"title":{},"body":{"coverage.html":{}}}],["26",{"_index":1447,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":1376,"title":{},"body":{"dependencies.html":{}}}],["3.0.6",{"_index":1360,"title":{},"body":{"dependencies.html":{}}}],["3.1.0",{"_index":1354,"title":{},"body":{"dependencies.html":{}}}],["3.1.1",{"_index":1359,"title":{},"body":{"dependencies.html":{}}}],["3/4",{"_index":1341,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":1343,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1323,"title":{},"body":{"coverage.html":{}}}],["3600",{"_index":244,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["4.0.0",{"_index":1369,"title":{},"body":{"dependencies.html":{}}}],["4.1.1",{"_index":1381,"title":{},"body":{"dependencies.html":{}}}],["4.2.0",{"_index":1357,"title":{},"body":{"dependencies.html":{}}}],["4/5",{"_index":1326,"title":{},"body":{"coverage.html":{}}}],["4/7",{"_index":1328,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":1321,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":1336,"title":{},"body":{"coverage.html":{}}}],["5/7",{"_index":1338,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1299,"title":{},"body":{"coverage.html":{}}}],["5432",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["57",{"_index":1327,"title":{},"body":{"coverage.html":{}}}],["6.1.0",{"_index":1351,"title":{},"body":{"dependencies.html":{}}}],["6.1.1",{"_index":1350,"title":{},"body":{"dependencies.html":{}}}],["6.2.0",{"_index":1355,"title":{},"body":{"dependencies.html":{}}}],["6.5.3",{"_index":1378,"title":{},"body":{"dependencies.html":{}}}],["6.8.0",{"_index":1348,"title":{},"body":{"dependencies.html":{}}}],["6/7",{"_index":1330,"title":{},"body":{"coverage.html":{}}}],["6/8",{"_index":1332,"title":{},"body":{"coverage.html":{}}}],["6/9",{"_index":1344,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":1342,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":1297,"title":{},"body":{"coverage.html":{}}}],["7.12.1",{"_index":1371,"title":{},"body":{"dependencies.html":{}}}],["7/8",{"_index":1316,"title":{},"body":{"coverage.html":{}}}],["7/9",{"_index":1318,"title":{},"body":{"coverage.html":{}}}],["71",{"_index":1337,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":1331,"title":{},"body":{"coverage.html":{}}}],["77",{"_index":1317,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":1446,"title":{},"body":{"overview.html":{}}}],["80",{"_index":1325,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":1335,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":1329,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":1315,"title":{},"body":{"coverage.html":{}}}],["__dirname",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["_gfgkzyxel_okd5hnjxsitbf5jatagecfd1hnjecd",{"_index":691,"title":{},"body":{"injectables/PatientService.html":{}}}],["accept",{"_index":687,"title":{},"body":{"injectables/PatientService.html":{}}}],["acknowledgement",{"_index":1,"title":{"classes/Acknowledgement.html":{}},"body":{"classes/Acknowledgement.html":{},"classes/Patient.html":{},"classes/Treatment.html":{},"coverage.html":{}}}],["acknowledgement.entity",{"_index":544,"title":{},"body":{"classes/Patient.html":{},"classes/Treatment.html":{}}}],["acknowledgement.patient",{"_index":550,"title":{},"body":{"classes/Patient.html":{}}}],["acknowledgement.treatment",{"_index":1088,"title":{},"body":{"classes/Treatment.html":{}}}],["acknowledgements",{"_index":502,"title":{},"body":{"classes/Patient.html":{},"classes/Treatment.html":{}}}],["add",{"_index":914,"title":{},"body":{"injectables/ScanTrackingService.html":{},"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{}}}],["addorderby('priority",{"_index":1042,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["address_physical",{"_index":515,"title":{},"body":{"classes/Patient.html":{},"classes/PatientDTO.html":{},"injectables/PatientService.html":{}}}],["address_postal",{"_index":517,"title":{},"body":{"classes/Patient.html":{},"classes/PatientDTO.html":{},"injectables/PatientService.html":{}}}],["addressphysical",{"_index":503,"title":{},"body":{"classes/Patient.html":{}}}],["addresspostal",{"_index":504,"title":{},"body":{"classes/Patient.html":{}}}],["addscan",{"_index":860,"title":{},"body":{"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{}}}],["addscan(@body",{"_index":894,"title":{},"body":{"controllers/ScanTrackingController.html":{}}}],["addscan(scandto",{"_index":866,"title":{},"body":{"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{}}}],["addtask",{"_index":979,"title":{},"body":{"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{}}}],["addtask(@param('userid",{"_index":1013,"title":{},"body":{"controllers/TaskManagerController.html":{}}}],["addtask(userid",{"_index":984,"title":{},"body":{"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{}}}],["admin",{"_index":287,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["african",{"_index":737,"title":{},"body":{"injectables/PatientService.html":{}}}],["alive",{"_index":683,"title":{},"body":{"injectables/PatientService.html":{}}}],["allowing",{"_index":593,"title":{},"body":{"controllers/PatientController.html":{}}}],["already",{"_index":780,"title":{},"body":{"injectables/PatientService.html":{},"injectables/UserService.html":{}}}],["amazing",{"_index":1424,"title":{},"body":{"index.html":{}}}],["angular",{"_index":1397,"title":{},"body":{"index.html":{}}}],["apimodelproperty",{"_index":173,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/FormDTO.html":{},"classes/FormTemplateDTO.html":{},"classes/ScanDTO.html":{},"classes/TaskDTO.html":{},"classes/TreatmentDTO.html":{},"classes/UserDTO.html":{}}}],["apimodelproperty()@isstring",{"_index":168,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["apimodelpropertyoptional",{"_index":174,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/PatientDTO.html":{},"classes/TreatmentDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/UserDTO.html":{}}}],["app",{"_index":1402,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":68,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":59,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":1394,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":74,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appointment",{"_index":132,"title":{"classes/Appointment.html":{}},"body":{"classes/Appointment.html":{},"classes/Form.html":{},"controllers/FormsController.html":{},"modules/FormsModule.html":{},"injectables/FormsService.html":{},"classes/Report.html":{},"classes/Scan.html":{},"modules/ScanTrackingModule.html":{},"injectables/ScanTrackingService.html":{},"classes/Treatment.html":{},"classes/Users.html":{},"coverage.html":{}}}],["appointment.entity",{"_index":336,"title":{},"body":{"classes/Form.html":{},"classes/Report.html":{},"classes/Scan.html":{},"classes/Treatment.html":{},"classes/Users.html":{}}}],["appointment.forms",{"_index":339,"title":{},"body":{"classes/Form.html":{}}}],["appointment.reports",{"_index":824,"title":{},"body":{"classes/Report.html":{}}}],["appointment.scans",{"_index":846,"title":{},"body":{"classes/Scan.html":{}}}],["appointment.treatment",{"_index":1089,"title":{},"body":{"classes/Treatment.html":{}}}],["appointment.user",{"_index":1289,"title":{},"body":{"classes/Users.html":{}}}],["appointment_date",{"_index":139,"title":{},"body":{"classes/Appointment.html":{}}}],["appointment_id",{"_index":325,"title":{},"body":{"classes/Form.html":{},"classes/Report.html":{},"classes/Scan.html":{}}}],["appointmentdate",{"_index":134,"title":{},"body":{"classes/Appointment.html":{}}}],["appointmentid",{"_index":344,"title":{},"body":{"classes/FormDTO.html":{},"controllers/FormsController.html":{},"injectables/FormsService.html":{},"classes/ScanDTO.html":{},"injectables/ScanTrackingService.html":{}}}],["appointmentrepository",{"_index":429,"title":{},"body":{"injectables/FormsService.html":{},"injectables/ScanTrackingService.html":{}}}],["appointments",{"_index":1073,"title":{},"body":{"classes/Treatment.html":{},"classes/Users.html":{}}}],["appservice",{"_index":67,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["archiver",{"_index":1358,"title":{},"body":{"dependencies.html":{}}}],["around",{"_index":766,"title":{},"body":{"injectables/PatientService.html":{}}}],["asc",{"_index":1041,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["assigned",{"_index":987,"title":{},"body":{"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{}}}],["assignee_user_id",{"_index":951,"title":{},"body":{"classes/Task.html":{},"classes/TaskDTO.html":{},"injectables/TaskManagerService.html":{}}}],["assigneeuser",{"_index":946,"title":{},"body":{"classes/Task.html":{}}}],["assigner",{"_index":1003,"title":{},"body":{"controllers/TaskManagerController.html":{}}}],["assigner_user_id",{"_index":953,"title":{},"body":{"classes/Task.html":{}}}],["assigneruser",{"_index":947,"title":{},"body":{"classes/Task.html":{}}}],["async",{"_index":180,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/FormsController.html":{},"injectables/FormsService.html":{},"classes/JwtStrategy.html":{},"controllers/PatientController.html":{},"injectables/PatientService.html":{},"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{},"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{},"controllers/TreatmentController.html":{},"injectables/TreatmentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/Users.html":{}}}],["asynchronous",{"_index":592,"title":{},"body":{"controllers/PatientController.html":{},"injectables/PatientService.html":{}}}],["attachment",{"_index":833,"title":{},"body":{"classes/Scan.html":{},"classes/ScanDTO.html":{},"injectables/ScanTrackingService.html":{}}}],["authcredentialsdto",{"_index":165,"title":{"classes/AuthCredentialsDto.html":{}},"body":{"classes/AuthCredentialsDto.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["authentication",{"_index":179,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["authentication.controller",{"_index":222,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["authentication.service",{"_index":202,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{}}}],["authentication/authentication.module",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["authenticationcontroller",{"_index":176,"title":{"controllers/AuthenticationController.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationmodule",{"_index":85,"title":{"modules/AuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["authenticationservice",{"_index":201,"title":{"injectables/AuthenticationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["authguard",{"_index":203,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TaskManagerController.html":{}}}],["author",{"_index":1434,"title":{},"body":{"index.html":{}}}],["authorization",{"_index":688,"title":{},"body":{"injectables/PatientService.html":{}}}],["authservice",{"_index":209,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["automatically",{"_index":1457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["await",{"_index":271,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/FormsService.html":{},"classes/JwtStrategy.html":{},"controllers/PatientController.html":{},"injectables/PatientService.html":{},"injectables/ScanTrackingService.html":{},"injectables/TaskManagerService.html":{},"injectables/TreatmentService.html":{},"injectables/UserService.html":{},"classes/Users.html":{}}}],["backers",{"_index":1425,"title":{},"body":{"index.html":{}}}],["based",{"_index":1211,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt",{"_index":1279,"title":{},"body":{"classes/Users.html":{},"dependencies.html":{}}}],["bcrypt.gensaltsync",{"_index":1283,"title":{},"body":{"classes/Users.html":{}}}],["bcrypt.hash(password",{"_index":1286,"title":{},"body":{"classes/Users.html":{}}}],["bearer",{"_index":689,"title":{},"body":{"injectables/PatientService.html":{}}}],["beforeinsert",{"_index":1275,"title":{},"body":{"classes/Users.html":{}}}],["beforeinsert()@beforeupdate",{"_index":1271,"title":{},"body":{"classes/Users.html":{}}}],["beforeupdate",{"_index":1276,"title":{},"body":{"classes/Users.html":{}}}],["being",{"_index":754,"title":{},"body":{"injectables/PatientService.html":{}}}],["body",{"_index":195,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/FormsController.html":{},"controllers/PatientController.html":{},"controllers/ScanTrackingController.html":{},"controllers/TaskManagerController.html":{},"controllers/UserController.html":{}}}],["bootstrap",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/FormsModule.html":{},"modules/PatientModule.html":{},"modules/ScanTrackingModule.html":{},"modules/TaskManagerModule.html":{},"modules/TreatmentModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1444,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1442,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":35,"title":{},"body":{"classes/Acknowledgement.html":{},"classes/Scan.html":{},"classes/ScanDTO.html":{}}}],["building",{"_index":1389,"title":{},"body":{"index.html":{}}}],["cache",{"_index":685,"title":{},"body":{"injectables/PatientService.html":{}}}],["calling",{"_index":583,"title":{},"body":{"controllers/PatientController.html":{}}}],["capture",{"_index":434,"title":{},"body":{"injectables/FormsService.html":{}}}],["captureformresponse",{"_index":363,"title":{},"body":{"controllers/FormsController.html":{},"injectables/FormsService.html":{}}}],["captureformresponse(@body",{"_index":413,"title":{},"body":{"controllers/FormsController.html":{}}}],["captureformresponse(formdto",{"_index":370,"title":{},"body":{"controllers/FormsController.html":{},"injectables/FormsService.html":{}}}],["catch",{"_index":461,"title":{},"body":{"injectables/FormsService.html":{},"injectables/ScanTrackingService.html":{},"injectables/TaskManagerService.html":{}}}],["change",{"_index":236,"title":{},"body":{"modules/AuthenticationModule.html":{},"controllers/TreatmentController.html":{}}}],["check",{"_index":1234,"title":{},"body":{"injectables/UserService.html":{}}}],["class",{"_index":0,"title":{"classes/Acknowledgement.html":{},"classes/Appointment.html":{},"classes/AuthCredentialsDto.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormDTO.html":{},"classes/FormTemplate.html":{},"classes/FormTemplateDTO.html":{},"classes/JwtStrategy.html":{},"classes/Patient.html":{},"classes/PatientDTO.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"classes/ScanDTO.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TaskDTO.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"classes/TreatmentDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/UserDTO.html":{},"classes/UserGroups.html":{},"classes/Users.html":{}},"body":{"classes/Acknowledgement.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Appointment.html":{},"classes/AuthCredentialsDto.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormDTO.html":{},"classes/FormTemplate.html":{},"classes/FormTemplateDTO.html":{},"controllers/FormsController.html":{},"modules/FormsModule.html":{},"injectables/FormsService.html":{},"classes/JwtStrategy.html":{},"classes/Patient.html":{},"controllers/PatientController.html":{},"classes/PatientDTO.html":{},"modules/PatientModule.html":{},"injectables/PatientService.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"classes/ScanDTO.html":{},"controllers/ScanTrackingController.html":{},"modules/ScanTrackingModule.html":{},"injectables/ScanTrackingService.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TaskDTO.html":{},"controllers/TaskManagerController.html":{},"modules/TaskManagerModule.html":{},"injectables/TaskManagerService.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"controllers/TreatmentController.html":{},"classes/TreatmentDTO.html":{},"modules/TreatmentModule.html":{},"injectables/TreatmentService.html":{},"classes/UpdateUserDTO.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserGroups.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/Users.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Acknowledgement.html":{},"classes/Appointment.html":{},"classes/AuthCredentialsDto.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormDTO.html":{},"classes/FormTemplate.html":{},"classes/FormTemplateDTO.html":{},"classes/JwtStrategy.html":{},"classes/Patient.html":{},"classes/PatientDTO.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"classes/ScanDTO.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TaskDTO.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"classes/TreatmentDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/UserDTO.html":{},"classes/UserGroups.html":{},"classes/Users.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule",{"_index":216,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_exports",{"_index":217,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_providers",{"_index":218,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_formsmodule",{"_index":417,"title":{},"body":{"modules/FormsModule.html":{},"overview.html":{}}}],["cluster_formsmodule_providers",{"_index":418,"title":{},"body":{"modules/FormsModule.html":{},"overview.html":{}}}],["cluster_patientmodule",{"_index":639,"title":{},"body":{"modules/PatientModule.html":{},"overview.html":{}}}],["cluster_patientmodule_providers",{"_index":640,"title":{},"body":{"modules/PatientModule.html":{},"overview.html":{}}}],["cluster_scantrackingmodule",{"_index":901,"title":{},"body":{"modules/ScanTrackingModule.html":{},"overview.html":{}}}],["cluster_scantrackingmodule_providers",{"_index":902,"title":{},"body":{"modules/ScanTrackingModule.html":{},"overview.html":{}}}],["cluster_taskmanagermodule",{"_index":1019,"title":{},"body":{"modules/TaskManagerModule.html":{},"overview.html":{}}}],["cluster_taskmanagermodule_providers",{"_index":1020,"title":{},"body":{"modules/TaskManagerModule.html":{},"overview.html":{}}}],["cluster_treatmentmodule",{"_index":1116,"title":{},"body":{"modules/TreatmentModule.html":{},"overview.html":{}}}],["cluster_treatmentmodule_providers",{"_index":1117,"title":{},"body":{"modules/TreatmentModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1198,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1199,"title":{},"body":{"modules/UserModule.html":{}}}],["column",{"_index":41,"title":{},"body":{"classes/Acknowledgement.html":{},"classes/Appointment.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormTemplate.html":{},"classes/Patient.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"classes/UserGroups.html":{},"classes/Users.html":{}}}],["column('bytea",{"_index":36,"title":{},"body":{"classes/Acknowledgement.html":{},"classes/Scan.html":{}}}],["column('date",{"_index":18,"title":{},"body":{"classes/Acknowledgement.html":{},"classes/Appointment.html":{},"classes/Patient.html":{},"classes/Task.html":{}}}],["column('integer",{"_index":25,"title":{},"body":{"classes/Acknowledgement.html":{},"classes/Appointment.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormTemplate.html":{},"classes/Patient.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"classes/UserGroups.html":{},"classes/Users.html":{}}}],["column('json",{"_index":328,"title":{},"body":{"classes/Form.html":{},"classes/FormTemplate.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{}}}],["column('smallint",{"_index":962,"title":{},"body":{"classes/Task.html":{}}}],["column('text",{"_index":297,"title":{},"body":{"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormTemplate.html":{},"classes/Patient.html":{},"classes/ReportTemplates.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"classes/UserGroups.html":{},"classes/Users.html":{}}}],["connection",{"_index":681,"title":{},"body":{"injectables/PatientService.html":{}}}],["console.log(data[item",{"_index":701,"title":{},"body":{"injectables/PatientService.html":{}}}],["console.log(user",{"_index":215,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["const",{"_index":270,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/FormsService.html":{},"classes/JwtStrategy.html":{},"controllers/PatientController.html":{},"injectables/PatientService.html":{},"injectables/ScanTrackingService.html":{},"injectables/TaskManagerService.html":{},"injectables/TreatmentService.html":{},"injectables/UserService.html":{},"classes/Users.html":{}}}],["constructor",{"_index":247,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/FormsService.html":{},"classes/JwtStrategy.html":{},"injectables/PatientService.html":{},"injectables/ScanTrackingService.html":{},"injectables/TaskManagerService.html":{},"injectables/TreatmentService.html":{},"injectables/UserService.html":{}}}],["constructor(formtemplaterepository",{"_index":426,"title":{},"body":{"injectables/FormsService.html":{}}}],["constructor(patientrepository",{"_index":651,"title":{},"body":{"injectables/PatientService.html":{}}}],["constructor(private",{"_index":69,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/FormsController.html":{},"controllers/PatientController.html":{},"controllers/ScanTrackingController.html":{},"controllers/TaskManagerController.html":{},"controllers/TreatmentController.html":{},"controllers/UserController.html":{}}}],["constructor(scanrepository",{"_index":909,"title":{},"body":{"injectables/ScanTrackingService.html":{}}}],["constructor(taskrepository",{"_index":1026,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["constructor(treatmentrepository",{"_index":1123,"title":{},"body":{"injectables/TreatmentService.html":{}}}],["constructor(usersrepository",{"_index":1206,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(usersservice",{"_index":248,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/JwtStrategy.html":{}}}],["control",{"_index":686,"title":{},"body":{"injectables/PatientService.html":{}}}],["controller",{"_index":58,"title":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/FormsController.html":{},"controllers/PatientController.html":{},"controllers/ScanTrackingController.html":{},"controllers/TaskManagerController.html":{},"controllers/TreatmentController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/FormsController.html":{},"controllers/PatientController.html":{},"controllers/ScanTrackingController.html":{},"controllers/TaskManagerController.html":{},"controllers/TreatmentController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('authentication",{"_index":208,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('forms",{"_index":402,"title":{},"body":{"controllers/FormsController.html":{}}}],["controller('patient",{"_index":610,"title":{},"body":{"controllers/PatientController.html":{}}}],["controller('scan",{"_index":888,"title":{},"body":{"controllers/ScanTrackingController.html":{}}}],["controller('task",{"_index":1007,"title":{},"body":{"controllers/TaskManagerController.html":{}}}],["controller('treatment",{"_index":1106,"title":{},"body":{"controllers/TreatmentController.html":{}}}],["controller('user",{"_index":1175,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":60,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/FormsController.html":{},"modules/FormsModule.html":{},"controllers/PatientController.html":{},"modules/PatientModule.html":{},"controllers/ScanTrackingController.html":{},"modules/ScanTrackingModule.html":{},"controllers/TaskManagerController.html":{},"modules/TaskManagerModule.html":{},"controllers/TreatmentController.html":{},"modules/TreatmentModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["converts",{"_index":587,"title":{},"body":{"controllers/PatientController.html":{}}}],["count(phase",{"_index":1139,"title":{},"body":{"injectables/TreatmentService.html":{}}}],["coverage",{"_index":1292,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cqlfzpqe6dem7xchj",{"_index":692,"title":{},"body":{"injectables/PatientService.html":{}}}],["create",{"_index":376,"title":{},"body":{"controllers/FormsController.html":{},"injectables/FormsService.html":{},"controllers/PatientController.html":{},"injectables/PatientService.html":{},"injectables/ScanTrackingService.html":{},"injectables/TaskManagerService.html":{},"controllers/UserController.html":{}}}],["created",{"_index":595,"title":{},"body":{"controllers/PatientController.html":{}}}],["createformtemplate",{"_index":364,"title":{},"body":{"controllers/FormsController.html":{},"injectables/FormsService.html":{}}}],["createformtemplate(@body",{"_index":407,"title":{},"body":{"controllers/FormsController.html":{}}}],["createformtemplate(formtemplatedto",{"_index":374,"title":{},"body":{"controllers/FormsController.html":{},"injectables/FormsService.html":{}}}],["createparamdecorator",{"_index":1453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpatient",{"_index":554,"title":{},"body":{"controllers/PatientController.html":{},"injectables/PatientService.html":{}}}],["createpatient(@body",{"_index":618,"title":{},"body":{"controllers/PatientController.html":{}}}],["createpatient(patientdto",{"_index":557,"title":{},"body":{"controllers/PatientController.html":{},"injectables/PatientService.html":{}}}],["createquerybuilder",{"_index":479,"title":{},"body":{"injectables/FormsService.html":{},"injectables/ScanTrackingService.html":{},"injectables/TaskManagerService.html":{},"injectables/TreatmentService.html":{},"injectables/UserService.html":{}}}],["createuser",{"_index":1156,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuser(@body",{"_index":1179,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(userdto",{"_index":1159,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["credentials",{"_index":258,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["credentials.dto",{"_index":200,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["credentials.dto.ts",{"_index":167,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:10",{"_index":169,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["credentials.dto.ts:7",{"_index":170,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["current",{"_index":1100,"title":{},"body":{"controllers/TreatmentController.html":{}}}],["custom",{"_index":1455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data",{"_index":621,"title":{},"body":{"classes/PatientDTO.html":{},"injectables/PatientService.html":{},"classes/ScanDTO.html":{},"classes/TaskDTO.html":{},"classes/TreatmentDTO.html":{},"miscellaneous/variables.html":{}}}],["data[item].cellphone.number",{"_index":739,"title":{},"body":{"injectables/PatientService.html":{}}}],["data[item].email.address",{"_index":745,"title":{},"body":{"injectables/PatientService.html":{}}}],["data[item].emergencycontact.firstname",{"_index":705,"title":{},"body":{"injectables/PatientService.html":{}}}],["data[item].emergencycontact.lastname",{"_index":707,"title":{},"body":{"injectables/PatientService.html":{}}}],["data[item].emergencycontact.phone.number",{"_index":709,"title":{},"body":{"injectables/PatientService.html":{}}}],["data[item].emergencycontact.relationship.name",{"_index":711,"title":{},"body":{"injectables/PatientService.html":{}}}],["data[item].familydoctor.name",{"_index":713,"title":{},"body":{"injectables/PatientService.html":{}}}],["data[item].familydoctor.phone",{"_index":715,"title":{},"body":{"injectables/PatientService.html":{}}}],["data[item].homephone",{"_index":741,"title":{},"body":{"injectables/PatientService.html":{}}}],["data[item].person.dob.split",{"_index":725,"title":{},"body":{"injectables/PatientService.html":{}}}],["data[item].person.firstname",{"_index":721,"title":{},"body":{"injectables/PatientService.html":{}}}],["data[item].person.gender",{"_index":733,"title":{},"body":{"injectables/PatientService.html":{}}}],["data[item].person.identitycountry.value",{"_index":735,"title":{},"body":{"injectables/PatientService.html":{}}}],["data[item].person.idnumber",{"_index":703,"title":{},"body":{"injectables/PatientService.html":{}}}],["data[item].person.lastname",{"_index":723,"title":{},"body":{"injectables/PatientService.html":{}}}],["data[item].person.title.name",{"_index":719,"title":{},"body":{"injectables/PatientService.html":{}}}],["data[item].person.uuid",{"_index":717,"title":{},"body":{"injectables/PatientService.html":{}}}],["data[item].postaladdress",{"_index":747,"title":{},"body":{"injectables/PatientService.html":{}}}],["data[item].residentialaddress",{"_index":749,"title":{},"body":{"injectables/PatientService.html":{}}}],["data[item].workphone",{"_index":743,"title":{},"body":{"injectables/PatientService.html":{}}}],["database",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"injectables/TreatmentService.html":{}}}],["date",{"_index":9,"title":{},"body":{"classes/Acknowledgement.html":{},"classes/Patient.html":{}}}],["date(dateparts[2",{"_index":727,"title":{},"body":{"injectables/PatientService.html":{}}}],["date(dob",{"_index":789,"title":{},"body":{"injectables/PatientService.html":{}}}],["date_creation",{"_index":955,"title":{},"body":{"classes/Task.html":{},"classes/TaskDTO.html":{},"injectables/TaskManagerService.html":{}}}],["date_due",{"_index":957,"title":{},"body":{"classes/Task.html":{},"classes/TaskDTO.html":{},"injectables/TaskManagerService.html":{}}}],["datecreation",{"_index":948,"title":{},"body":{"classes/Task.html":{}}}],["datedue",{"_index":949,"title":{},"body":{"classes/Task.html":{}}}],["dateparts",{"_index":724,"title":{},"body":{"injectables/PatientService.html":{}}}],["dateparts[0",{"_index":730,"title":{},"body":{"injectables/PatientService.html":{}}}],["dateparts[1",{"_index":728,"title":{},"body":{"injectables/PatientService.html":{}}}],["declarations",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/FormsModule.html":{},"modules/PatientModule.html":{},"modules/ScanTrackingModule.html":{},"modules/TaskManagerModule.html":{},"modules/TreatmentModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorator",{"_index":1456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":17,"title":{},"body":{"classes/Acknowledgement.html":{},"controllers/AppController.html":{},"classes/Appointment.html":{},"classes/AuthCredentialsDto.html":{},"controllers/AuthenticationController.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormDTO.html":{},"classes/FormTemplate.html":{},"classes/FormTemplateDTO.html":{},"controllers/FormsController.html":{},"classes/Patient.html":{},"controllers/PatientController.html":{},"classes/PatientDTO.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"classes/ScanDTO.html":{},"controllers/ScanTrackingController.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TaskDTO.html":{},"controllers/TaskManagerController.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"controllers/TreatmentController.html":{},"classes/TreatmentDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserGroups.html":{},"classes/Users.html":{}}}],["default",{"_index":1451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":232,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["defined",{"_index":22,"title":{},"body":{"classes/Acknowledgement.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Appointment.html":{},"classes/AuthCredentialsDto.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormDTO.html":{},"classes/FormTemplate.html":{},"classes/FormTemplateDTO.html":{},"controllers/FormsController.html":{},"injectables/FormsService.html":{},"classes/JwtStrategy.html":{},"classes/Patient.html":{},"controllers/PatientController.html":{},"classes/PatientDTO.html":{},"injectables/PatientService.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"classes/ScanDTO.html":{},"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TaskDTO.html":{},"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"controllers/TreatmentController.html":{},"classes/TreatmentDTO.html":{},"injectables/TreatmentService.html":{},"classes/UpdateUserDTO.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserGroups.html":{},"injectables/UserService.html":{},"classes/Users.html":{}}}],["delete",{"_index":396,"title":{},"body":{"controllers/FormsController.html":{},"injectables/FormsService.html":{},"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{},"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete(':formtemplateid",{"_index":393,"title":{},"body":{"controllers/FormsController.html":{}}}],["delete(':scanid",{"_index":880,"title":{},"body":{"controllers/ScanTrackingController.html":{}}}],["delete(':taskid",{"_index":996,"title":{},"body":{"controllers/TaskManagerController.html":{}}}],["deleteresult",{"_index":1219,"title":{},"body":{"injectables/UserService.html":{}}}],["deleteuser",{"_index":1157,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deleteuser(@param('userid",{"_index":1183,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteuser(userid",{"_index":1162,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dependencies",{"_index":76,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/FormsModule.html":{},"modules/PatientModule.html":{},"modules/ScanTrackingModule.html":{},"modules/TaskManagerModule.html":{},"modules/TreatmentModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":1043,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["description",{"_index":260,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/PatientDTO.html":{},"injectables/PatientService.html":{},"classes/ScanDTO.html":{},"classes/Task.html":{},"classes/TaskDTO.html":{},"injectables/TaskManagerService.html":{},"classes/TreatmentDTO.html":{},"injectables/TreatmentService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["details",{"_index":456,"title":{},"body":{"injectables/FormsService.html":{},"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{},"injectables/TaskManagerService.html":{}}}],["development",{"_index":1403,"title":{},"body":{"index.html":{}}}],["dob",{"_index":505,"title":{},"body":{"classes/Patient.html":{},"classes/PatientDTO.html":{},"injectables/PatientService.html":{}}}],["documentation",{"_index":1293,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":597,"title":{},"body":{"controllers/PatientController.html":{}}}],["dto",{"_index":259,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/FormsService.html":{},"injectables/ScanTrackingService.html":{},"injectables/TaskManagerService.html":{}}}],["dto/auth",{"_index":199,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["dto/patient.dto",{"_index":607,"title":{},"body":{"controllers/PatientController.html":{},"injectables/PatientService.html":{}}}],["dto/treatment.dto",{"_index":609,"title":{},"body":{"controllers/PatientController.html":{}}}],["dto/update",{"_index":1173,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/user.dto",{"_index":1172,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["due",{"_index":573,"title":{},"body":{"controllers/PatientController.html":{},"injectables/PatientService.html":{}}}],["e",{"_index":462,"title":{},"body":{"injectables/FormsService.html":{},"injectables/ScanTrackingService.html":{},"injectables/TaskManagerService.html":{}}}],["e.printstacktrace",{"_index":463,"title":{},"body":{"injectables/FormsService.html":{},"injectables/ScanTrackingService.html":{},"injectables/TaskManagerService.html":{}}}],["e2e",{"_index":1413,"title":{},"body":{"index.html":{}}}],["edit",{"_index":381,"title":{},"body":{"controllers/FormsController.html":{},"controllers/ScanTrackingController.html":{}}}],["editformtemplate",{"_index":365,"title":{},"body":{"controllers/FormsController.html":{},"injectables/FormsService.html":{}}}],["editformtemplate(formtemplateid",{"_index":378,"title":{},"body":{"controllers/FormsController.html":{},"injectables/FormsService.html":{}}}],["efficient",{"_index":1390,"title":{},"body":{"index.html":{}}}],["email",{"_index":291,"title":{},"body":{"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Patient.html":{},"classes/PatientDTO.html":{},"injectables/PatientService.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{},"classes/Users.html":{}}}],["emailaddress",{"_index":279,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/JwtPayloadInterface.html":{}}}],["emergency_contact",{"_index":546,"title":{},"body":{"classes/Patient.html":{}}}],["emergency_contact.entity",{"_index":542,"title":{},"body":{"classes/Patient.html":{}}}],["emergency_contact.patients",{"_index":547,"title":{},"body":{"classes/Patient.html":{}}}],["emergency_contact_id",{"_index":521,"title":{},"body":{"classes/Patient.html":{},"classes/PatientDTO.html":{},"injectables/PatientService.html":{}}}],["emergencycontact",{"_index":289,"title":{"classes/EmergencyContact.html":{}},"body":{"classes/EmergencyContact.html":{},"classes/Patient.html":{},"modules/PatientModule.html":{},"injectables/PatientService.html":{},"coverage.html":{}}}],["emergencycontact.namefirst",{"_index":704,"title":{},"body":{"injectables/PatientService.html":{}}}],["emergencycontact.namelast",{"_index":706,"title":{},"body":{"injectables/PatientService.html":{}}}],["emergencycontact.phonenumber",{"_index":708,"title":{},"body":{"injectables/PatientService.html":{}}}],["emergencycontact.relationship",{"_index":710,"title":{},"body":{"injectables/PatientService.html":{}}}],["emergencycontactrepository",{"_index":652,"title":{},"body":{"injectables/PatientService.html":{}}}],["entities",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["entities/appointment.entity",{"_index":423,"title":{},"body":{"modules/FormsModule.html":{},"injectables/FormsService.html":{},"modules/ScanTrackingModule.html":{},"injectables/ScanTrackingService.html":{}}}],["entities/emergency_contact.entity",{"_index":644,"title":{},"body":{"modules/PatientModule.html":{},"injectables/PatientService.html":{}}}],["entities/family_doctor.entity",{"_index":645,"title":{},"body":{"modules/PatientModule.html":{},"injectables/PatientService.html":{}}}],["entities/form.entity",{"_index":422,"title":{},"body":{"modules/FormsModule.html":{},"injectables/FormsService.html":{}}}],["entities/form_template.entity",{"_index":421,"title":{},"body":{"modules/FormsModule.html":{},"injectables/FormsService.html":{}}}],["entities/patient.entity",{"_index":646,"title":{},"body":{"modules/PatientModule.html":{},"injectables/PatientService.html":{},"modules/TreatmentModule.html":{},"injectables/TreatmentService.html":{}}}],["entities/scan.entity",{"_index":905,"title":{},"body":{"modules/ScanTrackingModule.html":{},"injectables/ScanTrackingService.html":{}}}],["entities/scan_types.entity",{"_index":906,"title":{},"body":{"modules/ScanTrackingModule.html":{},"injectables/ScanTrackingService.html":{}}}],["entities/task.entity",{"_index":1023,"title":{},"body":{"modules/TaskManagerModule.html":{},"injectables/TaskManagerService.html":{}}}],["entities/treatment.entity",{"_index":1120,"title":{},"body":{"modules/TreatmentModule.html":{},"injectables/TreatmentService.html":{}}}],["entities/user_groups.entity",{"_index":225,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["entities/users.entity",{"_index":207,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/FormsModule.html":{},"injectables/FormsService.html":{},"modules/ScanTrackingModule.html":{},"injectables/ScanTrackingService.html":{},"modules/TaskManagerModule.html":{},"injectables/TaskManagerService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":42,"title":{},"body":{"classes/Acknowledgement.html":{},"classes/Appointment.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormTemplate.html":{},"classes/Patient.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"injectables/TreatmentService.html":{},"classes/UserGroups.html":{},"classes/Users.html":{}}}],["entity('acknowledgement",{"_index":48,"title":{},"body":{"classes/Acknowledgement.html":{}}}],["entity('appointment",{"_index":158,"title":{},"body":{"classes/Appointment.html":{}}}],["entity('emergency_contact",{"_index":308,"title":{},"body":{"classes/EmergencyContact.html":{}}}],["entity('family_doctor",{"_index":319,"title":{},"body":{"classes/FamilyDoctor.html":{}}}],["entity('form",{"_index":338,"title":{},"body":{"classes/Form.html":{}}}],["entity('form_template",{"_index":355,"title":{},"body":{"classes/FormTemplate.html":{}}}],["entity('patient",{"_index":545,"title":{},"body":{"classes/Patient.html":{}}}],["entity('report",{"_index":821,"title":{},"body":{"classes/Report.html":{}}}],["entity('report_templates",{"_index":830,"title":{},"body":{"classes/ReportTemplates.html":{}}}],["entity('scan",{"_index":843,"title":{},"body":{"classes/Scan.html":{}}}],["entity('scan_types",{"_index":944,"title":{},"body":{"classes/ScanTypes.html":{}}}],["entity('task",{"_index":964,"title":{},"body":{"classes/Task.html":{}}}],["entity('test_table",{"_index":1071,"title":{},"body":{"classes/TestTable.html":{}}}],["entity('treatment",{"_index":1086,"title":{},"body":{"classes/Treatment.html":{}}}],["entity('user_groups",{"_index":1196,"title":{},"body":{"classes/UserGroups.html":{}}}],["entity('users",{"_index":1281,"title":{},"body":{"classes/Users.html":{}}}],["entity{.ts,.js",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":614,"title":{},"body":{"controllers/PatientController.html":{}}}],["errors",{"_index":801,"title":{},"body":{"injectables/PatientService.html":{},"injectables/UserService.html":{}}}],["errors.length",{"_index":803,"title":{},"body":{"injectables/PatientService.html":{},"injectables/UserService.html":{}}}],["es5",{"_index":598,"title":{},"body":{"controllers/PatientController.html":{}}}],["es6",{"_index":599,"title":{},"body":{"controllers/PatientController.html":{}}}],["except",{"_index":1031,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["existing",{"_index":439,"title":{},"body":{"injectables/FormsService.html":{},"injectables/ScanTrackingService.html":{},"injectables/TaskManagerService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["exists",{"_index":781,"title":{},"body":{"injectables/PatientService.html":{},"injectables/UserService.html":{}}}],["expiresin",{"_index":243,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["export",{"_index":51,"title":{},"body":{"classes/Acknowledgement.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Appointment.html":{},"classes/AuthCredentialsDto.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormDTO.html":{},"classes/FormTemplate.html":{},"classes/FormTemplateDTO.html":{},"controllers/FormsController.html":{},"modules/FormsModule.html":{},"injectables/FormsService.html":{},"interfaces/JwtPayloadInterface.html":{},"classes/JwtStrategy.html":{},"classes/Patient.html":{},"controllers/PatientController.html":{},"classes/PatientDTO.html":{},"modules/PatientModule.html":{},"injectables/PatientService.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"classes/ScanDTO.html":{},"controllers/ScanTrackingController.html":{},"modules/ScanTrackingModule.html":{},"injectables/ScanTrackingService.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TaskDTO.html":{},"controllers/TaskManagerController.html":{},"modules/TaskManagerModule.html":{},"injectables/TaskManagerService.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"controllers/TreatmentController.html":{},"classes/TreatmentDTO.html":{},"modules/TreatmentModule.html":{},"injectables/TreatmentService.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserGroups.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/Users.html":{}}}],["exports",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/FormsModule.html":{},"modules/PatientModule.html":{},"modules/ScanTrackingModule.html":{},"modules/TaskManagerModule.html":{},"modules/TreatmentModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":1353,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":494,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["extractjwt",{"_index":490,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":498,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["eyjhbgcioijiuzuxmiisinr5cci6ikpxvcj9.eyjzdwiioijtyxjsaxzkbtk1qgdtywlslmnvbsj9.am6gp8vm",{"_index":690,"title":{},"body":{"injectables/PatientService.html":{}}}],["false",{"_index":20,"title":{},"body":{"classes/Acknowledgement.html":{},"modules/AppModule.html":{},"classes/Appointment.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormTemplate.html":{},"classes/Patient.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"classes/UserGroups.html":{},"classes/Users.html":{}}}],["false})@joincolumn({name",{"_index":32,"title":{},"body":{"classes/Acknowledgement.html":{},"classes/Appointment.html":{},"classes/Form.html":{},"classes/Report.html":{},"classes/Scan.html":{},"classes/Task.html":{},"classes/Treatment.html":{},"classes/Users.html":{}}}],["family_doctor",{"_index":548,"title":{},"body":{"classes/Patient.html":{}}}],["family_doctor.entity",{"_index":543,"title":{},"body":{"classes/Patient.html":{}}}],["family_doctor.patients",{"_index":549,"title":{},"body":{"classes/Patient.html":{}}}],["family_doctor_id",{"_index":523,"title":{},"body":{"classes/Patient.html":{},"classes/PatientDTO.html":{},"injectables/PatientService.html":{}}}],["familydoctor",{"_index":310,"title":{"classes/FamilyDoctor.html":{}},"body":{"classes/FamilyDoctor.html":{},"classes/Patient.html":{},"modules/PatientModule.html":{},"injectables/PatientService.html":{},"coverage.html":{}}}],["familydoctor.name",{"_index":712,"title":{},"body":{"injectables/PatientService.html":{}}}],["familydoctor.phonenumber",{"_index":714,"title":{},"body":{"injectables/PatientService.html":{}}}],["familydoctorrepository",{"_index":653,"title":{},"body":{"injectables/PatientService.html":{}}}],["fetch",{"_index":441,"title":{},"body":{"injectables/FormsService.html":{},"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{},"controllers/TaskManagerController.html":{}}}],["fetchassignedtasks",{"_index":980,"title":{},"body":{"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{}}}],["fetchassignedtasks(@param('userid",{"_index":1011,"title":{},"body":{"controllers/TaskManagerController.html":{}}}],["fetchassignedtasks(userid",{"_index":988,"title":{},"body":{"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{}}}],["fetchmytasks",{"_index":981,"title":{},"body":{"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{}}}],["fetchmytasks(@param('userid",{"_index":1009,"title":{},"body":{"controllers/TaskManagerController.html":{}}}],["fetchmytasks(userid",{"_index":992,"title":{},"body":{"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{}}}],["fetchscanbyid",{"_index":861,"title":{},"body":{"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{}}}],["fetchscanbyid(@param('scanid",{"_index":892,"title":{},"body":{"controllers/ScanTrackingController.html":{}}}],["fetchscanbyid(scanid",{"_index":869,"title":{},"body":{"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{}}}],["fetchscantypes",{"_index":862,"title":{},"body":{"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{}}}],["fetchuserscans",{"_index":863,"title":{},"body":{"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{}}}],["fetchuserscans(@param('userid",{"_index":890,"title":{},"body":{"controllers/ScanTrackingController.html":{}}}],["fetchuserscans(userid",{"_index":876,"title":{},"body":{"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{}}}],["fields",{"_index":751,"title":{},"body":{"injectables/PatientService.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Acknowledgement.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Appointment.html":{},"classes/AuthCredentialsDto.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormDTO.html":{},"classes/FormTemplate.html":{},"classes/FormTemplateDTO.html":{},"controllers/FormsController.html":{},"modules/FormsModule.html":{},"injectables/FormsService.html":{},"interfaces/JwtPayloadInterface.html":{},"classes/JwtStrategy.html":{},"classes/Patient.html":{},"controllers/PatientController.html":{},"classes/PatientDTO.html":{},"modules/PatientModule.html":{},"injectables/PatientService.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"classes/ScanDTO.html":{},"controllers/ScanTrackingController.html":{},"modules/ScanTrackingModule.html":{},"injectables/ScanTrackingService.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TaskDTO.html":{},"controllers/TaskManagerController.html":{},"modules/TaskManagerModule.html":{},"injectables/TaskManagerService.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"controllers/TreatmentController.html":{},"classes/TreatmentDTO.html":{},"modules/TreatmentModule.html":{},"injectables/TreatmentService.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserGroups.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/Users.html":{},"coverage.html":{}}}],["filled",{"_index":373,"title":{},"body":{"controllers/FormsController.html":{}}}],["find",{"_index":465,"title":{},"body":{"injectables/FormsService.html":{},"injectables/ScanTrackingService.html":{},"injectables/TaskManagerService.html":{}}}],["findall",{"_index":555,"title":{},"body":{"controllers/PatientController.html":{},"controllers/UserController.html":{}}}],["first",{"_index":577,"title":{},"body":{"controllers/PatientController.html":{}}}],["firstname",{"_index":282,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["forces",{"_index":589,"title":{},"body":{"controllers/PatientController.html":{}}}],["form",{"_index":141,"title":{"classes/Form.html":{}},"body":{"classes/Appointment.html":{},"classes/Form.html":{},"classes/FormTemplate.html":{},"controllers/FormsController.html":{},"modules/FormsModule.html":{},"injectables/FormsService.html":{},"coverage.html":{}}}],["form(s",{"_index":387,"title":{},"body":{"controllers/FormsController.html":{},"injectables/FormsService.html":{}}}],["form.appointment",{"_index":162,"title":{},"body":{"classes/Appointment.html":{}}}],["form.dto",{"_index":401,"title":{},"body":{"controllers/FormsController.html":{},"injectables/FormsService.html":{}}}],["form.entity",{"_index":155,"title":{},"body":{"classes/Appointment.html":{},"classes/FormTemplate.html":{}}}],["form.formtemplate",{"_index":356,"title":{},"body":{"classes/FormTemplate.html":{}}}],["form_data",{"_index":329,"title":{},"body":{"classes/Form.html":{},"classes/FormTemplate.html":{}}}],["form_name",{"_index":331,"title":{},"body":{"classes/Form.html":{}}}],["form_template",{"_index":340,"title":{},"body":{"classes/Form.html":{}}}],["form_template.dto",{"_index":400,"title":{},"body":{"controllers/FormsController.html":{},"injectables/FormsService.html":{}}}],["form_template.entity",{"_index":337,"title":{},"body":{"classes/Form.html":{}}}],["form_template.forms",{"_index":341,"title":{},"body":{"classes/Form.html":{}}}],["form_template_id",{"_index":333,"title":{},"body":{"classes/Form.html":{}}}],["formdata",{"_index":322,"title":{},"body":{"classes/Form.html":{},"classes/FormDTO.html":{},"classes/FormTemplate.html":{},"classes/FormTemplateDTO.html":{},"injectables/FormsService.html":{}}}],["formdto",{"_index":342,"title":{"classes/FormDTO.html":{}},"body":{"classes/FormDTO.html":{},"controllers/FormsController.html":{},"injectables/FormsService.html":{},"coverage.html":{}}}],["formname",{"_index":323,"title":{},"body":{"classes/Form.html":{},"classes/FormDTO.html":{},"injectables/FormsService.html":{}}}],["formrepository",{"_index":428,"title":{},"body":{"injectables/FormsService.html":{}}}],["forms",{"_index":135,"title":{},"body":{"classes/Appointment.html":{},"classes/FormTemplate.html":{},"controllers/FormsController.html":{},"injectables/FormsService.html":{}}}],["forms.controller",{"_index":420,"title":{},"body":{"modules/FormsModule.html":{}}}],["forms.service",{"_index":399,"title":{},"body":{"controllers/FormsController.html":{},"modules/FormsModule.html":{}}}],["forms/forms.module",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["formscontroller",{"_index":361,"title":{"controllers/FormsController.html":{}},"body":{"controllers/FormsController.html":{},"modules/FormsModule.html":{},"coverage.html":{}}}],["formservice",{"_index":403,"title":{},"body":{"controllers/FormsController.html":{}}}],["formsmodule",{"_index":86,"title":{"modules/FormsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FormsModule.html":{},"modules.html":{},"overview.html":{}}}],["formsservice",{"_index":398,"title":{"injectables/FormsService.html":{}},"body":{"controllers/FormsController.html":{},"modules/FormsModule.html":{},"injectables/FormsService.html":{},"coverage.html":{},"overview.html":{}}}],["formtemplate",{"_index":324,"title":{"classes/FormTemplate.html":{}},"body":{"classes/Form.html":{},"classes/FormTemplate.html":{},"modules/FormsModule.html":{},"injectables/FormsService.html":{},"coverage.html":{}}}],["formtemplate.formdata",{"_index":468,"title":{},"body":{"injectables/FormsService.html":{}}}],["formtemplate.name",{"_index":467,"title":{},"body":{"injectables/FormsService.html":{}}}],["formtemplatedto",{"_index":357,"title":{"classes/FormTemplateDTO.html":{}},"body":{"classes/FormTemplateDTO.html":{},"controllers/FormsController.html":{},"injectables/FormsService.html":{},"coverage.html":{}}}],["formtemplateid",{"_index":345,"title":{},"body":{"classes/FormDTO.html":{},"controllers/FormsController.html":{},"injectables/FormsService.html":{}}}],["formtemplaterepository",{"_index":432,"title":{},"body":{"injectables/FormsService.html":{}}}],["framework",{"_index":1388,"title":{},"body":{"index.html":{}}}],["fs",{"_index":1364,"title":{},"body":{"dependencies.html":{}}}],["function",{"_index":753,"title":{},"body":{"injectables/PatientService.html":{},"coverage.html":{}}}],["functions",{"_index":600,"title":{"miscellaneous/functions.html":{}},"body":{"controllers/PatientController.html":{},"miscellaneous/functions.html":{}}}],["gender",{"_index":506,"title":{},"body":{"classes/Patient.html":{},"classes/PatientDTO.html":{},"injectables/PatientService.html":{}}}],["generate",{"_index":253,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["get('/assignedtasks/:userid",{"_index":989,"title":{},"body":{"controllers/TaskManagerController.html":{}}}],["get('/delete/:userid",{"_index":1163,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/list",{"_index":560,"title":{},"body":{"controllers/PatientController.html":{}}}],["get('/listupdate",{"_index":566,"title":{},"body":{"controllers/PatientController.html":{}}}],["get('/mytasks/:userid",{"_index":993,"title":{},"body":{"controllers/TaskManagerController.html":{}}}],["get('/test",{"_index":212,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["get('/test')@useguards(undefined",{"_index":191,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["get(':appointmentid",{"_index":385,"title":{},"body":{"controllers/FormsController.html":{}}}],["get(':formtemplateid",{"_index":390,"title":{},"body":{"controllers/FormsController.html":{}}}],["get(':patientid",{"_index":563,"title":{},"body":{"controllers/PatientController.html":{},"controllers/TreatmentController.html":{}}}],["get(':patientid/:phase",{"_index":1102,"title":{},"body":{"controllers/TreatmentController.html":{}}}],["get(':scanid",{"_index":870,"title":{},"body":{"controllers/ScanTrackingController.html":{}}}],["get(':userid",{"_index":877,"title":{},"body":{"controllers/ScanTrackingController.html":{},"controllers/UserController.html":{}}}],["get('https://qa.logbox.co.za/logboxrest_v2/patient/search",{"_index":676,"title":{},"body":{"injectables/PatientService.html":{}}}],["get('totals",{"_index":1095,"title":{},"body":{"controllers/TreatmentController.html":{}}}],["getalltemplates",{"_index":366,"title":{},"body":{"controllers/FormsController.html":{},"injectables/FormsService.html":{}}}],["getappointmentforms",{"_index":367,"title":{},"body":{"controllers/FormsController.html":{},"injectables/FormsService.html":{}}}],["getappointmentforms(@param('appointmentid",{"_index":415,"title":{},"body":{"controllers/FormsController.html":{}}}],["getappointmentforms(appointmentid",{"_index":384,"title":{},"body":{"controllers/FormsController.html":{},"injectables/FormsService.html":{}}}],["getformtemplatebyid",{"_index":368,"title":{},"body":{"controllers/FormsController.html":{},"injectables/FormsService.html":{}}}],["getformtemplatebyid(@param('formtemplateid",{"_index":405,"title":{},"body":{"controllers/FormsController.html":{}}}],["getformtemplatebyid(formtemplateid",{"_index":389,"title":{},"body":{"controllers/FormsController.html":{},"injectables/FormsService.html":{}}}],["gethello",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmany",{"_index":481,"title":{},"body":{"injectables/FormsService.html":{},"injectables/ScanTrackingService.html":{},"injectables/TaskManagerService.html":{}}}],["getone",{"_index":778,"title":{},"body":{"injectables/PatientService.html":{},"injectables/UserService.html":{}}}],["getpatient",{"_index":649,"title":{},"body":{"injectables/PatientService.html":{}}}],["getpatient(patientid",{"_index":658,"title":{},"body":{"injectables/PatientService.html":{}}}],["getpatientlist",{"_index":650,"title":{},"body":{"injectables/PatientService.html":{}}}],["getphasetotals",{"_index":1092,"title":{},"body":{"controllers/TreatmentController.html":{},"injectables/TreatmentService.html":{}}}],["getrawmany",{"_index":1142,"title":{},"body":{"injectables/TreatmentService.html":{}}}],["gets",{"_index":579,"title":{},"body":{"controllers/PatientController.html":{}}}],["getting",{"_index":765,"title":{"index.html":{}},"body":{"injectables/PatientService.html":{}}}],["gettreatment",{"_index":1093,"title":{},"body":{"controllers/TreatmentController.html":{},"injectables/TreatmentService.html":{}}}],["gettreatment(@param('patientid",{"_index":1108,"title":{},"body":{"controllers/TreatmentController.html":{}}}],["gettreatment(patientid",{"_index":1098,"title":{},"body":{"controllers/TreatmentController.html":{},"injectables/TreatmentService.html":{}}}],["getuser",{"_index":205,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/PatientController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getuser(@param('patientid",{"_index":616,"title":{},"body":{"controllers/PatientController.html":{}}}],["getuser(@param('userid",{"_index":1177,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(patientid",{"_index":562,"title":{},"body":{"controllers/PatientController.html":{}}}],["getuser(userid",{"_index":1166,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getuserbyemail",{"_index":1203,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserbyemail(email",{"_index":1213,"title":{},"body":{"injectables/UserService.html":{}}}],["getusergroup",{"_index":1204,"title":{},"body":{"injectables/UserService.html":{}}}],["getusergroup(userid",{"_index":1215,"title":{},"body":{"injectables/UserService.html":{}}}],["getusers",{"_index":1205,"title":{},"body":{"injectables/UserService.html":{}}}],["groupby('phase",{"_index":1140,"title":{},"body":{"injectables/TreatmentService.html":{}}}],["grow",{"_index":1420,"title":{},"body":{"index.html":{}}}],["happens",{"_index":570,"title":{},"body":{"controllers/PatientController.html":{}}}],["hash",{"_index":1291,"title":{},"body":{"classes/Users.html":{}}}],["hashpassword",{"_index":1253,"title":{},"body":{"classes/Users.html":{}}}],["hashpassword(password",{"_index":1268,"title":{},"body":{"classes/Users.html":{}}}],["headers",{"_index":680,"title":{},"body":{"injectables/PatientService.html":{}}}],["heavily",{"_index":1395,"title":{},"body":{"index.html":{}}}],["here",{"_index":1431,"title":{},"body":{"index.html":{}}}],["himself/herself",{"_index":1032,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["host",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"injectables/PatientService.html":{}}}],["http",{"_index":582,"title":{},"body":{"controllers/PatientController.html":{},"injectables/PatientService.html":{}}}],["httpexception",{"_index":665,"title":{},"body":{"injectables/PatientService.html":{},"injectables/UserService.html":{}}}],["httpexception('user",{"_index":779,"title":{},"body":{"injectables/PatientService.html":{},"injectables/UserService.html":{}}}],["httpmodule",{"_index":642,"title":{},"body":{"modules/PatientModule.html":{},"modules/TreatmentModule.html":{}}}],["https://nestjs.com",{"_index":1438,"title":{},"body":{"index.html":{}}}],["httpservice",{"_index":654,"title":{},"body":{"injectables/PatientService.html":{}}}],["httpstatus",{"_index":666,"title":{},"body":{"injectables/PatientService.html":{},"injectables/UserService.html":{}}}],["httpstatus.bad_request",{"_index":782,"title":{},"body":{"injectables/PatientService.html":{},"injectables/UserService.html":{}}}],["id",{"_index":10,"title":{},"body":{"classes/Acknowledgement.html":{},"classes/Appointment.html":{},"injectables/AuthenticationService.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormTemplate.html":{},"injectables/FormsService.html":{},"classes/Patient.html":{},"injectables/PatientService.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"injectables/ScanTrackingService.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"interfaces/User.html":{},"classes/UserGroups.html":{},"injectables/UserService.html":{},"classes/Users.html":{}}}],["id_number",{"_index":527,"title":{},"body":{"classes/Patient.html":{},"classes/PatientDTO.html":{},"injectables/PatientService.html":{}}}],["identifier",{"_index":1294,"title":{},"body":{"coverage.html":{}}}],["idnumber",{"_index":507,"title":{},"body":{"classes/Patient.html":{},"injectables/PatientService.html":{}}}],["iep89pxbngtdyi3oa",{"_index":693,"title":{},"body":{"injectables/PatientService.html":{}}}],["ignore",{"_index":697,"title":{},"body":{"injectables/PatientService.html":{}}}],["import",{"_index":40,"title":{},"body":{"classes/Acknowledgement.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Appointment.html":{},"classes/AuthCredentialsDto.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormDTO.html":{},"classes/FormTemplate.html":{},"classes/FormTemplateDTO.html":{},"controllers/FormsController.html":{},"modules/FormsModule.html":{},"injectables/FormsService.html":{},"classes/JwtStrategy.html":{},"classes/Patient.html":{},"controllers/PatientController.html":{},"classes/PatientDTO.html":{},"modules/PatientModule.html":{},"injectables/PatientService.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"classes/ScanDTO.html":{},"controllers/ScanTrackingController.html":{},"modules/ScanTrackingModule.html":{},"injectables/ScanTrackingService.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TaskDTO.html":{},"controllers/TaskManagerController.html":{},"modules/TaskManagerModule.html":{},"injectables/TaskManagerService.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"controllers/TreatmentController.html":{},"classes/TreatmentDTO.html":{},"modules/TreatmentModule.html":{},"injectables/TreatmentService.html":{},"classes/UpdateUserDTO.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserGroups.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/Users.html":{}}}],["imports",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/FormsModule.html":{},"modules/PatientModule.html":{},"modules/ScanTrackingModule.html":{},"modules/TaskManagerModule.html":{},"modules/TreatmentModule.html":{},"modules/UserModule.html":{}}}],["impossible",{"_index":760,"title":{},"body":{"injectables/PatientService.html":{}}}],["including",{"_index":1034,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/Acknowledgement.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Appointment.html":{},"classes/AuthCredentialsDto.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormDTO.html":{},"classes/FormTemplate.html":{},"classes/FormTemplateDTO.html":{},"controllers/FormsController.html":{},"injectables/FormsService.html":{},"interfaces/JwtPayloadInterface.html":{},"classes/JwtStrategy.html":{},"classes/Patient.html":{},"controllers/PatientController.html":{},"classes/PatientDTO.html":{},"injectables/PatientService.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"classes/ScanDTO.html":{},"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TaskDTO.html":{},"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"controllers/TreatmentController.html":{},"classes/TreatmentDTO.html":{},"injectables/TreatmentService.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserGroups.html":{},"injectables/UserService.html":{},"classes/Users.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Acknowledgement.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Appointment.html":{},"classes/AuthCredentialsDto.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormDTO.html":{},"classes/FormTemplate.html":{},"classes/FormTemplateDTO.html":{},"controllers/FormsController.html":{},"modules/FormsModule.html":{},"injectables/FormsService.html":{},"interfaces/JwtPayloadInterface.html":{},"classes/JwtStrategy.html":{},"classes/Patient.html":{},"controllers/PatientController.html":{},"classes/PatientDTO.html":{},"modules/PatientModule.html":{},"injectables/PatientService.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"classes/ScanDTO.html":{},"controllers/ScanTrackingController.html":{},"modules/ScanTrackingModule.html":{},"injectables/ScanTrackingService.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TaskDTO.html":{},"controllers/TaskManagerController.html":{},"modules/TaskManagerModule.html":{},"injectables/TaskManagerService.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"controllers/TreatmentController.html":{},"classes/TreatmentDTO.html":{},"modules/TreatmentModule.html":{},"injectables/TreatmentService.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserGroups.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/Users.html":{}}}],["initial",{"_index":443,"title":{},"body":{"injectables/FormsService.html":{}}}],["inject",{"_index":261,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/JwtStrategy.html":{}}}],["inject(userservice",{"_index":268,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/JwtStrategy.html":{}}}],["injectable",{"_index":126,"title":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/FormsService.html":{},"injectables/PatientService.html":{},"injectables/ScanTrackingService.html":{},"injectables/TaskManagerService.html":{},"injectables/TreatmentService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/FormsService.html":{},"injectables/PatientService.html":{},"injectables/ScanTrackingService.html":{},"injectables/TaskManagerService.html":{},"injectables/TreatmentService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":127,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/FormsService.html":{},"injectables/PatientService.html":{},"injectables/ScanTrackingService.html":{},"injectables/TaskManagerService.html":{},"injectables/TreatmentService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":448,"title":{},"body":{"injectables/FormsService.html":{},"classes/JwtStrategy.html":{},"injectables/PatientService.html":{},"injectables/ScanTrackingService.html":{},"injectables/TaskManagerService.html":{},"injectables/TreatmentService.html":{},"injectables/UserService.html":{}}}],["injectrepository(appointment",{"_index":451,"title":{},"body":{"injectables/FormsService.html":{},"injectables/ScanTrackingService.html":{}}}],["injectrepository(emergencycontact",{"_index":670,"title":{},"body":{"injectables/PatientService.html":{}}}],["injectrepository(familydoctor",{"_index":671,"title":{},"body":{"injectables/PatientService.html":{}}}],["injectrepository(form",{"_index":450,"title":{},"body":{"injectables/FormsService.html":{}}}],["injectrepository(formtemplate",{"_index":449,"title":{},"body":{"injectables/FormsService.html":{}}}],["injectrepository(patient",{"_index":669,"title":{},"body":{"injectables/PatientService.html":{},"injectables/TreatmentService.html":{}}}],["injectrepository(scan",{"_index":921,"title":{},"body":{"injectables/ScanTrackingService.html":{}}}],["injectrepository(scantypes",{"_index":922,"title":{},"body":{"injectables/ScanTrackingService.html":{}}}],["injectrepository(task",{"_index":1037,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["injectrepository(treatment",{"_index":1130,"title":{},"body":{"injectables/TreatmentService.html":{}}}],["injectrepository(usergroups",{"_index":1220,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository(users",{"_index":452,"title":{},"body":{"injectables/FormsService.html":{},"injectables/ScanTrackingService.html":{},"injectables/TaskManagerService.html":{},"injectables/UserService.html":{}}}],["inside",{"_index":762,"title":{},"body":{"injectables/PatientService.html":{}}}],["inspired",{"_index":1396,"title":{},"body":{"index.html":{}}}],["installation",{"_index":1399,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1401,"title":{},"body":{"index.html":{}}}],["interface",{"_index":482,"title":{"interfaces/JwtPayloadInterface.html":{},"interfaces/User.html":{}},"body":{"interfaces/JwtPayloadInterface.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["interface/jwt",{"_index":264,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/JwtStrategy.html":{}}}],["interfaces",{"_index":483,"title":{},"body":{"interfaces/JwtPayloadInterface.html":{},"interfaces/User.html":{},"overview.html":{}}}],["interview",{"_index":444,"title":{},"body":{"injectables/FormsService.html":{}}}],["isstring",{"_index":171,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["issue",{"_index":574,"title":{},"body":{"controllers/PatientController.html":{}}}],["issues",{"_index":602,"title":{},"body":{"controllers/PatientController.html":{}}}],["it's",{"_index":759,"title":{},"body":{"injectables/PatientService.html":{}}}],["item",{"_index":699,"title":{},"body":{"injectables/PatientService.html":{}}}],["itself",{"_index":764,"title":{},"body":{"injectables/PatientService.html":{}}}],["join",{"_index":1427,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":43,"title":{},"body":{"classes/Acknowledgement.html":{},"classes/Appointment.html":{},"classes/Form.html":{},"classes/Patient.html":{},"classes/Report.html":{},"classes/Scan.html":{},"classes/Task.html":{},"classes/Treatment.html":{},"classes/Users.html":{}}}],["joincolumn({name",{"_index":148,"title":{},"body":{"classes/Appointment.html":{},"classes/Form.html":{},"classes/Patient.html":{}}}],["jwt",{"_index":233,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":229,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtfromrequest",{"_index":497,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["jwtmodule",{"_index":226,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtmodule.register",{"_index":234,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtpayloadinterface",{"_index":263,"title":{"interfaces/JwtPayloadInterface.html":{}},"body":{"injectables/AuthenticationService.html":{},"interfaces/JwtPayloadInterface.html":{},"classes/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":249,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["jwtstrategy",{"_index":219,"title":{"classes/JwtStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"classes/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1435,"title":{},"body":{"index.html":{}}}],["keep",{"_index":682,"title":{},"body":{"injectables/PatientService.html":{}}}],["keyword",{"_index":755,"title":{},"body":{"injectables/PatientService.html":{}}}],["lambda",{"_index":591,"title":{},"body":{"controllers/PatientController.html":{}}}],["lastname",{"_index":284,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["lb_uuid",{"_index":529,"title":{},"body":{"classes/Patient.html":{},"classes/PatientDTO.html":{},"injectables/PatientService.html":{}}}],["lbuuid",{"_index":508,"title":{},"body":{"classes/Patient.html":{}}}],["legend",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/FormsModule.html":{},"modules/PatientModule.html":{},"modules/ScanTrackingModule.html":{},"modules/TaskManagerModule.html":{},"modules/TreatmentModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["license",{"_index":1441,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":1417,"title":{},"body":{"index.html":{}}}],["lifecycle",{"_index":576,"title":{},"body":{"controllers/PatientController.html":{}}}],["list",{"_index":568,"title":{},"body":{"controllers/PatientController.html":{},"injectables/PatientService.html":{}}}],["list.subscribe(async",{"_index":698,"title":{},"body":{"injectables/PatientService.html":{}}}],["logbox",{"_index":569,"title":{},"body":{"controllers/PatientController.html":{},"injectables/PatientService.html":{}}}],["logboxdatabaseupdate",{"_index":586,"title":{},"body":{"controllers/PatientController.html":{},"injectables/PatientService.html":{}}}],["logboxdatabaseupdate(list",{"_index":662,"title":{},"body":{"injectables/PatientService.html":{}}}],["logboxupdate",{"_index":556,"title":{},"body":{"controllers/PatientController.html":{},"injectables/PatientService.html":{}}}],["logger",{"_index":1129,"title":{},"body":{"injectables/TreatmentService.html":{},"injectables/UserService.html":{}}}],["logger.debug('creating",{"_index":1229,"title":{},"body":{"injectables/UserService.html":{}}}],["logger.debug('found",{"_index":1224,"title":{},"body":{"injectables/UserService.html":{}}}],["logger.debug('new",{"_index":1243,"title":{},"body":{"injectables/UserService.html":{}}}],["logger.debug('updating",{"_index":1223,"title":{},"body":{"injectables/UserService.html":{}}}],["logger.debug('user",{"_index":1233,"title":{},"body":{"injectables/UserService.html":{}}}],["logger.debug(newuser",{"_index":1244,"title":{},"body":{"injectables/UserService.html":{}}}],["logger.debug(usercheck",{"_index":1235,"title":{},"body":{"injectables/UserService.html":{}}}],["logger.debug(userdto",{"_index":1230,"title":{},"body":{"injectables/UserService.html":{}}}],["long",{"_index":603,"title":{},"body":{"controllers/PatientController.html":{}}}],["lookup",{"_index":660,"title":{},"body":{"injectables/PatientService.html":{},"injectables/TreatmentService.html":{},"injectables/UserService.html":{}}}],["manager",{"_index":978,"title":{},"body":{"controllers/TaskManagerController.html":{}}}],["manager.controller",{"_index":1022,"title":{},"body":{"modules/TaskManagerModule.html":{}}}],["manager.controller.ts",{"_index":977,"title":{},"body":{"controllers/TaskManagerController.html":{},"coverage.html":{}}}],["manager.controller.ts:23",{"_index":994,"title":{},"body":{"controllers/TaskManagerController.html":{}}}],["manager.controller.ts:32",{"_index":990,"title":{},"body":{"controllers/TaskManagerController.html":{}}}],["manager.controller.ts:42",{"_index":986,"title":{},"body":{"controllers/TaskManagerController.html":{}}}],["manager.controller.ts:52",{"_index":1001,"title":{},"body":{"controllers/TaskManagerController.html":{}}}],["manager.controller.ts:61",{"_index":997,"title":{},"body":{"controllers/TaskManagerController.html":{}}}],["manager.module",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["manager.module.ts",{"_index":1021,"title":{},"body":{"modules/TaskManagerModule.html":{}}}],["manager.service",{"_index":1006,"title":{},"body":{"controllers/TaskManagerController.html":{},"modules/TaskManagerModule.html":{}}}],["manager.service.ts",{"_index":1025,"title":{},"body":{"injectables/TaskManagerService.html":{},"coverage.html":{}}}],["manager.service.ts:123",{"_index":1035,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["manager.service.ts:21",{"_index":1033,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["manager.service.ts:38",{"_index":1030,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["manager.service.ts:58",{"_index":1029,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["manager.service.ts:9",{"_index":1027,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["manager.service.ts:92",{"_index":1036,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["manager/task",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"controllers/TaskManagerController.html":{},"modules/TaskManagerModule.html":{},"injectables/TaskManagerService.html":{},"coverage.html":{}}}],["manager/task.dto.ts",{"_index":969,"title":{},"body":{"classes/TaskDTO.html":{},"coverage.html":{}}}],["manager/task.dto.ts:10",{"_index":971,"title":{},"body":{"classes/TaskDTO.html":{}}}],["manager/task.dto.ts:12",{"_index":972,"title":{},"body":{"classes/TaskDTO.html":{}}}],["manager/task.dto.ts:14",{"_index":973,"title":{},"body":{"classes/TaskDTO.html":{}}}],["manager/task.dto.ts:16",{"_index":975,"title":{},"body":{"classes/TaskDTO.html":{}}}],["manager/task.dto.ts:18",{"_index":970,"title":{},"body":{"classes/TaskDTO.html":{}}}],["manager/task.dto.ts:8",{"_index":974,"title":{},"body":{"classes/TaskDTO.html":{}}}],["manytoone",{"_index":44,"title":{},"body":{"classes/Acknowledgement.html":{},"classes/Appointment.html":{},"classes/Form.html":{},"classes/Patient.html":{},"classes/Report.html":{},"classes/Scan.html":{},"classes/Task.html":{},"classes/Treatment.html":{},"classes/Users.html":{}}}],["manytoone(type",{"_index":52,"title":{},"body":{"classes/Acknowledgement.html":{},"classes/Appointment.html":{},"classes/Form.html":{},"classes/Patient.html":{},"classes/Report.html":{},"classes/Scan.html":{},"classes/Task.html":{},"classes/Treatment.html":{},"classes/Users.html":{}}}],["manytoone(undefined",{"_index":30,"title":{},"body":{"classes/Acknowledgement.html":{},"classes/Appointment.html":{},"classes/Form.html":{},"classes/Patient.html":{},"classes/Report.html":{},"classes/Scan.html":{},"classes/Task.html":{},"classes/Treatment.html":{},"classes/Users.html":{}}}],["map",{"_index":667,"title":{},"body":{"injectables/PatientService.html":{}}}],["matching",{"_index":56,"title":{},"body":{"classes/Acknowledgement.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Appointment.html":{},"classes/AuthCredentialsDto.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormDTO.html":{},"classes/FormTemplate.html":{},"classes/FormTemplateDTO.html":{},"controllers/FormsController.html":{},"modules/FormsModule.html":{},"injectables/FormsService.html":{},"interfaces/JwtPayloadInterface.html":{},"classes/JwtStrategy.html":{},"classes/Patient.html":{},"controllers/PatientController.html":{},"classes/PatientDTO.html":{},"modules/PatientModule.html":{},"injectables/PatientService.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"classes/ScanDTO.html":{},"controllers/ScanTrackingController.html":{},"modules/ScanTrackingModule.html":{},"injectables/ScanTrackingService.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TaskDTO.html":{},"controllers/TaskManagerController.html":{},"modules/TaskManagerModule.html":{},"injectables/TaskManagerService.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"controllers/TreatmentController.html":{},"classes/TreatmentDTO.html":{},"modules/TreatmentModule.html":{},"injectables/TreatmentService.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserGroups.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/Users.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":805,"title":{},"body":{"injectables/PatientService.html":{},"injectables/UserService.html":{}}}],["metadata",{"_index":1373,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":193,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/PatientService.html":{}}}],["methods",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/FormsController.html":{},"injectables/FormsService.html":{},"classes/JwtStrategy.html":{},"controllers/PatientController.html":{},"injectables/PatientService.html":{},"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{},"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{},"controllers/TreatmentController.html":{},"injectables/TreatmentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/Users.html":{}}}],["miscellaneous",{"_index":1383,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1416,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1407,"title":{},"body":{"index.html":{}}}],["module",{"_index":73,"title":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/FormsModule.html":{},"modules/PatientModule.html":{},"modules/ScanTrackingModule.html":{},"modules/TaskManagerModule.html":{},"modules/TreatmentModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/FormsModule.html":{},"controllers/PatientController.html":{},"modules/PatientModule.html":{},"injectables/PatientService.html":{},"modules/ScanTrackingModule.html":{},"modules/TaskManagerModule.html":{},"modules/TreatmentModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":75,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/FormsModule.html":{},"modules/PatientModule.html":{},"modules/ScanTrackingModule.html":{},"modules/TaskManagerModule.html":{},"modules/TreatmentModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1430,"title":{},"body":{"index.html":{}}}],["multer",{"_index":1366,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":1436,"title":{},"body":{"index.html":{}}}],["name",{"_index":21,"title":{},"body":{"classes/Acknowledgement.html":{},"classes/Appointment.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormTemplate.html":{},"classes/FormTemplateDTO.html":{},"controllers/FormsController.html":{},"injectables/FormsService.html":{},"classes/JwtStrategy.html":{},"classes/Patient.html":{},"controllers/PatientController.html":{},"injectables/PatientService.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TaskDTO.html":{},"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"controllers/TreatmentController.html":{},"injectables/TreatmentService.html":{},"controllers/UserController.html":{},"classes/UserGroups.html":{},"injectables/UserService.html":{},"classes/Users.html":{}}}],["name_first",{"_index":300,"title":{},"body":{"classes/EmergencyContact.html":{},"classes/Patient.html":{},"classes/PatientDTO.html":{},"injectables/PatientService.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{},"classes/Users.html":{}}}],["name_last",{"_index":302,"title":{},"body":{"classes/EmergencyContact.html":{},"classes/Patient.html":{},"classes/PatientDTO.html":{},"injectables/PatientService.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{},"classes/Users.html":{}}}],["namefirst",{"_index":292,"title":{},"body":{"classes/EmergencyContact.html":{},"classes/Patient.html":{},"injectables/PatientService.html":{},"classes/Users.html":{}}}],["namelast",{"_index":293,"title":{},"body":{"classes/EmergencyContact.html":{},"classes/Patient.html":{},"injectables/PatientService.html":{},"classes/Users.html":{}}}],["nationality",{"_index":509,"title":{},"body":{"classes/Patient.html":{},"classes/PatientDTO.html":{},"injectables/PatientService.html":{}}}],["nest",{"_index":581,"title":{},"body":{"controllers/PatientController.html":{},"injectables/PatientService.html":{},"index.html":{}}}],["nestframework",{"_index":1440,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":575,"title":{},"body":{"controllers/PatientController.html":{}}}],["nestjs/common",{"_index":66,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/FormsController.html":{},"modules/FormsModule.html":{},"injectables/FormsService.html":{},"classes/JwtStrategy.html":{},"controllers/PatientController.html":{},"modules/PatientModule.html":{},"injectables/PatientService.html":{},"controllers/ScanTrackingController.html":{},"modules/ScanTrackingModule.html":{},"injectables/ScanTrackingService.html":{},"controllers/TaskManagerController.html":{},"modules/TaskManagerModule.html":{},"injectables/TaskManagerService.html":{},"controllers/TreatmentController.html":{},"modules/TreatmentModule.html":{},"injectables/TreatmentService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1349,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":227,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":204,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"classes/JwtStrategy.html":{},"controllers/TaskManagerController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1352,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":175,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/FormDTO.html":{},"classes/FormTemplateDTO.html":{},"classes/PatientDTO.html":{},"classes/ScanDTO.html":{},"classes/TaskDTO.html":{},"classes/TreatmentDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/UserDTO.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/FormsModule.html":{},"injectables/FormsService.html":{},"classes/JwtStrategy.html":{},"modules/PatientModule.html":{},"injectables/PatientService.html":{},"modules/ScanTrackingModule.html":{},"injectables/ScanTrackingService.html":{},"modules/TaskManagerModule.html":{},"injectables/TaskManagerService.html":{},"modules/TreatmentModule.html":{},"injectables/TreatmentService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjsx/crud",{"_index":1356,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":276,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/FormsService.html":{},"classes/JwtStrategy.html":{},"controllers/PatientController.html":{},"injectables/PatientService.html":{},"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{},"injectables/TaskManagerService.html":{},"injectables/TreatmentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newform",{"_index":471,"title":{},"body":{"injectables/FormsService.html":{}}}],["newform.appointment",{"_index":474,"title":{},"body":{"injectables/FormsService.html":{}}}],["newform.formdata",{"_index":473,"title":{},"body":{"injectables/FormsService.html":{}}}],["newform.formname",{"_index":472,"title":{},"body":{"injectables/FormsService.html":{}}}],["newform.formtemplate",{"_index":476,"title":{},"body":{"injectables/FormsService.html":{}}}],["newformtemplate",{"_index":457,"title":{},"body":{"injectables/FormsService.html":{}}}],["newformtemplate.formdata",{"_index":459,"title":{},"body":{"injectables/FormsService.html":{}}}],["newformtemplate.name",{"_index":458,"title":{},"body":{"injectables/FormsService.html":{}}}],["newpatient",{"_index":783,"title":{},"body":{"injectables/PatientService.html":{}}}],["newpatient.addressphysical",{"_index":798,"title":{},"body":{"injectables/PatientService.html":{}}}],["newpatient.addresspostal",{"_index":797,"title":{},"body":{"injectables/PatientService.html":{}}}],["newpatient.dob",{"_index":788,"title":{},"body":{"injectables/PatientService.html":{}}}],["newpatient.email",{"_index":796,"title":{},"body":{"injectables/PatientService.html":{}}}],["newpatient.emergencycontact",{"_index":799,"title":{},"body":{"injectables/PatientService.html":{}}}],["newpatient.familydoctor",{"_index":800,"title":{},"body":{"injectables/PatientService.html":{}}}],["newpatient.gender",{"_index":791,"title":{},"body":{"injectables/PatientService.html":{}}}],["newpatient.idnumber",{"_index":790,"title":{},"body":{"injectables/PatientService.html":{}}}],["newpatient.lbuuid",{"_index":784,"title":{},"body":{"injectables/PatientService.html":{}}}],["newpatient.namefirst",{"_index":786,"title":{},"body":{"injectables/PatientService.html":{}}}],["newpatient.namelast",{"_index":787,"title":{},"body":{"injectables/PatientService.html":{}}}],["newpatient.nationality",{"_index":792,"title":{},"body":{"injectables/PatientService.html":{}}}],["newpatient.phonecell",{"_index":794,"title":{},"body":{"injectables/PatientService.html":{}}}],["newpatient.phonehome",{"_index":793,"title":{},"body":{"injectables/PatientService.html":{}}}],["newpatient.phonework",{"_index":795,"title":{},"body":{"injectables/PatientService.html":{}}}],["newpatient.title",{"_index":785,"title":{},"body":{"injectables/PatientService.html":{}}}],["newscan",{"_index":926,"title":{},"body":{"injectables/ScanTrackingService.html":{}}}],["newscan.appointment",{"_index":929,"title":{},"body":{"injectables/ScanTrackingService.html":{}}}],["newscan.attachment",{"_index":932,"title":{},"body":{"injectables/ScanTrackingService.html":{}}}],["newscan.scantype",{"_index":927,"title":{},"body":{"injectables/ScanTrackingService.html":{}}}],["newscan.user",{"_index":930,"title":{},"body":{"injectables/ScanTrackingService.html":{}}}],["newtask",{"_index":1045,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["newtask.assigneeuser",{"_index":1051,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["newtask.assigneruser",{"_index":1053,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["newtask.datecreation",{"_index":1047,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["newtask.datedue",{"_index":1048,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["newtask.description",{"_index":1049,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["newtask.name",{"_index":1046,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["newtask.priority",{"_index":1050,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["newuser",{"_index":1236,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser.email",{"_index":1237,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser.namefirst",{"_index":1238,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser.namelast",{"_index":1239,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser.passwordhash",{"_index":1240,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser.usergroups",{"_index":1241,"title":{},"body":{"injectables/UserService.html":{}}}],["node.js",{"_index":1387,"title":{},"body":{"index.html":{}}}],["note",{"_index":1002,"title":{},"body":{"controllers/TaskManagerController.html":{}}}],["npm",{"_index":1400,"title":{},"body":{"index.html":{}}}],["null",{"_index":29,"title":{},"body":{"classes/Acknowledgement.html":{},"classes/Appointment.html":{},"injectables/AuthenticationService.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/Patient.html":{},"injectables/PatientService.html":{},"classes/Report.html":{},"classes/Scan.html":{},"classes/Task.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"classes/Users.html":{}}}],["nullable",{"_index":19,"title":{},"body":{"classes/Acknowledgement.html":{},"classes/Appointment.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormTemplate.html":{},"classes/Patient.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"classes/UserGroups.html":{},"classes/Users.html":{}}}],["number",{"_index":24,"title":{},"body":{"classes/Acknowledgement.html":{},"classes/Appointment.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormDTO.html":{},"classes/FormTemplate.html":{},"controllers/FormsController.html":{},"injectables/FormsService.html":{},"classes/Patient.html":{},"controllers/PatientController.html":{},"classes/PatientDTO.html":{},"injectables/PatientService.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"classes/ScanDTO.html":{},"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TaskDTO.html":{},"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"controllers/TreatmentController.html":{},"classes/TreatmentDTO.html":{},"injectables/TreatmentService.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserGroups.html":{},"injectables/UserService.html":{},"classes/Users.html":{}}}],["object",{"_index":327,"title":{},"body":{"classes/Form.html":{},"classes/FormDTO.html":{},"classes/FormTemplate.html":{},"classes/FormTemplateDTO.html":{},"injectables/FormsService.html":{},"controllers/PatientController.html":{},"classes/PatientDTO.html":{},"injectables/PatientService.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/ScanDTO.html":{},"injectables/ScanTrackingService.html":{},"classes/TaskDTO.html":{},"injectables/TaskManagerService.html":{},"classes/TreatmentDTO.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["object.assign(toupdate",{"_index":1227,"title":{},"body":{"injectables/UserService.html":{}}}],["object.keys(data",{"_index":700,"title":{},"body":{"injectables/PatientService.html":{}}}],["observable",{"_index":763,"title":{},"body":{"injectables/PatientService.html":{}}}],["observation",{"_index":757,"title":{},"body":{"injectables/PatientService.html":{}}}],["observer",{"_index":580,"title":{},"body":{"controllers/PatientController.html":{}}}],["oms",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["one",{"_index":769,"title":{},"body":{"injectables/PatientService.html":{}}}],["onetomany",{"_index":153,"title":{},"body":{"classes/Appointment.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/FormTemplate.html":{},"classes/Patient.html":{},"classes/ReportTemplates.html":{},"classes/ScanTypes.html":{},"classes/Treatment.html":{},"classes/UserGroups.html":{},"classes/Users.html":{}}}],["onetomany(type",{"_index":161,"title":{},"body":{"classes/Appointment.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/FormTemplate.html":{},"classes/Patient.html":{},"classes/ReportTemplates.html":{},"classes/ScanTypes.html":{},"classes/Treatment.html":{},"classes/UserGroups.html":{},"classes/Users.html":{}}}],["onetomany(undefined",{"_index":142,"title":{},"body":{"classes/Appointment.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/FormTemplate.html":{},"classes/Patient.html":{},"classes/ReportTemplates.html":{},"classes/ScanTypes.html":{},"classes/Treatment.html":{},"classes/UserGroups.html":{},"classes/Users.html":{}}}],["online",{"_index":131,"title":{},"body":{"injectables/AppService.html":{}}}],["open",{"_index":1418,"title":{},"body":{"index.html":{}}}],["optional",{"_index":188,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/FormsController.html":{},"injectables/FormsService.html":{},"classes/JwtStrategy.html":{},"controllers/PatientController.html":{},"classes/PatientDTO.html":{},"injectables/PatientService.html":{},"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{},"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{},"controllers/TreatmentController.html":{},"injectables/TreatmentService.html":{},"classes/UpdateUserDTO.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{},"classes/Users.html":{}}}],["options",{"_index":875,"title":{},"body":{"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{}}}],["orderby('date_due",{"_index":1040,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["orderby('phase",{"_index":1141,"title":{},"body":{"injectables/TreatmentService.html":{}}}],["out",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"controllers/FormsController.html":{},"modules/FormsModule.html":{},"modules/PatientModule.html":{},"modules/ScanTrackingModule.html":{},"modules/TaskManagerModule.html":{},"modules/TreatmentModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":1445,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1347,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":210,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/FormsController.html":{},"injectables/FormsService.html":{},"controllers/PatientController.html":{},"injectables/PatientService.html":{},"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{},"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{},"controllers/TreatmentController.html":{},"injectables/TreatmentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["param('formtemplateid",{"_index":409,"title":{},"body":{"controllers/FormsController.html":{}}}],["param('patientid",{"_index":1110,"title":{},"body":{"controllers/TreatmentController.html":{}}}],["param('phase",{"_index":1111,"title":{},"body":{"controllers/TreatmentController.html":{}}}],["param('userid",{"_index":1181,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":187,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/FormsController.html":{},"injectables/FormsService.html":{},"classes/JwtStrategy.html":{},"controllers/PatientController.html":{},"injectables/PatientService.html":{},"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{},"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{},"controllers/TreatmentController.html":{},"injectables/TreatmentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/Users.html":{}}}],["params",{"_index":677,"title":{},"body":{"injectables/PatientService.html":{}}}],["parsed",{"_index":257,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["passes",{"_index":585,"title":{},"body":{"controllers/PatientController.html":{}}}],["passport",{"_index":492,"title":{},"body":{"classes/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":228,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportmodule.register",{"_index":231,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportstrategy",{"_index":493,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":495,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["password",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthenticationService.html":{},"classes/Users.html":{}}}],["password_hash",{"_index":1146,"title":{},"body":{"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{},"classes/Users.html":{}}}],["password_salt",{"_index":1262,"title":{},"body":{"classes/Users.html":{}}}],["passwordhash",{"_index":1249,"title":{},"body":{"classes/Users.html":{}}}],["passwordsalt",{"_index":1250,"title":{},"body":{"classes/Users.html":{}}}],["patient",{"_index":11,"title":{"classes/Patient.html":{}},"body":{"classes/Acknowledgement.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Patient.html":{},"controllers/PatientController.html":{},"classes/PatientDTO.html":{},"modules/PatientModule.html":{},"injectables/PatientService.html":{},"classes/Treatment.html":{},"controllers/TreatmentController.html":{},"modules/TreatmentModule.html":{},"injectables/TreatmentService.html":{},"coverage.html":{}}}],["patient.acknowledgements",{"_index":53,"title":{},"body":{"classes/Acknowledgement.html":{}}}],["patient.addressphysical",{"_index":748,"title":{},"body":{"injectables/PatientService.html":{}}}],["patient.addresspostal",{"_index":746,"title":{},"body":{"injectables/PatientService.html":{}}}],["patient.controller",{"_index":643,"title":{},"body":{"modules/PatientModule.html":{}}}],["patient.dob",{"_index":726,"title":{},"body":{"injectables/PatientService.html":{}}}],["patient.email",{"_index":744,"title":{},"body":{"injectables/PatientService.html":{}}}],["patient.emergencycontact",{"_index":309,"title":{},"body":{"classes/EmergencyContact.html":{},"injectables/PatientService.html":{}}}],["patient.entity",{"_index":46,"title":{},"body":{"classes/Acknowledgement.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Treatment.html":{}}}],["patient.familydoctor",{"_index":320,"title":{},"body":{"classes/FamilyDoctor.html":{},"injectables/PatientService.html":{}}}],["patient.gender",{"_index":732,"title":{},"body":{"injectables/PatientService.html":{}}}],["patient.idnumber",{"_index":731,"title":{},"body":{"injectables/PatientService.html":{}}}],["patient.lbuuid",{"_index":716,"title":{},"body":{"injectables/PatientService.html":{}}}],["patient.namefirst",{"_index":720,"title":{},"body":{"injectables/PatientService.html":{}}}],["patient.namelast",{"_index":722,"title":{},"body":{"injectables/PatientService.html":{}}}],["patient.nationality",{"_index":734,"title":{},"body":{"injectables/PatientService.html":{}}}],["patient.phonecell",{"_index":738,"title":{},"body":{"injectables/PatientService.html":{}}}],["patient.phonehome",{"_index":740,"title":{},"body":{"injectables/PatientService.html":{}}}],["patient.phonework",{"_index":742,"title":{},"body":{"injectables/PatientService.html":{}}}],["patient.service",{"_index":606,"title":{},"body":{"controllers/PatientController.html":{},"modules/PatientModule.html":{}}}],["patient.title",{"_index":718,"title":{},"body":{"injectables/PatientService.html":{}}}],["patient.treatments",{"_index":1087,"title":{},"body":{"classes/Treatment.html":{}}}],["patient/patient.module",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["patient_id",{"_index":33,"title":{},"body":{"classes/Acknowledgement.html":{},"classes/Treatment.html":{},"classes/TreatmentDTO.html":{}}}],["patientcontroller",{"_index":552,"title":{"controllers/PatientController.html":{}},"body":{"controllers/PatientController.html":{},"modules/PatientModule.html":{},"coverage.html":{}}}],["patientdto",{"_index":558,"title":{"classes/PatientDTO.html":{}},"body":{"controllers/PatientController.html":{},"classes/PatientDTO.html":{},"injectables/PatientService.html":{},"coverage.html":{}}}],["patientid",{"_index":565,"title":{},"body":{"controllers/PatientController.html":{},"injectables/PatientService.html":{},"controllers/TreatmentController.html":{},"injectables/TreatmentService.html":{}}}],["patientlist",{"_index":612,"title":{},"body":{"controllers/PatientController.html":{}}}],["patientmodule",{"_index":87,"title":{"modules/PatientModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PatientModule.html":{},"modules.html":{},"overview.html":{}}}],["patientrepository",{"_index":656,"title":{},"body":{"injectables/PatientService.html":{},"injectables/TreatmentService.html":{}}}],["patients",{"_index":294,"title":{},"body":{"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"controllers/PatientController.html":{},"injectables/PatientService.html":{}}}],["patientservice",{"_index":605,"title":{"injectables/PatientService.html":{}},"body":{"controllers/PatientController.html":{},"modules/PatientModule.html":{},"injectables/PatientService.html":{},"coverage.html":{},"overview.html":{}}}],["payload",{"_index":278,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/JwtStrategy.html":{}}}],["payload.interface",{"_index":265,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":485,"title":{},"body":{"interfaces/JwtPayloadInterface.html":{},"coverage.html":{}}}],["pg",{"_index":1370,"title":{},"body":{"dependencies.html":{}}}],["phase",{"_index":1074,"title":{},"body":{"classes/Treatment.html":{},"controllers/TreatmentController.html":{},"classes/TreatmentDTO.html":{},"injectables/TreatmentService.html":{}}}],["phone_cell",{"_index":534,"title":{},"body":{"classes/Patient.html":{},"classes/PatientDTO.html":{},"injectables/PatientService.html":{}}}],["phone_home",{"_index":536,"title":{},"body":{"classes/Patient.html":{},"classes/PatientDTO.html":{},"injectables/PatientService.html":{}}}],["phone_number",{"_index":305,"title":{},"body":{"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{}}}],["phone_work",{"_index":538,"title":{},"body":{"classes/Patient.html":{},"classes/PatientDTO.html":{},"injectables/PatientService.html":{}}}],["phonecell",{"_index":510,"title":{},"body":{"classes/Patient.html":{}}}],["phonehome",{"_index":511,"title":{},"body":{"classes/Patient.html":{}}}],["phonenumber",{"_index":295,"title":{},"body":{"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"injectables/PatientService.html":{}}}],["phonework",{"_index":512,"title":{},"body":{"classes/Patient.html":{}}}],["pipe(map(response",{"_index":694,"title":{},"body":{"injectables/PatientService.html":{}}}],["please",{"_index":1428,"title":{},"body":{"index.html":{}}}],["point",{"_index":239,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["port",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":196,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/FormsController.html":{},"controllers/PatientController.html":{},"controllers/ScanTrackingController.html":{},"controllers/TaskManagerController.html":{},"controllers/TreatmentController.html":{},"controllers/UserController.html":{}}}],["post('/signin",{"_index":184,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post(':userid",{"_index":985,"title":{},"body":{"controllers/TaskManagerController.html":{}}}],["postgres",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["practicenumber",{"_index":678,"title":{},"body":{"injectables/PatientService.html":{}}}],["prefix",{"_index":178,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/FormsController.html":{},"controllers/PatientController.html":{},"controllers/ScanTrackingController.html":{},"controllers/TaskManagerController.html":{},"controllers/TreatmentController.html":{},"controllers/UserController.html":{}}}],["primary",{"_index":26,"title":{},"body":{"classes/Acknowledgement.html":{},"classes/Appointment.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormTemplate.html":{},"classes/Patient.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"classes/UserGroups.html":{},"classes/Users.html":{}}}],["priority",{"_index":950,"title":{},"body":{"classes/Task.html":{},"classes/TaskDTO.html":{},"injectables/TaskManagerService.html":{}}}],["private",{"_index":269,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/FormsService.html":{},"classes/JwtStrategy.html":{},"injectables/PatientService.html":{},"injectables/ScanTrackingService.html":{},"injectables/TaskManagerService.html":{},"injectables/TreatmentService.html":{},"injectables/UserService.html":{},"classes/Users.html":{}}}],["problem",{"_index":750,"title":{},"body":{"injectables/PatientService.html":{}}}],["production",{"_index":1409,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":1386,"title":{},"body":{"index.html":{}}}],["project",{"_index":1419,"title":{},"body":{"index.html":{}}}],["promise",{"_index":189,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/FormsService.html":{},"injectables/PatientService.html":{},"injectables/ScanTrackingService.html":{},"injectables/TaskManagerService.html":{},"injectables/TreatmentService.html":{},"injectables/UserService.html":{},"classes/Users.html":{}}}],["properties",{"_index":8,"title":{},"body":{"classes/Acknowledgement.html":{},"classes/Appointment.html":{},"classes/AuthCredentialsDto.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormDTO.html":{},"classes/FormTemplate.html":{},"classes/FormTemplateDTO.html":{},"interfaces/JwtPayloadInterface.html":{},"classes/Patient.html":{},"classes/PatientDTO.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"classes/ScanDTO.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TaskDTO.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"classes/TreatmentDTO.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"classes/UserDTO.html":{},"classes/UserGroups.html":{},"classes/Users.html":{}}}],["providers",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/FormsModule.html":{},"modules/PatientModule.html":{},"modules/ScanTrackingModule.html":{},"modules/TaskManagerModule.html":{},"modules/TreatmentModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":50,"title":{},"body":{"classes/Acknowledgement.html":{},"classes/Appointment.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormTemplate.html":{},"classes/Patient.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"classes/UserGroups.html":{},"classes/Users.html":{}}}],["put",{"_index":397,"title":{},"body":{"controllers/FormsController.html":{},"controllers/ScanTrackingController.html":{},"controllers/TaskManagerController.html":{},"controllers/UserController.html":{}}}],["put(':formtemplateid",{"_index":379,"title":{},"body":{"controllers/FormsController.html":{}}}],["put(':scanid",{"_index":883,"title":{},"body":{"controllers/ScanTrackingController.html":{}}}],["put(':taskid",{"_index":1000,"title":{},"body":{"controllers/TaskManagerController.html":{}}}],["put(':userid",{"_index":1169,"title":{},"body":{"controllers/UserController.html":{}}}],["qa.logbox.co.za",{"_index":684,"title":{},"body":{"injectables/PatientService.html":{}}}],["qaangvi5csq968tv3v1hsemg1gc",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["query",{"_index":761,"title":{},"body":{"injectables/PatientService.html":{}}}],["querystring",{"_index":267,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["read",{"_index":1429,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":70,"title":{},"body":{"controllers/AppController.html":{},"classes/FormDTO.html":{},"classes/FormTemplateDTO.html":{},"classes/PatientDTO.html":{},"injectables/PatientService.html":{},"classes/ScanDTO.html":{},"classes/TaskDTO.html":{},"classes/TreatmentDTO.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"classes/UserDTO.html":{}}}],["reflect",{"_index":1372,"title":{},"body":{"dependencies.html":{}}}],["relations",{"_index":673,"title":{},"body":{"injectables/PatientService.html":{},"injectables/TreatmentService.html":{}}}],["relationship",{"_index":296,"title":{},"body":{"classes/EmergencyContact.html":{}}}],["relationships",{"_index":594,"title":{},"body":{"controllers/PatientController.html":{},"injectables/PatientService.html":{}}}],["remove",{"_index":395,"title":{},"body":{"controllers/FormsController.html":{},"injectables/FormsService.html":{}}}],["removeformtemplate",{"_index":369,"title":{},"body":{"controllers/FormsController.html":{},"injectables/FormsService.html":{}}}],["removeformtemplate(@param('formtemplateid",{"_index":411,"title":{},"body":{"controllers/FormsController.html":{}}}],["removeformtemplate(formtemplateid",{"_index":392,"title":{},"body":{"controllers/FormsController.html":{},"injectables/FormsService.html":{}}}],["removescan",{"_index":864,"title":{},"body":{"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{}}}],["removescan(@param('scanid",{"_index":898,"title":{},"body":{"controllers/ScanTrackingController.html":{}}}],["removescan(scanid",{"_index":879,"title":{},"body":{"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{}}}],["removetask",{"_index":982,"title":{},"body":{"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{}}}],["removetask(@param('taskid",{"_index":1017,"title":{},"body":{"controllers/TaskManagerController.html":{}}}],["removetask(taskid",{"_index":995,"title":{},"body":{"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{}}}],["report",{"_index":145,"title":{"classes/Report.html":{}},"body":{"classes/Appointment.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"coverage.html":{}}}],["report.appointment",{"_index":163,"title":{},"body":{"classes/Appointment.html":{}}}],["report.entity",{"_index":156,"title":{},"body":{"classes/Appointment.html":{},"classes/ReportTemplates.html":{}}}],["report.reporttemplate",{"_index":831,"title":{},"body":{"classes/ReportTemplates.html":{}}}],["report_data",{"_index":815,"title":{},"body":{"classes/Report.html":{},"classes/ReportTemplates.html":{}}}],["report_template_id",{"_index":818,"title":{},"body":{"classes/Report.html":{}}}],["report_templates",{"_index":822,"title":{},"body":{"classes/Report.html":{}}}],["report_templates.entity",{"_index":820,"title":{},"body":{"classes/Report.html":{}}}],["report_templates.reports",{"_index":823,"title":{},"body":{"classes/Report.html":{}}}],["reportdata",{"_index":811,"title":{},"body":{"classes/Report.html":{},"classes/ReportTemplates.html":{}}}],["reports",{"_index":136,"title":{},"body":{"classes/Appointment.html":{},"classes/ReportTemplates.html":{}}}],["reporttemplate",{"_index":812,"title":{},"body":{"classes/Report.html":{}}}],["reporttemplates",{"_index":817,"title":{"classes/ReportTemplates.html":{}},"body":{"classes/Report.html":{},"classes/ReportTemplates.html":{},"coverage.html":{}}}],["repository",{"_index":427,"title":{},"body":{"injectables/FormsService.html":{},"injectables/PatientService.html":{},"injectables/ScanTrackingService.html":{},"injectables/TaskManagerService.html":{},"injectables/TreatmentService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["req",{"_index":197,"title":{},"body":{"controllers/AuthenticationController.html":{},"miscellaneous/variables.html":{}}}],["req.user",{"_index":1454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request",{"_index":1459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('bcrypt",{"_index":1280,"title":{},"body":{"classes/Users.html":{}}}],["requires",{"_index":767,"title":{},"body":{"injectables/PatientService.html":{}}}],["reset",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/FormsModule.html":{},"modules/PatientModule.html":{},"modules/ScanTrackingModule.html":{},"modules/TaskManagerModule.html":{},"modules/TreatmentModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["respectively",{"_index":752,"title":{},"body":{"injectables/PatientService.html":{}}}],["response",{"_index":435,"title":{},"body":{"injectables/FormsService.html":{}}}],["response.data",{"_index":695,"title":{},"body":{"injectables/PatientService.html":{}}}],["result",{"_index":55,"title":{},"body":{"classes/Acknowledgement.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Appointment.html":{},"classes/AuthCredentialsDto.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormDTO.html":{},"classes/FormTemplate.html":{},"classes/FormTemplateDTO.html":{},"controllers/FormsController.html":{},"modules/FormsModule.html":{},"injectables/FormsService.html":{},"interfaces/JwtPayloadInterface.html":{},"classes/JwtStrategy.html":{},"classes/Patient.html":{},"controllers/PatientController.html":{},"classes/PatientDTO.html":{},"modules/PatientModule.html":{},"injectables/PatientService.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"classes/ScanDTO.html":{},"controllers/ScanTrackingController.html":{},"modules/ScanTrackingModule.html":{},"injectables/ScanTrackingService.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TaskDTO.html":{},"controllers/TaskManagerController.html":{},"modules/TaskManagerModule.html":{},"injectables/TaskManagerService.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"controllers/TreatmentController.html":{},"classes/TreatmentDTO.html":{},"modules/TreatmentModule.html":{},"injectables/TreatmentService.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserGroups.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/Users.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["resulting",{"_index":590,"title":{},"body":{"controllers/PatientController.html":{}}}],["results",{"_index":57,"title":{},"body":{"classes/Acknowledgement.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Appointment.html":{},"classes/AuthCredentialsDto.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormDTO.html":{},"classes/FormTemplate.html":{},"classes/FormTemplateDTO.html":{},"controllers/FormsController.html":{},"modules/FormsModule.html":{},"injectables/FormsService.html":{},"interfaces/JwtPayloadInterface.html":{},"classes/JwtStrategy.html":{},"classes/Patient.html":{},"controllers/PatientController.html":{},"classes/PatientDTO.html":{},"modules/PatientModule.html":{},"injectables/PatientService.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"classes/ScanDTO.html":{},"controllers/ScanTrackingController.html":{},"modules/ScanTrackingModule.html":{},"injectables/ScanTrackingService.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TaskDTO.html":{},"controllers/TaskManagerController.html":{},"modules/TaskManagerModule.html":{},"injectables/TaskManagerService.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"controllers/TreatmentController.html":{},"classes/TreatmentDTO.html":{},"modules/TreatmentModule.html":{},"injectables/TreatmentService.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserGroups.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/Users.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":1458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["return",{"_index":71,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/FormsController.html":{},"injectables/FormsService.html":{},"classes/JwtStrategy.html":{},"controllers/PatientController.html":{},"injectables/PatientService.html":{},"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{},"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{},"controllers/TreatmentController.html":{},"injectables/TreatmentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/Users.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":758,"title":{},"body":{"injectables/PatientService.html":{}}}],["returns",{"_index":65,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/FormsController.html":{},"injectables/FormsService.html":{},"classes/JwtStrategy.html":{},"controllers/PatientController.html":{},"injectables/PatientService.html":{},"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{},"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{},"controllers/TreatmentController.html":{},"injectables/TreatmentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/Users.html":{}}}],["rimraf",{"_index":1375,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":286,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["route",{"_index":186,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["run",{"_index":1404,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1377,"title":{},"body":{"dependencies.html":{}}}],["rxjs/operators",{"_index":668,"title":{},"body":{"injectables/PatientService.html":{}}}],["salt",{"_index":1269,"title":{},"body":{"classes/Users.html":{}}}],["save",{"_index":372,"title":{},"body":{"controllers/FormsController.html":{},"injectables/FormsService.html":{},"injectables/ScanTrackingService.html":{},"injectables/TaskManagerService.html":{}}}],["saveduser",{"_index":808,"title":{},"body":{"injectables/PatientService.html":{},"injectables/UserService.html":{}}}],["savepassword",{"_index":1254,"title":{},"body":{"classes/Users.html":{}}}],["scalable",{"_index":1391,"title":{},"body":{"index.html":{}}}],["scan",{"_index":105,"title":{"classes/Scan.html":{}},"body":{"modules/AppModule.html":{},"classes/Appointment.html":{},"classes/Scan.html":{},"classes/ScanDTO.html":{},"controllers/ScanTrackingController.html":{},"modules/ScanTrackingModule.html":{},"injectables/ScanTrackingService.html":{},"classes/ScanTypes.html":{},"classes/Users.html":{},"coverage.html":{}}}],["scan.appointment",{"_index":164,"title":{},"body":{"classes/Appointment.html":{},"injectables/ScanTrackingService.html":{}}}],["scan.attachment",{"_index":936,"title":{},"body":{"injectables/ScanTrackingService.html":{}}}],["scan.dto",{"_index":885,"title":{},"body":{"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{}}}],["scan.entity",{"_index":157,"title":{},"body":{"classes/Appointment.html":{},"classes/ScanTypes.html":{},"classes/Users.html":{}}}],["scan.scantype",{"_index":934,"title":{},"body":{"injectables/ScanTrackingService.html":{},"classes/ScanTypes.html":{}}}],["scan.user",{"_index":935,"title":{},"body":{"injectables/ScanTrackingService.html":{},"classes/Users.html":{}}}],["scan_type_id",{"_index":839,"title":{},"body":{"classes/Scan.html":{}}}],["scan_types",{"_index":844,"title":{},"body":{"classes/Scan.html":{}}}],["scan_types.entity",{"_index":842,"title":{},"body":{"classes/Scan.html":{}}}],["scan_types.scans",{"_index":845,"title":{},"body":{"classes/Scan.html":{}}}],["scandto",{"_index":848,"title":{"classes/ScanDTO.html":{}},"body":{"classes/ScanDTO.html":{},"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{},"coverage.html":{}}}],["scanid",{"_index":873,"title":{},"body":{"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{}}}],["scanrepository",{"_index":912,"title":{},"body":{"injectables/ScanTrackingService.html":{}}}],["scans",{"_index":137,"title":{},"body":{"classes/Appointment.html":{},"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{},"classes/ScanTypes.html":{},"classes/Users.html":{}}}],["scanservice",{"_index":889,"title":{},"body":{"controllers/ScanTrackingController.html":{}}}],["scantrackingcontroller",{"_index":857,"title":{"controllers/ScanTrackingController.html":{}},"body":{"controllers/ScanTrackingController.html":{},"modules/ScanTrackingModule.html":{},"coverage.html":{}}}],["scantrackingmodule",{"_index":88,"title":{"modules/ScanTrackingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ScanTrackingModule.html":{},"modules.html":{},"overview.html":{}}}],["scantrackingservice",{"_index":886,"title":{"injectables/ScanTrackingService.html":{}},"body":{"controllers/ScanTrackingController.html":{},"modules/ScanTrackingModule.html":{},"injectables/ScanTrackingService.html":{},"coverage.html":{},"overview.html":{}}}],["scantype",{"_index":834,"title":{},"body":{"classes/Scan.html":{}}}],["scantypeid",{"_index":851,"title":{},"body":{"classes/ScanDTO.html":{},"injectables/ScanTrackingService.html":{}}}],["scantypes",{"_index":838,"title":{"classes/ScanTypes.html":{}},"body":{"classes/Scan.html":{},"modules/ScanTrackingModule.html":{},"injectables/ScanTrackingService.html":{},"classes/ScanTypes.html":{},"coverage.html":{}}}],["scantypesrepository",{"_index":910,"title":{},"body":{"injectables/ScanTrackingService.html":{}}}],["schema",{"_index":49,"title":{},"body":{"classes/Acknowledgement.html":{},"classes/Appointment.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormTemplate.html":{},"classes/Patient.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"classes/UserGroups.html":{},"classes/Users.html":{}}}],["second",{"_index":584,"title":{},"body":{"controllers/PatientController.html":{}}}],["secret",{"_index":240,"title":{},"body":{"modules/AuthenticationModule.html":{},"classes/JwtStrategy.html":{}}}],["secretorkey",{"_index":499,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["secure",{"_index":238,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["select('phase",{"_index":1138,"title":{},"body":{"injectables/TreatmentService.html":{}}}],["server",{"_index":1392,"title":{},"body":{"index.html":{}}}],["service",{"_index":130,"title":{},"body":{"injectables/AppService.html":{}}}],["settreatmentphase",{"_index":1094,"title":{},"body":{"controllers/TreatmentController.html":{},"injectables/TreatmentService.html":{}}}],["settreatmentphase(patientid",{"_index":1101,"title":{},"body":{"controllers/TreatmentController.html":{},"injectables/TreatmentService.html":{}}}],["shouldn't",{"_index":601,"title":{},"body":{"controllers/PatientController.html":{}}}],["side",{"_index":1393,"title":{},"body":{"index.html":{}}}],["signature",{"_index":12,"title":{},"body":{"classes/Acknowledgement.html":{}}}],["signin",{"_index":181,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["signin(authcredentialsdto",{"_index":183,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["signoptions",{"_index":242,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["something",{"_index":237,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/PatientService.html":{},"injectables/UserService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Acknowledgement.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Appointment.html":{},"classes/AuthCredentialsDto.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormDTO.html":{},"classes/FormTemplate.html":{},"classes/FormTemplateDTO.html":{},"controllers/FormsController.html":{},"modules/FormsModule.html":{},"injectables/FormsService.html":{},"interfaces/JwtPayloadInterface.html":{},"classes/JwtStrategy.html":{},"classes/Patient.html":{},"controllers/PatientController.html":{},"classes/PatientDTO.html":{},"modules/PatientModule.html":{},"injectables/PatientService.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"classes/ScanDTO.html":{},"controllers/ScanTrackingController.html":{},"modules/ScanTrackingModule.html":{},"injectables/ScanTrackingService.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TaskDTO.html":{},"controllers/TaskManagerController.html":{},"modules/TaskManagerModule.html":{},"injectables/TaskManagerService.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"controllers/TreatmentController.html":{},"classes/TreatmentDTO.html":{},"modules/TreatmentModule.html":{},"injectables/TreatmentService.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserGroups.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/Users.html":{},"index.html":{}}}],["south",{"_index":736,"title":{},"body":{"injectables/PatientService.html":{}}}],["specific",{"_index":388,"title":{},"body":{"controllers/FormsController.html":{},"injectables/FormsService.html":{},"controllers/PatientController.html":{},"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{},"controllers/TreatmentController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["sponsors",{"_index":1422,"title":{},"body":{"index.html":{}}}],["src/.../get",{"_index":1450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1384,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":61,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":64,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":128,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":129,"title":{},"body":{"injectables/AppService.html":{}}}],["src/authentication/authentication.controller.ts",{"_index":177,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["src/authentication/authentication.controller.ts:17",{"_index":185,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:29",{"_index":192,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.module.ts",{"_index":221,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/authentication/authentication.service.ts",{"_index":245,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/authentication/authentication.service.ts:10",{"_index":250,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:21",{"_index":255,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:36",{"_index":252,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/dto/auth",{"_index":166,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"coverage.html":{}}}],["src/authentication/get",{"_index":1302,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/authentication/interface/jwt",{"_index":484,"title":{},"body":{"interfaces/JwtPayloadInterface.html":{},"coverage.html":{}}}],["src/authentication/jwt.strategy.ts",{"_index":486,"title":{},"body":{"classes/JwtStrategy.html":{},"coverage.html":{}}}],["src/authentication/jwt.strategy.ts:19",{"_index":489,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["src/authentication/jwt.strategy.ts:8",{"_index":487,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["src/entities/acknowledgement.entity.ts",{"_index":6,"title":{},"body":{"classes/Acknowledgement.html":{},"coverage.html":{}}}],["src/entities/acknowledgement.entity.ts:12",{"_index":28,"title":{},"body":{"classes/Acknowledgement.html":{}}}],["src/entities/acknowledgement.entity.ts:18",{"_index":34,"title":{},"body":{"classes/Acknowledgement.html":{}}}],["src/entities/acknowledgement.entity.ts:24",{"_index":39,"title":{},"body":{"classes/Acknowledgement.html":{}}}],["src/entities/acknowledgement.entity.ts:30",{"_index":23,"title":{},"body":{"classes/Acknowledgement.html":{}}}],["src/entities/acknowledgement.entity.ts:36",{"_index":37,"title":{},"body":{"classes/Acknowledgement.html":{}}}],["src/entities/appointment.entity.ts",{"_index":133,"title":{},"body":{"classes/Appointment.html":{},"coverage.html":{}}}],["src/entities/appointment.entity.ts:15",{"_index":144,"title":{},"body":{"classes/Appointment.html":{}}}],["src/entities/appointment.entity.ts:21",{"_index":140,"title":{},"body":{"classes/Appointment.html":{}}}],["src/entities/appointment.entity.ts:25",{"_index":149,"title":{},"body":{"classes/Appointment.html":{}}}],["src/entities/appointment.entity.ts:29",{"_index":152,"title":{},"body":{"classes/Appointment.html":{}}}],["src/entities/appointment.entity.ts:32",{"_index":143,"title":{},"body":{"classes/Appointment.html":{}}}],["src/entities/appointment.entity.ts:35",{"_index":146,"title":{},"body":{"classes/Appointment.html":{}}}],["src/entities/appointment.entity.ts:38",{"_index":147,"title":{},"body":{"classes/Appointment.html":{}}}],["src/entities/emergency_contact.entity.ts",{"_index":290,"title":{},"body":{"classes/EmergencyContact.html":{},"coverage.html":{}}}],["src/entities/emergency_contact.entity.ts:11",{"_index":299,"title":{},"body":{"classes/EmergencyContact.html":{}}}],["src/entities/emergency_contact.entity.ts:17",{"_index":301,"title":{},"body":{"classes/EmergencyContact.html":{}}}],["src/entities/emergency_contact.entity.ts:23",{"_index":303,"title":{},"body":{"classes/EmergencyContact.html":{}}}],["src/entities/emergency_contact.entity.ts:29",{"_index":306,"title":{},"body":{"classes/EmergencyContact.html":{}}}],["src/entities/emergency_contact.entity.ts:35",{"_index":298,"title":{},"body":{"classes/EmergencyContact.html":{}}}],["src/entities/emergency_contact.entity.ts:41",{"_index":307,"title":{},"body":{"classes/EmergencyContact.html":{}}}],["src/entities/emergency_contact.entity.ts:44",{"_index":304,"title":{},"body":{"classes/EmergencyContact.html":{}}}],["src/entities/family_doctor.entity.ts",{"_index":311,"title":{},"body":{"classes/FamilyDoctor.html":{},"coverage.html":{}}}],["src/entities/family_doctor.entity.ts:11",{"_index":314,"title":{},"body":{"classes/FamilyDoctor.html":{}}}],["src/entities/family_doctor.entity.ts:17",{"_index":318,"title":{},"body":{"classes/FamilyDoctor.html":{}}}],["src/entities/family_doctor.entity.ts:23",{"_index":315,"title":{},"body":{"classes/FamilyDoctor.html":{}}}],["src/entities/family_doctor.entity.ts:29",{"_index":313,"title":{},"body":{"classes/FamilyDoctor.html":{}}}],["src/entities/family_doctor.entity.ts:35",{"_index":317,"title":{},"body":{"classes/FamilyDoctor.html":{}}}],["src/entities/family_doctor.entity.ts:38",{"_index":316,"title":{},"body":{"classes/FamilyDoctor.html":{}}}],["src/entities/form.entity.ts",{"_index":321,"title":{},"body":{"classes/Form.html":{},"coverage.html":{}}}],["src/entities/form.entity.ts:12",{"_index":335,"title":{},"body":{"classes/Form.html":{}}}],["src/entities/form.entity.ts:18",{"_index":332,"title":{},"body":{"classes/Form.html":{}}}],["src/entities/form.entity.ts:24",{"_index":330,"title":{},"body":{"classes/Form.html":{}}}],["src/entities/form.entity.ts:28",{"_index":326,"title":{},"body":{"classes/Form.html":{}}}],["src/entities/form.entity.ts:34",{"_index":334,"title":{},"body":{"classes/Form.html":{}}}],["src/entities/form_template.entity.ts",{"_index":350,"title":{},"body":{"classes/FormTemplate.html":{},"coverage.html":{}}}],["src/entities/form_template.entity.ts:11",{"_index":353,"title":{},"body":{"classes/FormTemplate.html":{}}}],["src/entities/form_template.entity.ts:17",{"_index":354,"title":{},"body":{"classes/FormTemplate.html":{}}}],["src/entities/form_template.entity.ts:23",{"_index":351,"title":{},"body":{"classes/FormTemplate.html":{}}}],["src/entities/form_template.entity.ts:26",{"_index":352,"title":{},"body":{"classes/FormTemplate.html":{}}}],["src/entities/patient.entity.ts",{"_index":501,"title":{},"body":{"classes/Patient.html":{},"coverage.html":{}}}],["src/entities/patient.entity.ts:106",{"_index":522,"title":{},"body":{"classes/Patient.html":{}}}],["src/entities/patient.entity.ts:110",{"_index":524,"title":{},"body":{"classes/Patient.html":{}}}],["src/entities/patient.entity.ts:116",{"_index":514,"title":{},"body":{"classes/Patient.html":{}}}],["src/entities/patient.entity.ts:119",{"_index":541,"title":{},"body":{"classes/Patient.html":{}}}],["src/entities/patient.entity.ts:14",{"_index":526,"title":{},"body":{"classes/Patient.html":{}}}],["src/entities/patient.entity.ts:20",{"_index":530,"title":{},"body":{"classes/Patient.html":{}}}],["src/entities/patient.entity.ts:26",{"_index":540,"title":{},"body":{"classes/Patient.html":{}}}],["src/entities/patient.entity.ts:32",{"_index":531,"title":{},"body":{"classes/Patient.html":{}}}],["src/entities/patient.entity.ts:38",{"_index":532,"title":{},"body":{"classes/Patient.html":{}}}],["src/entities/patient.entity.ts:44",{"_index":519,"title":{},"body":{"classes/Patient.html":{}}}],["src/entities/patient.entity.ts:50",{"_index":528,"title":{},"body":{"classes/Patient.html":{}}}],["src/entities/patient.entity.ts:56",{"_index":525,"title":{},"body":{"classes/Patient.html":{}}}],["src/entities/patient.entity.ts:62",{"_index":533,"title":{},"body":{"classes/Patient.html":{}}}],["src/entities/patient.entity.ts:68",{"_index":537,"title":{},"body":{"classes/Patient.html":{}}}],["src/entities/patient.entity.ts:74",{"_index":535,"title":{},"body":{"classes/Patient.html":{}}}],["src/entities/patient.entity.ts:80",{"_index":539,"title":{},"body":{"classes/Patient.html":{}}}],["src/entities/patient.entity.ts:86",{"_index":520,"title":{},"body":{"classes/Patient.html":{}}}],["src/entities/patient.entity.ts:92",{"_index":518,"title":{},"body":{"classes/Patient.html":{}}}],["src/entities/patient.entity.ts:98",{"_index":516,"title":{},"body":{"classes/Patient.html":{}}}],["src/entities/report.entity.ts",{"_index":810,"title":{},"body":{"classes/Report.html":{},"coverage.html":{}}}],["src/entities/report.entity.ts:12",{"_index":814,"title":{},"body":{"classes/Report.html":{}}}],["src/entities/report.entity.ts:20",{"_index":819,"title":{},"body":{"classes/Report.html":{}}}],["src/entities/report.entity.ts:26",{"_index":813,"title":{},"body":{"classes/Report.html":{}}}],["src/entities/report.entity.ts:32",{"_index":816,"title":{},"body":{"classes/Report.html":{}}}],["src/entities/report_templates.entity.ts",{"_index":825,"title":{},"body":{"classes/ReportTemplates.html":{},"coverage.html":{}}}],["src/entities/report_templates.entity.ts:11",{"_index":826,"title":{},"body":{"classes/ReportTemplates.html":{}}}],["src/entities/report_templates.entity.ts:17",{"_index":827,"title":{},"body":{"classes/ReportTemplates.html":{}}}],["src/entities/report_templates.entity.ts:23",{"_index":828,"title":{},"body":{"classes/ReportTemplates.html":{}}}],["src/entities/report_templates.entity.ts:26",{"_index":829,"title":{},"body":{"classes/ReportTemplates.html":{}}}],["src/entities/scan.entity.ts",{"_index":832,"title":{},"body":{"classes/Scan.html":{},"coverage.html":{}}}],["src/entities/scan.entity.ts:13",{"_index":837,"title":{},"body":{"classes/Scan.html":{}}}],["src/entities/scan.entity.ts:19",{"_index":840,"title":{},"body":{"classes/Scan.html":{}}}],["src/entities/scan.entity.ts:25",{"_index":835,"title":{},"body":{"classes/Scan.html":{}}}],["src/entities/scan.entity.ts:29",{"_index":841,"title":{},"body":{"classes/Scan.html":{}}}],["src/entities/scan.entity.ts:35",{"_index":836,"title":{},"body":{"classes/Scan.html":{}}}],["src/entities/scan_types.entity.ts",{"_index":940,"title":{},"body":{"classes/ScanTypes.html":{},"coverage.html":{}}}],["src/entities/scan_types.entity.ts:11",{"_index":941,"title":{},"body":{"classes/ScanTypes.html":{}}}],["src/entities/scan_types.entity.ts:17",{"_index":942,"title":{},"body":{"classes/ScanTypes.html":{}}}],["src/entities/scan_types.entity.ts:20",{"_index":943,"title":{},"body":{"classes/ScanTypes.html":{}}}],["src/entities/task.entity.ts",{"_index":945,"title":{},"body":{"classes/Task.html":{},"coverage.html":{}}}],["src/entities/task.entity.ts:11",{"_index":960,"title":{},"body":{"classes/Task.html":{}}}],["src/entities/task.entity.ts:17",{"_index":961,"title":{},"body":{"classes/Task.html":{}}}],["src/entities/task.entity.ts:23",{"_index":956,"title":{},"body":{"classes/Task.html":{}}}],["src/entities/task.entity.ts:29",{"_index":958,"title":{},"body":{"classes/Task.html":{}}}],["src/entities/task.entity.ts:35",{"_index":959,"title":{},"body":{"classes/Task.html":{}}}],["src/entities/task.entity.ts:41",{"_index":963,"title":{},"body":{"classes/Task.html":{}}}],["src/entities/task.entity.ts:45",{"_index":952,"title":{},"body":{"classes/Task.html":{}}}],["src/entities/task.entity.ts:49",{"_index":954,"title":{},"body":{"classes/Task.html":{}}}],["src/entities/test_table.entity.ts",{"_index":1066,"title":{},"body":{"classes/TestTable.html":{},"coverage.html":{}}}],["src/entities/test_table.entity.ts:10",{"_index":1068,"title":{},"body":{"classes/TestTable.html":{}}}],["src/entities/test_table.entity.ts:16",{"_index":1070,"title":{},"body":{"classes/TestTable.html":{}}}],["src/entities/treatment.entity.ts",{"_index":1072,"title":{},"body":{"classes/Treatment.html":{},"coverage.html":{}}}],["src/entities/treatment.entity.ts:13",{"_index":1079,"title":{},"body":{"classes/Treatment.html":{}}}],["src/entities/treatment.entity.ts:19",{"_index":1080,"title":{},"body":{"classes/Treatment.html":{}}}],["src/entities/treatment.entity.ts:26",{"_index":1081,"title":{},"body":{"classes/Treatment.html":{}}}],["src/entities/treatment.entity.ts:32",{"_index":1085,"title":{},"body":{"classes/Treatment.html":{}}}],["src/entities/treatment.entity.ts:38",{"_index":1083,"title":{},"body":{"classes/Treatment.html":{}}}],["src/entities/treatment.entity.ts:44",{"_index":1077,"title":{},"body":{"classes/Treatment.html":{}}}],["src/entities/treatment.entity.ts:47",{"_index":1078,"title":{},"body":{"classes/Treatment.html":{}}}],["src/entities/user_groups.entity.ts",{"_index":1191,"title":{},"body":{"classes/UserGroups.html":{},"coverage.html":{}}}],["src/entities/user_groups.entity.ts:11",{"_index":1193,"title":{},"body":{"classes/UserGroups.html":{}}}],["src/entities/user_groups.entity.ts:17",{"_index":1194,"title":{},"body":{"classes/UserGroups.html":{}}}],["src/entities/user_groups.entity.ts:20",{"_index":1195,"title":{},"body":{"classes/UserGroups.html":{}}}],["src/entities/users.entity.ts",{"_index":1248,"title":{},"body":{"classes/Users.html":{},"coverage.html":{}}}],["src/entities/users.entity.ts:24",{"_index":1258,"title":{},"body":{"classes/Users.html":{}}}],["src/entities/users.entity.ts:30",{"_index":1259,"title":{},"body":{"classes/Users.html":{}}}],["src/entities/users.entity.ts:36",{"_index":1260,"title":{},"body":{"classes/Users.html":{}}}],["src/entities/users.entity.ts:42",{"_index":1257,"title":{},"body":{"classes/Users.html":{}}}],["src/entities/users.entity.ts:48",{"_index":1261,"title":{},"body":{"classes/Users.html":{}}}],["src/entities/users.entity.ts:52",{"_index":1272,"title":{},"body":{"classes/Users.html":{}}}],["src/entities/users.entity.ts:61",{"_index":1270,"title":{},"body":{"classes/Users.html":{}}}],["src/entities/users.entity.ts:69",{"_index":1263,"title":{},"body":{"classes/Users.html":{}}}],["src/entities/users.entity.ts:75",{"_index":1267,"title":{},"body":{"classes/Users.html":{}}}],["src/entities/users.entity.ts:78",{"_index":1256,"title":{},"body":{"classes/Users.html":{}}}],["src/entities/users.entity.ts:81",{"_index":1264,"title":{},"body":{"classes/Users.html":{}}}],["src/entities/users.entity.ts:84",{"_index":1265,"title":{},"body":{"classes/Users.html":{}}}],["src/entities/users.entity.ts:87",{"_index":1266,"title":{},"body":{"classes/Users.html":{}}}],["src/entities/users.entity.ts:89",{"_index":1274,"title":{},"body":{"classes/Users.html":{}}}],["src/forms/form.dto.ts",{"_index":343,"title":{},"body":{"classes/FormDTO.html":{},"coverage.html":{}}}],["src/forms/form.dto.ts:11",{"_index":349,"title":{},"body":{"classes/FormDTO.html":{}}}],["src/forms/form.dto.ts:5",{"_index":348,"title":{},"body":{"classes/FormDTO.html":{}}}],["src/forms/form.dto.ts:7",{"_index":347,"title":{},"body":{"classes/FormDTO.html":{}}}],["src/forms/form.dto.ts:9",{"_index":346,"title":{},"body":{"classes/FormDTO.html":{}}}],["src/forms/form_template.dto.ts",{"_index":358,"title":{},"body":{"classes/FormTemplateDTO.html":{},"coverage.html":{}}}],["src/forms/form_template.dto.ts:5",{"_index":360,"title":{},"body":{"classes/FormTemplateDTO.html":{}}}],["src/forms/form_template.dto.ts:7",{"_index":359,"title":{},"body":{"classes/FormTemplateDTO.html":{}}}],["src/forms/forms.controller.ts",{"_index":362,"title":{},"body":{"controllers/FormsController.html":{},"coverage.html":{}}}],["src/forms/forms.controller.ts:22",{"_index":382,"title":{},"body":{"controllers/FormsController.html":{}}}],["src/forms/forms.controller.ts:31",{"_index":391,"title":{},"body":{"controllers/FormsController.html":{}}}],["src/forms/forms.controller.ts:40",{"_index":375,"title":{},"body":{"controllers/FormsController.html":{}}}],["src/forms/forms.controller.ts:50",{"_index":380,"title":{},"body":{"controllers/FormsController.html":{}}}],["src/forms/forms.controller.ts:62",{"_index":394,"title":{},"body":{"controllers/FormsController.html":{}}}],["src/forms/forms.controller.ts:71",{"_index":371,"title":{},"body":{"controllers/FormsController.html":{}}}],["src/forms/forms.controller.ts:80",{"_index":386,"title":{},"body":{"controllers/FormsController.html":{}}}],["src/forms/forms.module.ts",{"_index":419,"title":{},"body":{"modules/FormsModule.html":{}}}],["src/forms/forms.service.ts",{"_index":425,"title":{},"body":{"injectables/FormsService.html":{},"coverage.html":{}}}],["src/forms/forms.service.ts:101",{"_index":433,"title":{},"body":{"injectables/FormsService.html":{}}}],["src/forms/forms.service.ts:12",{"_index":431,"title":{},"body":{"injectables/FormsService.html":{}}}],["src/forms/forms.service.ts:126",{"_index":442,"title":{},"body":{"injectables/FormsService.html":{}}}],["src/forms/forms.service.ts:27",{"_index":440,"title":{},"body":{"injectables/FormsService.html":{}}}],["src/forms/forms.service.ts:35",{"_index":445,"title":{},"body":{"injectables/FormsService.html":{}}}],["src/forms/forms.service.ts:43",{"_index":436,"title":{},"body":{"injectables/FormsService.html":{}}}],["src/forms/forms.service.ts:63",{"_index":437,"title":{},"body":{"injectables/FormsService.html":{}}}],["src/forms/forms.service.ts:88",{"_index":447,"title":{},"body":{"injectables/FormsService.html":{}}}],["src/main.ts",{"_index":1319,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/patient/dto/patient.dto.ts",{"_index":620,"title":{},"body":{"classes/PatientDTO.html":{},"coverage.html":{}}}],["src/patient/dto/patient.dto.ts:10",{"_index":638,"title":{},"body":{"classes/PatientDTO.html":{}}}],["src/patient/dto/patient.dto.ts:12",{"_index":632,"title":{},"body":{"classes/PatientDTO.html":{}}}],["src/patient/dto/patient.dto.ts:14",{"_index":633,"title":{},"body":{"classes/PatientDTO.html":{}}}],["src/patient/dto/patient.dto.ts:16",{"_index":625,"title":{},"body":{"classes/PatientDTO.html":{}}}],["src/patient/dto/patient.dto.ts:18",{"_index":630,"title":{},"body":{"classes/PatientDTO.html":{}}}],["src/patient/dto/patient.dto.ts:20",{"_index":629,"title":{},"body":{"classes/PatientDTO.html":{}}}],["src/patient/dto/patient.dto.ts:22",{"_index":634,"title":{},"body":{"classes/PatientDTO.html":{}}}],["src/patient/dto/patient.dto.ts:24",{"_index":636,"title":{},"body":{"classes/PatientDTO.html":{}}}],["src/patient/dto/patient.dto.ts:26",{"_index":635,"title":{},"body":{"classes/PatientDTO.html":{}}}],["src/patient/dto/patient.dto.ts:28",{"_index":637,"title":{},"body":{"classes/PatientDTO.html":{}}}],["src/patient/dto/patient.dto.ts:30",{"_index":626,"title":{},"body":{"classes/PatientDTO.html":{}}}],["src/patient/dto/patient.dto.ts:32",{"_index":624,"title":{},"body":{"classes/PatientDTO.html":{}}}],["src/patient/dto/patient.dto.ts:34",{"_index":623,"title":{},"body":{"classes/PatientDTO.html":{}}}],["src/patient/dto/patient.dto.ts:36",{"_index":627,"title":{},"body":{"classes/PatientDTO.html":{}}}],["src/patient/dto/patient.dto.ts:38",{"_index":628,"title":{},"body":{"classes/PatientDTO.html":{}}}],["src/patient/dto/patient.dto.ts:8",{"_index":631,"title":{},"body":{"classes/PatientDTO.html":{}}}],["src/patient/dto/treatment.dto.ts",{"_index":1113,"title":{},"body":{"classes/TreatmentDTO.html":{},"coverage.html":{}}}],["src/patient/dto/treatment.dto.ts:10",{"_index":1115,"title":{},"body":{"classes/TreatmentDTO.html":{}}}],["src/patient/dto/treatment.dto.ts:8",{"_index":1114,"title":{},"body":{"classes/TreatmentDTO.html":{}}}],["src/patient/patient.controller.ts",{"_index":553,"title":{},"body":{"controllers/PatientController.html":{},"coverage.html":{}}}],["src/patient/patient.controller.ts:14",{"_index":561,"title":{},"body":{"controllers/PatientController.html":{}}}],["src/patient/patient.controller.ts:25",{"_index":567,"title":{},"body":{"controllers/PatientController.html":{}}}],["src/patient/patient.controller.ts:37",{"_index":564,"title":{},"body":{"controllers/PatientController.html":{}}}],["src/patient/patient.controller.ts:46",{"_index":559,"title":{},"body":{"controllers/PatientController.html":{}}}],["src/patient/patient.module.ts",{"_index":641,"title":{},"body":{"modules/PatientModule.html":{}}}],["src/patient/patient.service.ts",{"_index":648,"title":{},"body":{"injectables/PatientService.html":{},"coverage.html":{}}}],["src/patient/patient.service.ts:152",{"_index":657,"title":{},"body":{"injectables/PatientService.html":{}}}],["src/patient/patient.service.ts:17",{"_index":655,"title":{},"body":{"injectables/PatientService.html":{}}}],["src/patient/patient.service.ts:31",{"_index":661,"title":{},"body":{"injectables/PatientService.html":{}}}],["src/patient/patient.service.ts:41",{"_index":659,"title":{},"body":{"injectables/PatientService.html":{}}}],["src/patient/patient.service.ts:50",{"_index":664,"title":{},"body":{"injectables/PatientService.html":{}}}],["src/patient/patient.service.ts:68",{"_index":663,"title":{},"body":{"injectables/PatientService.html":{}}}],["src/scan",{"_index":849,"title":{},"body":{"classes/ScanDTO.html":{},"controllers/ScanTrackingController.html":{},"modules/ScanTrackingModule.html":{},"injectables/ScanTrackingService.html":{},"coverage.html":{}}}],["src/task",{"_index":968,"title":{},"body":{"classes/TaskDTO.html":{},"controllers/TaskManagerController.html":{},"modules/TaskManagerModule.html":{},"injectables/TaskManagerService.html":{},"coverage.html":{}}}],["src/treatment/treatment.controller.ts",{"_index":1091,"title":{},"body":{"controllers/TreatmentController.html":{},"coverage.html":{}}}],["src/treatment/treatment.controller.ts:12",{"_index":1096,"title":{},"body":{"controllers/TreatmentController.html":{}}}],["src/treatment/treatment.controller.ts:21",{"_index":1099,"title":{},"body":{"controllers/TreatmentController.html":{}}}],["src/treatment/treatment.controller.ts:31",{"_index":1103,"title":{},"body":{"controllers/TreatmentController.html":{}}}],["src/treatment/treatment.module.ts",{"_index":1118,"title":{},"body":{"modules/TreatmentModule.html":{}}}],["src/treatment/treatment.service.ts",{"_index":1122,"title":{},"body":{"injectables/TreatmentService.html":{},"coverage.html":{}}}],["src/treatment/treatment.service.ts:20",{"_index":1127,"title":{},"body":{"injectables/TreatmentService.html":{}}}],["src/treatment/treatment.service.ts:33",{"_index":1128,"title":{},"body":{"injectables/TreatmentService.html":{}}}],["src/treatment/treatment.service.ts:56",{"_index":1126,"title":{},"body":{"injectables/TreatmentService.html":{}}}],["src/treatment/treatment.service.ts:8",{"_index":1124,"title":{},"body":{"injectables/TreatmentService.html":{}}}],["src/user/dto/update",{"_index":1144,"title":{},"body":{"classes/UpdateUserDTO.html":{},"coverage.html":{}}}],["src/user/dto/user.dto.ts",{"_index":1185,"title":{},"body":{"classes/UserDTO.html":{},"coverage.html":{}}}],["src/user/dto/user.dto.ts:11",{"_index":1189,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/user/dto/user.dto.ts:13",{"_index":1190,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/user/dto/user.dto.ts:5",{"_index":1187,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/user/dto/user.dto.ts:7",{"_index":1188,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/user/dto/user.dto.ts:9",{"_index":1186,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/user/interface/user.interface.ts",{"_index":1153,"title":{},"body":{"interfaces/User.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":1155,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:14",{"_index":1165,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:23",{"_index":1167,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:32",{"_index":1161,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:42",{"_index":1170,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:54",{"_index":1164,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":1200,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":1202,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:11",{"_index":1208,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:117",{"_index":1210,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:22",{"_index":1217,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:30",{"_index":1212,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:38",{"_index":1214,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:46",{"_index":1216,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:55",{"_index":1218,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:68",{"_index":1209,"title":{},"body":{"injectables/UserService.html":{}}}],["stage",{"_index":578,"title":{},"body":{"controllers/PatientController.html":{}}}],["stages",{"_index":572,"title":{},"body":{"controllers/PatientController.html":{}}}],["start",{"_index":1405,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1408,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1410,"title":{},"body":{"index.html":{}}}],["started",{"_index":1385,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1398,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1295,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1252,"title":{},"body":{"classes/Users.html":{}}}],["stay",{"_index":1432,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":491,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["string",{"_index":16,"title":{},"body":{"classes/Acknowledgement.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Appointment.html":{},"classes/AuthCredentialsDto.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormDTO.html":{},"classes/FormTemplate.html":{},"classes/FormTemplateDTO.html":{},"interfaces/JwtPayloadInterface.html":{},"classes/Patient.html":{},"classes/PatientDTO.html":{},"classes/ReportTemplates.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TaskDTO.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"classes/UserDTO.html":{},"classes/UserGroups.html":{},"injectables/UserService.html":{},"classes/Users.html":{}}}],["stringify",{"_index":266,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["super",{"_index":496,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["support",{"_index":1423,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1443,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1379,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":1346,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1345,"title":{},"body":{"coverage.html":{}}}],["task",{"_index":100,"title":{"classes/Task.html":{}},"body":{"modules/AppModule.html":{},"classes/Task.html":{},"classes/TaskDTO.html":{},"controllers/TaskManagerController.html":{},"modules/TaskManagerModule.html":{},"injectables/TaskManagerService.html":{},"classes/Users.html":{},"coverage.html":{}}}],["task.assigneeuser",{"_index":1061,"title":{},"body":{"injectables/TaskManagerService.html":{},"classes/Users.html":{}}}],["task.assigneruser",{"_index":1290,"title":{},"body":{"classes/Users.html":{}}}],["task.datecreation",{"_index":1057,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["task.datedue",{"_index":1058,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["task.description",{"_index":1059,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["task.dto",{"_index":1004,"title":{},"body":{"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{}}}],["task.entity",{"_index":1278,"title":{},"body":{"classes/Users.html":{}}}],["task.name",{"_index":1056,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["task.priority",{"_index":1060,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["taskdto",{"_index":967,"title":{"classes/TaskDTO.html":{}},"body":{"classes/TaskDTO.html":{},"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{},"coverage.html":{}}}],["taskid",{"_index":998,"title":{},"body":{"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{}}}],["taskmanagercontroller",{"_index":976,"title":{"controllers/TaskManagerController.html":{}},"body":{"controllers/TaskManagerController.html":{},"modules/TaskManagerModule.html":{},"coverage.html":{}}}],["taskmanagermodule",{"_index":89,"title":{"modules/TaskManagerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskManagerModule.html":{},"modules.html":{},"overview.html":{}}}],["taskmanagerservice",{"_index":1005,"title":{"injectables/TaskManagerService.html":{}},"body":{"controllers/TaskManagerController.html":{},"modules/TaskManagerModule.html":{},"injectables/TaskManagerService.html":{},"coverage.html":{},"overview.html":{}}}],["taskrepository",{"_index":1028,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["tasks",{"_index":991,"title":{},"body":{"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{},"classes/Users.html":{}}}],["tasks2",{"_index":1251,"title":{},"body":{"classes/Users.html":{}}}],["taskservice",{"_index":1008,"title":{},"body":{"controllers/TaskManagerController.html":{}}}],["template",{"_index":377,"title":{},"body":{"controllers/FormsController.html":{},"injectables/FormsService.html":{}}}],["templates",{"_index":383,"title":{},"body":{"controllers/FormsController.html":{},"injectables/FormsService.html":{}}}],["term",{"_index":604,"title":{},"body":{"controllers/PatientController.html":{}}}],["test",{"_index":182,"title":{},"body":{"controllers/AuthenticationController.html":{},"index.html":{}}}],["test(@getuser",{"_index":214,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["test(user",{"_index":190,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["test:covsupport",{"_index":1415,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1414,"title":{},"body":{"index.html":{}}}],["test_text",{"_index":1069,"title":{},"body":{"classes/TestTable.html":{}}}],["tests",{"_index":1412,"title":{},"body":{"index.html":{}}}],["testtable",{"_index":1065,"title":{"classes/TestTable.html":{}},"body":{"classes/TestTable.html":{},"coverage.html":{}}}],["testtext",{"_index":1067,"title":{},"body":{"classes/TestTable.html":{}}}],["thanks",{"_index":1421,"title":{},"body":{"index.html":{}}}],["this.appointmentrepository.findone",{"_index":475,"title":{},"body":{"injectables/FormsService.html":{},"injectables/ScanTrackingService.html":{}}}],["this.appservice.gethello",{"_index":72,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.signin(authcredentialsdto",{"_index":211,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.emergencycontactrepository.findone",{"_index":772,"title":{},"body":{"injectables/PatientService.html":{}}}],["this.emergencycontactrepository.save(emergencycontact",{"_index":773,"title":{},"body":{"injectables/PatientService.html":{}}}],["this.familydoctorrepository.findone",{"_index":770,"title":{},"body":{"injectables/PatientService.html":{}}}],["this.familydoctorrepository.save(familydoctor",{"_index":771,"title":{},"body":{"injectables/PatientService.html":{}}}],["this.formrepository",{"_index":478,"title":{},"body":{"injectables/FormsService.html":{}}}],["this.formrepository.save(newform",{"_index":477,"title":{},"body":{"injectables/FormsService.html":{}}}],["this.formservice.captureformresponse(formdto",{"_index":414,"title":{},"body":{"controllers/FormsController.html":{}}}],["this.formservice.createformtemplate(formtemplatedto",{"_index":408,"title":{},"body":{"controllers/FormsController.html":{}}}],["this.formservice.editformtemplate(formtemplateid",{"_index":410,"title":{},"body":{"controllers/FormsController.html":{}}}],["this.formservice.getalltemplates",{"_index":404,"title":{},"body":{"controllers/FormsController.html":{}}}],["this.formservice.getappointmentforms(appointmentid",{"_index":416,"title":{},"body":{"controllers/FormsController.html":{}}}],["this.formservice.getformtemplatebyid(formtemplateid",{"_index":406,"title":{},"body":{"controllers/FormsController.html":{}}}],["this.formservice.removeformtemplate(formtemplateid",{"_index":412,"title":{},"body":{"controllers/FormsController.html":{}}}],["this.formtemplaterepository.delete(formtemplateid",{"_index":470,"title":{},"body":{"injectables/FormsService.html":{}}}],["this.formtemplaterepository.find",{"_index":453,"title":{},"body":{"injectables/FormsService.html":{}}}],["this.formtemplaterepository.findone",{"_index":466,"title":{},"body":{"injectables/FormsService.html":{}}}],["this.formtemplaterepository.findone(formtemplateid",{"_index":454,"title":{},"body":{"injectables/FormsService.html":{}}}],["this.formtemplaterepository.save(formtemplate",{"_index":469,"title":{},"body":{"injectables/FormsService.html":{}}}],["this.formtemplaterepository.save(newformtemplate",{"_index":460,"title":{},"body":{"injectables/FormsService.html":{}}}],["this.httpservice",{"_index":675,"title":{},"body":{"injectables/PatientService.html":{}}}],["this.jwtservice.sign(payload",{"_index":281,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.passwordhash",{"_index":1282,"title":{},"body":{"classes/Users.html":{}}}],["this.passwordsalt",{"_index":1285,"title":{},"body":{"classes/Users.html":{}}}],["this.patientrepository.createquerybuilder",{"_index":776,"title":{},"body":{"injectables/PatientService.html":{}}}],["this.patientrepository.find",{"_index":672,"title":{},"body":{"injectables/PatientService.html":{}}}],["this.patientrepository.findone",{"_index":702,"title":{},"body":{"injectables/PatientService.html":{}}}],["this.patientrepository.findone(patientid",{"_index":674,"title":{},"body":{"injectables/PatientService.html":{},"injectables/TreatmentService.html":{}}}],["this.patientrepository.save(newpatient",{"_index":809,"title":{},"body":{"injectables/PatientService.html":{}}}],["this.patientrepository.save(patient",{"_index":774,"title":{},"body":{"injectables/PatientService.html":{}}}],["this.patientservice.createpatient(patientdto",{"_index":619,"title":{},"body":{"controllers/PatientController.html":{}}}],["this.patientservice.getpatient(patientid",{"_index":617,"title":{},"body":{"controllers/PatientController.html":{}}}],["this.patientservice.getpatientlist",{"_index":611,"title":{},"body":{"controllers/PatientController.html":{}}}],["this.patientservice.logboxdatabaseupdate(patientlist",{"_index":615,"title":{},"body":{"controllers/PatientController.html":{}}}],["this.patientservice.logboxupdate().catch(err",{"_index":613,"title":{},"body":{"controllers/PatientController.html":{}}}],["this.scanrepository",{"_index":923,"title":{},"body":{"injectables/ScanTrackingService.html":{}}}],["this.scanrepository.delete(scanid",{"_index":938,"title":{},"body":{"injectables/ScanTrackingService.html":{}}}],["this.scanrepository.findone(scanid",{"_index":925,"title":{},"body":{"injectables/ScanTrackingService.html":{}}}],["this.scanrepository.save(newscan",{"_index":933,"title":{},"body":{"injectables/ScanTrackingService.html":{}}}],["this.scanrepository.save(scan",{"_index":937,"title":{},"body":{"injectables/ScanTrackingService.html":{}}}],["this.scanservice.addscan(scandto",{"_index":895,"title":{},"body":{"controllers/ScanTrackingController.html":{}}}],["this.scanservice.fetchscanbyid(scanid",{"_index":893,"title":{},"body":{"controllers/ScanTrackingController.html":{}}}],["this.scanservice.fetchscantypes",{"_index":900,"title":{},"body":{"controllers/ScanTrackingController.html":{}}}],["this.scanservice.fetchuserscans(userid",{"_index":891,"title":{},"body":{"controllers/ScanTrackingController.html":{}}}],["this.scanservice.removescan(scanid",{"_index":899,"title":{},"body":{"controllers/ScanTrackingController.html":{}}}],["this.scanservice.updatescan(scanid",{"_index":897,"title":{},"body":{"controllers/ScanTrackingController.html":{}}}],["this.scantypesrepository.find",{"_index":939,"title":{},"body":{"injectables/ScanTrackingService.html":{}}}],["this.scantypesrepository.findone(scantypeid",{"_index":928,"title":{},"body":{"injectables/ScanTrackingService.html":{}}}],["this.taskrepository",{"_index":1038,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["this.taskrepository.delete(taskid",{"_index":1064,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["this.taskrepository.findone(taskid",{"_index":1055,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["this.taskrepository.save(newtask",{"_index":1054,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["this.taskrepository.save(task",{"_index":1063,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["this.taskservice.addtask(userid",{"_index":1014,"title":{},"body":{"controllers/TaskManagerController.html":{}}}],["this.taskservice.fetchassignedtasks(userid",{"_index":1012,"title":{},"body":{"controllers/TaskManagerController.html":{}}}],["this.taskservice.fetchmytasks(userid",{"_index":1010,"title":{},"body":{"controllers/TaskManagerController.html":{}}}],["this.taskservice.removetask(taskid",{"_index":1018,"title":{},"body":{"controllers/TaskManagerController.html":{}}}],["this.taskservice.updatetask(taskid",{"_index":1016,"title":{},"body":{"controllers/TaskManagerController.html":{}}}],["this.treatmentrepository",{"_index":1137,"title":{},"body":{"injectables/TreatmentService.html":{}}}],["this.treatmentrepository.findone",{"_index":1131,"title":{},"body":{"injectables/TreatmentService.html":{}}}],["this.treatmentrepository.save(toupdate",{"_index":1134,"title":{},"body":{"injectables/TreatmentService.html":{}}}],["this.treatmentrepository.save(treatment",{"_index":1136,"title":{},"body":{"injectables/TreatmentService.html":{}}}],["this.treatmentservice.getphasetotals",{"_index":1107,"title":{},"body":{"controllers/TreatmentController.html":{}}}],["this.treatmentservice.gettreatment(patientid",{"_index":1109,"title":{},"body":{"controllers/TreatmentController.html":{}}}],["this.treatmentservice.settreatmentphase(patientid",{"_index":1112,"title":{},"body":{"controllers/TreatmentController.html":{}}}],["this.usergroupsrepository.findone",{"_index":1242,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usergroupsrepository.findone(1",{"_index":1222,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createuser(userdto",{"_index":1180,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.deleteuser(userid",{"_index":1184,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getuser(userid",{"_index":1178,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getusers",{"_index":1176,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateuser(userid",{"_index":1182,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersrepository",{"_index":1231,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usersrepository.delete(userid",{"_index":1247,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usersrepository.find",{"_index":1221,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usersrepository.findone",{"_index":1052,"title":{},"body":{"injectables/TaskManagerService.html":{},"injectables/UserService.html":{}}}],["this.usersrepository.findone(assignee_user_id",{"_index":1062,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["this.usersrepository.findone(userid",{"_index":931,"title":{},"body":{"injectables/ScanTrackingService.html":{},"injectables/TaskManagerService.html":{},"injectables/UserService.html":{}}}],["this.usersrepository.save(newuser",{"_index":1246,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usersrepository.save(updateduser",{"_index":1228,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usersservice.getuserbyemail(payload.emailaddress",{"_index":500,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["this.usersservice.getuserbyemail(username",{"_index":272,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.validateuser(authcredentialsdto",{"_index":274,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["throw",{"_index":275,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/JwtStrategy.html":{},"controllers/PatientController.html":{},"injectables/PatientService.html":{},"injectables/UserService.html":{}}}],["title",{"_index":312,"title":{},"body":{"classes/FamilyDoctor.html":{},"classes/Patient.html":{},"classes/PatientDTO.html":{},"injectables/PatientService.html":{}}}],["todo",{"_index":235,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["token",{"_index":194,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["totals",{"_index":1097,"title":{},"body":{"controllers/TreatmentController.html":{},"injectables/TreatmentService.html":{}}}],["touch",{"_index":1433,"title":{},"body":{"index.html":{}}}],["toupdate",{"_index":1132,"title":{},"body":{"injectables/TreatmentService.html":{},"injectables/UserService.html":{}}}],["toupdate.passwordhash",{"_index":1225,"title":{},"body":{"injectables/UserService.html":{}}}],["toupdate.phase",{"_index":1133,"title":{},"body":{"injectables/TreatmentService.html":{}}}],["tracking",{"_index":859,"title":{},"body":{"controllers/ScanTrackingController.html":{}}}],["tracking.controller",{"_index":904,"title":{},"body":{"modules/ScanTrackingModule.html":{}}}],["tracking.controller.ts",{"_index":858,"title":{},"body":{"controllers/ScanTrackingController.html":{},"coverage.html":{}}}],["tracking.controller.ts:22",{"_index":878,"title":{},"body":{"controllers/ScanTrackingController.html":{}}}],["tracking.controller.ts:31",{"_index":871,"title":{},"body":{"controllers/ScanTrackingController.html":{}}}],["tracking.controller.ts:40",{"_index":867,"title":{},"body":{"controllers/ScanTrackingController.html":{}}}],["tracking.controller.ts:50",{"_index":884,"title":{},"body":{"controllers/ScanTrackingController.html":{}}}],["tracking.controller.ts:59",{"_index":881,"title":{},"body":{"controllers/ScanTrackingController.html":{}}}],["tracking.controller.ts:67",{"_index":874,"title":{},"body":{"controllers/ScanTrackingController.html":{}}}],["tracking.module",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["tracking.module.ts",{"_index":903,"title":{},"body":{"modules/ScanTrackingModule.html":{}}}],["tracking.service",{"_index":887,"title":{},"body":{"controllers/ScanTrackingController.html":{},"modules/ScanTrackingModule.html":{}}}],["tracking.service.ts",{"_index":908,"title":{},"body":{"injectables/ScanTrackingService.html":{},"coverage.html":{}}}],["tracking.service.ts:102",{"_index":919,"title":{},"body":{"injectables/ScanTrackingService.html":{}}}],["tracking.service.ts:11",{"_index":911,"title":{},"body":{"injectables/ScanTrackingService.html":{}}}],["tracking.service.ts:114",{"_index":916,"title":{},"body":{"injectables/ScanTrackingService.html":{}}}],["tracking.service.ts:27",{"_index":918,"title":{},"body":{"injectables/ScanTrackingService.html":{}}}],["tracking.service.ts:42",{"_index":915,"title":{},"body":{"injectables/ScanTrackingService.html":{}}}],["tracking.service.ts:54",{"_index":913,"title":{},"body":{"injectables/ScanTrackingService.html":{}}}],["tracking.service.ts:78",{"_index":920,"title":{},"body":{"injectables/ScanTrackingService.html":{}}}],["tracking/scan",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"controllers/ScanTrackingController.html":{},"modules/ScanTrackingModule.html":{},"injectables/ScanTrackingService.html":{},"coverage.html":{}}}],["tracking/scan.dto.ts",{"_index":850,"title":{},"body":{"classes/ScanDTO.html":{},"coverage.html":{}}}],["tracking/scan.dto.ts:10",{"_index":853,"title":{},"body":{"classes/ScanDTO.html":{}}}],["tracking/scan.dto.ts:12",{"_index":856,"title":{},"body":{"classes/ScanDTO.html":{}}}],["tracking/scan.dto.ts:14",{"_index":854,"title":{},"body":{"classes/ScanDTO.html":{}}}],["tracking/scan.dto.ts:8",{"_index":855,"title":{},"body":{"classes/ScanDTO.html":{}}}],["transfer",{"_index":622,"title":{},"body":{"classes/PatientDTO.html":{},"classes/ScanDTO.html":{},"classes/TaskDTO.html":{},"classes/TreatmentDTO.html":{}}}],["transformer",{"_index":1361,"title":{},"body":{"dependencies.html":{}}}],["treatment",{"_index":13,"title":{"classes/Treatment.html":{}},"body":{"classes/Acknowledgement.html":{},"classes/Appointment.html":{},"classes/Patient.html":{},"classes/Treatment.html":{},"controllers/TreatmentController.html":{},"classes/TreatmentDTO.html":{},"modules/TreatmentModule.html":{},"injectables/TreatmentService.html":{},"coverage.html":{}}}],["treatment.acknowledgements",{"_index":54,"title":{},"body":{"classes/Acknowledgement.html":{}}}],["treatment.appointments",{"_index":159,"title":{},"body":{"classes/Appointment.html":{}}}],["treatment.controller",{"_index":1119,"title":{},"body":{"modules/TreatmentModule.html":{}}}],["treatment.entity",{"_index":47,"title":{},"body":{"classes/Acknowledgement.html":{},"classes/Appointment.html":{},"classes/Patient.html":{}}}],["treatment.patient",{"_index":551,"title":{},"body":{"classes/Patient.html":{},"injectables/TreatmentService.html":{}}}],["treatment.phase",{"_index":1135,"title":{},"body":{"injectables/TreatmentService.html":{}}}],["treatment.service",{"_index":1105,"title":{},"body":{"controllers/TreatmentController.html":{},"modules/TreatmentModule.html":{}}}],["treatment/treatment.module",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["treatment_cycle",{"_index":1082,"title":{},"body":{"classes/Treatment.html":{}}}],["treatment_id",{"_index":38,"title":{},"body":{"classes/Acknowledgement.html":{},"classes/Appointment.html":{}}}],["treatment_name",{"_index":1084,"title":{},"body":{"classes/Treatment.html":{}}}],["treatmentcontroller",{"_index":1090,"title":{"controllers/TreatmentController.html":{}},"body":{"controllers/TreatmentController.html":{},"modules/TreatmentModule.html":{},"coverage.html":{}}}],["treatmentcycle",{"_index":1075,"title":{},"body":{"classes/Treatment.html":{}}}],["treatmentdto",{"_index":608,"title":{"classes/TreatmentDTO.html":{}},"body":{"controllers/PatientController.html":{},"classes/TreatmentDTO.html":{},"coverage.html":{}}}],["treatmentmodule",{"_index":90,"title":{"modules/TreatmentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TreatmentModule.html":{},"modules.html":{},"overview.html":{}}}],["treatmentname",{"_index":1076,"title":{},"body":{"classes/Treatment.html":{}}}],["treatmentrepository",{"_index":1125,"title":{},"body":{"injectables/TreatmentService.html":{}}}],["treatments",{"_index":513,"title":{},"body":{"classes/Patient.html":{}}}],["treatmentservice",{"_index":1104,"title":{"injectables/TreatmentService.html":{}},"body":{"controllers/TreatmentController.html":{},"modules/TreatmentModule.html":{},"injectables/TreatmentService.html":{},"coverage.html":{},"overview.html":{}}}],["true",{"_index":27,"title":{},"body":{"classes/Acknowledgement.html":{},"classes/Appointment.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormTemplate.html":{},"classes/Patient.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"classes/UserGroups.html":{},"classes/Users.html":{}}}],["try",{"_index":455,"title":{},"body":{"injectables/FormsService.html":{},"injectables/ScanTrackingService.html":{},"injectables/TaskManagerService.html":{}}}],["ts",{"_index":696,"title":{},"body":{"injectables/PatientService.html":{}}}],["twitter",{"_index":1439,"title":{},"body":{"index.html":{}}}],["two",{"_index":571,"title":{},"body":{"controllers/PatientController.html":{},"injectables/PatientService.html":{}}}],["type",{"_index":14,"title":{},"body":{"classes/Acknowledgement.html":{},"modules/AppModule.html":{},"classes/Appointment.html":{},"classes/AuthCredentialsDto.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormDTO.html":{},"classes/FormTemplate.html":{},"classes/FormTemplateDTO.html":{},"controllers/FormsController.html":{},"injectables/FormsService.html":{},"interfaces/JwtPayloadInterface.html":{},"classes/JwtStrategy.html":{},"classes/Patient.html":{},"controllers/PatientController.html":{},"classes/PatientDTO.html":{},"injectables/PatientService.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"classes/ScanDTO.html":{},"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/TaskDTO.html":{},"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"controllers/TreatmentController.html":{},"classes/TreatmentDTO.html":{},"injectables/TreatmentService.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserGroups.html":{},"injectables/UserService.html":{},"classes/Users.html":{},"coverage.html":{}}}],["typeorm",{"_index":45,"title":{},"body":{"classes/Acknowledgement.html":{},"classes/Appointment.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormTemplate.html":{},"injectables/FormsService.html":{},"classes/Patient.html":{},"injectables/PatientService.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"injectables/ScanTrackingService.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"injectables/TaskManagerService.html":{},"classes/TestTable.html":{},"classes/Treatment.html":{},"injectables/TreatmentService.html":{},"classes/UserGroups.html":{},"injectables/UserService.html":{},"classes/Users.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/FormsModule.html":{},"modules/PatientModule.html":{},"modules/ScanTrackingModule.html":{},"modules/TaskManagerModule.html":{},"modules/TreatmentModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([formtemplate",{"_index":424,"title":{},"body":{"modules/FormsModule.html":{}}}],["typeormmodule.forfeature([patient",{"_index":647,"title":{},"body":{"modules/PatientModule.html":{}}}],["typeormmodule.forfeature([scan",{"_index":907,"title":{},"body":{"modules/ScanTrackingModule.html":{}}}],["typeormmodule.forfeature([task",{"_index":1024,"title":{},"body":{"modules/TaskManagerModule.html":{}}}],["typeormmodule.forfeature([treatment",{"_index":1121,"title":{},"body":{"modules/TreatmentModule.html":{}}}],["typeormmodule.forfeature([users",{"_index":230,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forroot",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":917,"title":{},"body":{"injectables/ScanTrackingService.html":{}}}],["typescript",{"_index":588,"title":{},"body":{"controllers/PatientController.html":{},"injectables/PatientService.html":{},"index.html":{}}}],["ui",{"_index":1380,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":262,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/JwtStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":277,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/JwtStrategy.html":{}}}],["undefined",{"_index":31,"title":{},"body":{"classes/Acknowledgement.html":{},"classes/Appointment.html":{},"classes/EmergencyContact.html":{},"classes/FamilyDoctor.html":{},"classes/Form.html":{},"classes/FormTemplate.html":{},"classes/Patient.html":{},"classes/Report.html":{},"classes/ReportTemplates.html":{},"classes/Scan.html":{},"classes/ScanTypes.html":{},"classes/Task.html":{},"classes/Treatment.html":{},"injectables/TreatmentService.html":{},"classes/UserGroups.html":{},"classes/Users.html":{}}}],["unit",{"_index":1411,"title":{},"body":{"index.html":{}}}],["update",{"_index":438,"title":{},"body":{"injectables/FormsService.html":{},"controllers/PatientController.html":{},"injectables/ScanTrackingService.html":{},"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{},"injectables/TreatmentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updated",{"_index":464,"title":{},"body":{"injectables/FormsService.html":{},"injectables/PatientService.html":{},"injectables/ScanTrackingService.html":{},"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{}}}],["updateduser",{"_index":1226,"title":{},"body":{"injectables/UserService.html":{}}}],["updatescan",{"_index":865,"title":{},"body":{"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{}}}],["updatescan(@param('scanid",{"_index":896,"title":{},"body":{"controllers/ScanTrackingController.html":{}}}],["updatescan(scanid",{"_index":882,"title":{},"body":{"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{}}}],["updatetask",{"_index":983,"title":{},"body":{"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{}}}],["updatetask(@param('taskid",{"_index":1015,"title":{},"body":{"controllers/TaskManagerController.html":{}}}],["updatetask(taskid",{"_index":999,"title":{},"body":{"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{}}}],["updateuser",{"_index":1158,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuser(userid",{"_index":1168,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserdto",{"_index":1143,"title":{"classes/UpdateUserDTO.html":{}},"body":{"classes/UpdateUserDTO.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["upload",{"_index":868,"title":{},"body":{"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{}}}],["usage",{"_index":768,"title":{},"body":{"injectables/PatientService.html":{}}}],["useguards",{"_index":198,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(authguard('jwt",{"_index":213,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["user",{"_index":138,"title":{"interfaces/User.html":{}},"body":{"classes/Appointment.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/JwtStrategy.html":{},"classes/Scan.html":{},"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":872,"title":{},"body":{"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{},"controllers/TaskManagerController.html":{}}}],["user.controller",{"_index":1201,"title":{},"body":{"modules/UserModule.html":{}}}],["user.decorator",{"_index":206,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["user.decorator.ts",{"_index":1303,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":1174,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":1145,"title":{},"body":{"classes/UpdateUserDTO.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":1151,"title":{},"body":{"classes/UpdateUserDTO.html":{}}}],["user.dto.ts:13",{"_index":1152,"title":{},"body":{"classes/UpdateUserDTO.html":{}}}],["user.dto.ts:5",{"_index":1149,"title":{},"body":{"classes/UpdateUserDTO.html":{}}}],["user.dto.ts:7",{"_index":1150,"title":{},"body":{"classes/UpdateUserDTO.html":{}}}],["user.dto.ts:9",{"_index":1148,"title":{},"body":{"classes/UpdateUserDTO.html":{}}}],["user.email",{"_index":280,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.id",{"_index":288,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.namefirst",{"_index":283,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.namelast",{"_index":285,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.service",{"_index":1171,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.validatepassword(password",{"_index":273,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user/user.module",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["user/user.service",{"_index":223,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/JwtStrategy.html":{}}}],["user_groups",{"_index":1287,"title":{},"body":{"classes/Users.html":{}}}],["user_groups.entity",{"_index":1277,"title":{},"body":{"classes/Users.html":{}}}],["user_groups.userss",{"_index":1288,"title":{},"body":{"classes/Users.html":{}}}],["user_groups_id",{"_index":1147,"title":{},"body":{"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{},"classes/Users.html":{}}}],["user_id",{"_index":151,"title":{},"body":{"classes/Appointment.html":{},"classes/Scan.html":{}}}],["usercheck",{"_index":775,"title":{},"body":{"injectables/PatientService.html":{},"injectables/UserService.html":{}}}],["usercontroller",{"_index":1154,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdto",{"_index":1160,"title":{"classes/UserDTO.html":{}},"body":{"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["usergroups",{"_index":224,"title":{"classes/UserGroups.html":{}},"body":{"modules/AuthenticationModule.html":{},"classes/UserGroups.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/Users.html":{},"coverage.html":{}}}],["usergroupsrepository",{"_index":1207,"title":{},"body":{"injectables/UserService.html":{}}}],["userid",{"_index":852,"title":{},"body":{"classes/ScanDTO.html":{},"controllers/ScanTrackingController.html":{},"injectables/ScanTrackingService.html":{},"controllers/TaskManagerController.html":{},"injectables/TaskManagerService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["usermodule",{"_index":91,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthenticationService.html":{}}}],["users",{"_index":150,"title":{"classes/Users.html":{}},"body":{"classes/Appointment.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/FormsModule.html":{},"injectables/FormsService.html":{},"classes/Scan.html":{},"modules/ScanTrackingModule.html":{},"injectables/ScanTrackingService.html":{},"classes/Task.html":{},"controllers/TaskManagerController.html":{},"modules/TaskManagerModule.html":{},"injectables/TaskManagerService.html":{},"controllers/UserController.html":{},"classes/UserGroups.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/Users.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users.appointments",{"_index":160,"title":{},"body":{"classes/Appointment.html":{}}}],["users.entity",{"_index":154,"title":{},"body":{"classes/Appointment.html":{},"classes/Scan.html":{},"classes/Task.html":{},"classes/UserGroups.html":{}}}],["users.hashpassword(this.passwordhash",{"_index":1284,"title":{},"body":{"classes/Users.html":{}}}],["users.scans",{"_index":847,"title":{},"body":{"classes/Scan.html":{}}}],["users.tasks",{"_index":965,"title":{},"body":{"classes/Task.html":{}}}],["users.tasks2",{"_index":966,"title":{},"body":{"classes/Task.html":{}}}],["users.usergroups",{"_index":1197,"title":{},"body":{"classes/UserGroups.html":{}}}],["userservice",{"_index":220,"title":{"injectables/UserService.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/JwtStrategy.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usersrepository",{"_index":430,"title":{},"body":{"injectables/FormsService.html":{},"injectables/ScanTrackingService.html":{},"injectables/TaskManagerService.html":{},"injectables/UserService.html":{}}}],["userss",{"_index":1192,"title":{},"body":{"classes/UserGroups.html":{}}}],["usersservice",{"_index":251,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/JwtStrategy.html":{}}}],["using",{"_index":446,"title":{},"body":{"injectables/FormsService.html":{},"controllers/PatientController.html":{},"injectables/ScanTrackingService.html":{},"injectables/TaskManagerService.html":{}}}],["utilized",{"_index":756,"title":{},"body":{"injectables/PatientService.html":{}}}],["validate",{"_index":256,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/JwtStrategy.html":{},"injectables/PatientService.html":{},"injectables/UserService.html":{}}}],["validate(newpatient",{"_index":802,"title":{},"body":{"injectables/PatientService.html":{}}}],["validate(newuser",{"_index":1245,"title":{},"body":{"injectables/UserService.html":{}}}],["validate(payload",{"_index":488,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["validatepassword",{"_index":1255,"title":{},"body":{"classes/Users.html":{}}}],["validatepassword(password",{"_index":1273,"title":{},"body":{"classes/Users.html":{}}}],["validateuser",{"_index":246,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["validateuser(authcredentialsdto",{"_index":254,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["validator",{"_index":172,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"injectables/PatientService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["value",{"_index":1452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":1304,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1449,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":1406,"title":{},"body":{"index.html":{}}}],["website",{"_index":1437,"title":{},"body":{"index.html":{}}}],["went",{"_index":806,"title":{},"body":{"injectables/PatientService.html":{},"injectables/UserService.html":{}}}],["where('appointmentid",{"_index":480,"title":{},"body":{"injectables/FormsService.html":{}}}],["where('assignee_user_id",{"_index":1039,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["where('assigner_user_id",{"_index":1044,"title":{},"body":{"injectables/TaskManagerService.html":{}}}],["where('email",{"_index":1232,"title":{},"body":{"injectables/UserService.html":{}}}],["where('lbuuid",{"_index":777,"title":{},"body":{"injectables/PatientService.html":{}}}],["where('user_id",{"_index":924,"title":{},"body":{"injectables/ScanTrackingService.html":{}}}],["within",{"_index":596,"title":{},"body":{"controllers/PatientController.html":{}}}],["wrong",{"_index":807,"title":{},"body":{"injectables/PatientService.html":{},"injectables/UserService.html":{}}}],["you'd",{"_index":1426,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/FormsModule.html":{},"modules/PatientModule.html":{},"modules/ScanTrackingModule.html":{},"modules/TaskManagerModule.html":{},"modules/TreatmentModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Acknowledgement.html":{"url":"classes/Acknowledgement.html","title":"class - Acknowledgement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Acknowledgement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/acknowledgement.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                Date\n                            \n                            \n                                Id\n                            \n                            \n                                Patient\n                            \n                            \n                                Signature\n                            \n                            \n                                Treatment\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('date', {nullable: false, name: 'date'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/acknowledgement.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('integer', {nullable: false, primary: true, name: 'id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/acknowledgement.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Patient\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Patient | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {nullable: false})@JoinColumn({name: 'patient_id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/acknowledgement.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Signature\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Buffer\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('bytea', {nullable: false, name: 'signature'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/acknowledgement.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Treatment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Treatment | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {nullable: false})@JoinColumn({name: 'treatment_id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/acknowledgement.entity.ts:24\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\nimport { Patient } from './patient.entity';\nimport { Treatment } from './treatment.entity';\n\n@Entity('acknowledgement', { schema: 'public' })\nexport class Acknowledgement {\n  @Column('integer', {\n    nullable: false,\n    primary: true,\n    name: 'id',\n  })\n  Id: number;\n\n  @ManyToOne(type => Patient, patient => patient.Acknowledgements, {\n    nullable: false,\n  })\n  @JoinColumn({ name: 'patient_id' })\n  Patient: Patient | null;\n\n  @ManyToOne(type => Treatment, treatment => treatment.Acknowledgements, {\n    nullable: false,\n  })\n  @JoinColumn({ name: 'treatment_id' })\n  Treatment: Treatment | null;\n\n  @Column('date', {\n    nullable: false,\n    name: 'date',\n  })\n  Date: string;\n\n  @Column('bytea', {\n    nullable: false,\n    name: 'signature',\n  })\n  Signature: Buffer;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nFormsModule\n\nFormsModule\n\nAppModule -->\n\nFormsModule->AppModule\n\n\n\nAppModule -->\n\nFormsModule->AppModule\n\n\n\n\n\nPatientModule\n\nPatientModule\n\nAppModule -->\n\nPatientModule->AppModule\n\n\n\n\n\nScanTrackingModule\n\nScanTrackingModule\n\nAppModule -->\n\nScanTrackingModule->AppModule\n\n\n\n\n\nTaskManagerModule\n\nTaskManagerModule\n\nAppModule -->\n\nTaskManagerModule->AppModule\n\n\n\n\n\nTreatmentModule\n\nTreatmentModule\n\nAppModule -->\n\nTreatmentModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            FormsModule\n                        \n                        \n                            FormsModule\n                        \n                        \n                            PatientModule\n                        \n                        \n                            ScanTrackingModule\n                        \n                        \n                            TaskManagerModule\n                        \n                        \n                            TreatmentModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TaskManagerModule } from './task-manager/task-manager.module';\nimport { UserModule } from './user/user.module';\nimport { AuthenticationModule } from './authentication/authentication.module';\nimport { ScanTrackingModule } from './scan-tracking/scan-tracking.module';\nimport { FormsModule } from './forms/forms.module';\nimport { PatientModule } from './patient/patient.module';\nimport { TreatmentModule } from './treatment/treatment.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      host: '167.71.36.250',\n      port: 5432,\n      username: 'postgres',\n      password: 'qaaNGvi5CSQ968tv3v1hSemg1gc',\n      database: 'oms',\n      entities: [__dirname + '/**/*.entity{.ts,.js}'],\n      synchronize: false,\n    }),\n    TaskManagerModule,\n    ScanTrackingModule,\n    FormsModule,\n    UserModule,\n    AuthenticationModule,\n    FormsModule,\n    PatientModule,\n    TreatmentModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Service is online';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Appointment.html":{"url":"classes/Appointment.html","title":"class - Appointment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Appointment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/appointment.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                AppointmentDate\n                            \n                            \n                                Forms\n                            \n                            \n                                Id\n                            \n                            \n                                Reports\n                            \n                            \n                                Scans\n                            \n                            \n                                Treatment\n                            \n                            \n                                User\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            AppointmentDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('date', {nullable: false, name: 'appointment_date'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/appointment.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Forms\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Form[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/appointment.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('integer', {nullable: false, primary: true, name: 'id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/appointment.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Reports\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Report[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/appointment.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Scans\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Scan[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/appointment.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Treatment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Treatment | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {})@JoinColumn({name: 'treatment_id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/appointment.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            User\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Users | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {nullable: false})@JoinColumn({name: 'user_id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/appointment.entity.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne, OneToMany } from 'typeorm';\nimport { Treatment } from './treatment.entity';\nimport { Users } from './users.entity';\nimport { Form } from './form.entity';\nimport { Report } from './report.entity';\nimport { Scan } from './scan.entity';\n\n@Entity('appointment', { schema: 'public' })\nexport class Appointment {\n  @Column('integer', {\n    nullable: false,\n    primary: true,\n    name: 'id',\n  })\n  Id: number;\n\n  @Column('date', {\n    nullable: false,\n    name: 'appointment_date',\n  })\n  AppointmentDate: string;\n\n  @ManyToOne(type => Treatment, treatment => treatment.Appointments, {})\n  @JoinColumn({ name: 'treatment_id' })\n  Treatment: Treatment | null;\n\n  @ManyToOne(type => Users, users => users.Appointments, { nullable: false })\n  @JoinColumn({ name: 'user_id' })\n  User: Users | null;\n\n  @OneToMany(type => Form, form => form.Appointment)\n  Forms: Form[];\n\n  @OneToMany(type => Report, report => report.Appointment)\n  Reports: Report[];\n\n  @OneToMany(type => Scan, scan => scan.Appointment)\n  Scans: Scan[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthCredentialsDto.html":{"url":"classes/AuthCredentialsDto.html","title":"class - AuthCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/auth-credentials.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/authentication/dto/auth-credentials.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/authentication/dto/auth-credentials.dto.ts:7\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\nimport { ApiModelProperty, ApiModelPropertyOptional } from '@nestjs/swagger';\n\nexport class AuthCredentialsDto {\n  @ApiModelProperty()\n  @IsString()\n  username: string;\n  @ApiModelProperty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                authentication\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                test\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signin')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:17\n                \n            \n\n\n            \n                \n                    Signin Route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            test\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    test(user: Users)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/test')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:29\n                \n            \n\n\n            \n                \n                    Method to test a token\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Users\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Req, UseGuards } from '@nestjs/common';\nimport { AuthCredentialsDto } from './dto/auth-credentials.dto';\nimport { AuthenticationService } from './authentication.service';\nimport { AuthGuard } from '@nestjs/passport';\nimport { GetUser } from './get-user.decorator';\nimport { Users } from '../entities/users.entity';\n\n@Controller('authentication')\nexport class AuthenticationController {\n  constructor(private authService: AuthenticationService) {}\n\n  /**\n   * Signin Route\n   * @param authCredentialsDto\n   */\n  @Post('/signin')\n  async signIn(\n    @Body() authCredentialsDto: AuthCredentialsDto,\n  ): Promise {\n    return this.authService.signIn(authCredentialsDto);\n  }\n\n  /**\n   * Method to test a token\n   * @param user\n   */\n  @Get('/test')\n  @UseGuards(AuthGuard('jwt'))\n  async test(@GetUser() user: Users) {\n    console.log(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthenticationModule.html":{"url":"modules/AuthenticationModule.html","title":"module - AuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nJwtStrategy  -->\n\nAuthenticationModule->JwtStrategy \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nUserService\n\nUserService\n\nAuthenticationModule -->\n\nUserService->AuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/authentication/authentication.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Users } from '../entities/users.entity';\nimport { AuthenticationController } from './authentication.controller';\nimport { UserService } from '../user/user.service';\nimport { UserGroups } from '../entities/user_groups.entity';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Users, UserGroups]),\n    PassportModule.register({\n      defaultStrategy: 'jwt',\n    }),\n    JwtModule.register({\n      // TODO: Change to something secure at some point\n      secret: 'jwt-secret-1231!',\n      signOptions: {\n        expiresIn: 3600,\n      },\n    }),\n  ],\n  exports: [JwtStrategy, PassportModule],\n  providers: [AuthenticationService, JwtStrategy, UserService],\n  controllers: [AuthenticationController],\n})\nexport class AuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UserService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/authentication.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:36\n                \n            \n\n\n            \n                \n                    Generate a JWT token for the user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:21\n                \n            \n\n\n            \n                \n                    Validate the parsed authentication credentials dto\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        DTO to validate\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { UserService } from '../user/user.service';\nimport { AuthCredentialsDto } from './dto/auth-credentials.dto';\nimport { JwtService } from '@nestjs/jwt';\nimport { JwtPayloadInterface } from './interface/jwt-payload.interface';\nimport { Users } from '../entities/users.entity';\nimport { stringify } from 'querystring';\n\n@Injectable()\nexport class AuthenticationService {\n  constructor(\n    @Inject(UserService)\n    private usersService: UserService,\n    private jwtService: JwtService,\n  ) {}\n\n  /**\n   * Validate the parsed authentication credentials dto\n   * @param authCredentialsDto DTO to validate\n   */\n  async validateUser(authCredentialsDto: AuthCredentialsDto): Promise {\n    const { username, password } = authCredentialsDto;\n    const user = await this.usersService.getUserByEmail(username);\n\n    if (user && (await user.validatePassword(password))) {\n      return user;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Generate a JWT token for the user\n   * @param authCredentialsDto\n   */\n  async signIn(authCredentialsDto: AuthCredentialsDto): Promise {\n    const user = await this.validateUser(authCredentialsDto);\n\n    if (!user) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n\n    // payload for the token\n    const payload: JwtPayloadInterface = { emailaddress: user.Email };\n    const token = await this.jwtService.sign(payload);\n    const firstName = user.NameFirst;\n    const lastName = user.NameLast;\n    const role = 'Admin';\n    const id = user.Id;\n    const username = user.Email;\n\n    return { firstName, lastName, role, id, username, token };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmergencyContact.html":{"url":"classes/EmergencyContact.html","title":"class - EmergencyContact","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmergencyContact\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/emergency_contact.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                Email\n                            \n                            \n                                Id\n                            \n                            \n                                NameFirst\n                            \n                            \n                                NameLast\n                            \n                            \n                                Patients\n                            \n                            \n                                PhoneNumber\n                            \n                            \n                                Relationship\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: true, name: 'email'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/emergency_contact.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('integer', {nullable: false, primary: true, name: 'id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/emergency_contact.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NameFirst\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: true, name: 'name_first'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/emergency_contact.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NameLast\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: true, name: 'name_last'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/emergency_contact.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Patients\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Patient[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/emergency_contact.entity.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PhoneNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: true, name: 'phone_number'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/emergency_contact.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Relationship\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: true, name: 'relationship'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/emergency_contact.entity.ts:41\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, OneToMany } from 'typeorm';\nimport { Patient } from './patient.entity';\n\n@Entity('emergency_contact', { schema: 'public' })\nexport class EmergencyContact {\n  @Column('integer', {\n    nullable: false,\n    primary: true,\n    name: 'id',\n  })\n  Id: number;\n\n  @Column('text', {\n    nullable: true,\n    name: 'name_first',\n  })\n  NameFirst: string | null;\n\n  @Column('text', {\n    nullable: true,\n    name: 'name_last',\n  })\n  NameLast: string | null;\n\n  @Column('text', {\n    nullable: true,\n    name: 'phone_number',\n  })\n  PhoneNumber: string | null;\n\n  @Column('text', {\n    nullable: true,\n    name: 'email',\n  })\n  Email: string | null;\n\n  @Column('text', {\n    nullable: true,\n    name: 'relationship',\n  })\n  Relationship: string | null;\n\n  @OneToMany(type => Patient, patient => patient.EmergencyContact)\n  Patients: Patient[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FamilyDoctor.html":{"url":"classes/FamilyDoctor.html","title":"class - FamilyDoctor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FamilyDoctor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/family_doctor.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                Email\n                            \n                            \n                                Id\n                            \n                            \n                                Name\n                            \n                            \n                                Patients\n                            \n                            \n                                PhoneNumber\n                            \n                            \n                                Title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: true, name: 'email'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/family_doctor.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('integer', {nullable: false, primary: true, name: 'id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/family_doctor.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: true, name: 'name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/family_doctor.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Patients\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Patient[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/family_doctor.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PhoneNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: true, name: 'phone_number'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/family_doctor.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: true, name: 'title'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/family_doctor.entity.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, OneToMany } from 'typeorm';\nimport { Patient } from './patient.entity';\n\n@Entity('family_doctor', { schema: 'public' })\nexport class FamilyDoctor {\n  @Column('integer', {\n    nullable: false,\n    primary: true,\n    name: 'id',\n  })\n  Id: number;\n\n  @Column('text', {\n    nullable: true,\n    name: 'title',\n  })\n  Title: string | null;\n\n  @Column('text', {\n    nullable: true,\n    name: 'name',\n  })\n  Name: string | null;\n\n  @Column('text', {\n    nullable: true,\n    name: 'email',\n  })\n  Email: string | null;\n\n  @Column('text', {\n    nullable: true,\n    name: 'phone_number',\n  })\n  PhoneNumber: string | null;\n\n  @OneToMany(type => Patient, patient => patient.FamilyDoctor)\n  Patients: Patient[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Form.html":{"url":"classes/Form.html","title":"class - Form","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Form\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/form.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                Appointment\n                            \n                            \n                                FormData\n                            \n                            \n                                FormName\n                            \n                            \n                                FormTemplate\n                            \n                            \n                                Id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Appointment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Appointment | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {})@JoinColumn({name: 'appointment_id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/form.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            FormData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Object\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('json', {nullable: false, name: 'form_data'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/form.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            FormName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: false, name: 'form_name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/form.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            FormTemplate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     FormTemplate | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {nullable: false})@JoinColumn({name: 'form_template_id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/form.entity.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('integer', {nullable: false, primary: true, name: 'id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/form.entity.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\nimport { Appointment } from './appointment.entity';\nimport { FormTemplate } from './form_template.entity';\n\n@Entity('form', { schema: 'public' })\nexport class Form {\n  @Column('integer', {\n    nullable: false,\n    primary: true,\n    name: 'id',\n  })\n  Id: number;\n\n  @Column('text', {\n    nullable: false,\n    name: 'form_name',\n  })\n  FormName: string;\n\n  @Column('json', {\n    nullable: false,\n    name: 'form_data',\n  })\n  FormData: Object;\n\n  @ManyToOne(type => Appointment, appointment => appointment.Forms, {})\n  @JoinColumn({ name: 'appointment_id' })\n  Appointment: Appointment | null;\n\n  @ManyToOne(type => FormTemplate, form_template => form_template.Forms, {\n    nullable: false,\n  })\n  @JoinColumn({ name: 'form_template_id' })\n  FormTemplate: FormTemplate | null;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FormDTO.html":{"url":"classes/FormDTO.html","title":"class - FormDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FormDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/forms/form.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                appointmentId\n                            \n                            \n                                    Readonly\n                                formData\n                            \n                            \n                                    Readonly\n                                formName\n                            \n                            \n                                    Readonly\n                                formTemplateId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            appointmentId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/forms/form.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            formData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/forms/form.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            formName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/forms/form.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            formTemplateId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/forms/form.dto.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\nexport class FormDTO {\n  @ApiModelProperty()\n  readonly formName: string;\n  @ApiModelProperty()\n  readonly formData: object;\n  @ApiModelProperty()\n  readonly appointmentId: number;\n  @ApiModelProperty()\n  readonly formTemplateId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FormTemplate.html":{"url":"classes/FormTemplate.html","title":"class - FormTemplate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FormTemplate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/form_template.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                FormData\n                            \n                            \n                                Forms\n                            \n                            \n                                Id\n                            \n                            \n                                Name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            FormData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Object\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('json', {nullable: false, name: 'form_data'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/form_template.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Forms\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Form[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/form_template.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('integer', {nullable: false, primary: true, name: 'id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/form_template.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: false, name: 'name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/form_template.entity.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, OneToMany } from 'typeorm';\nimport { Form } from './form.entity';\n\n@Entity('form_template', { schema: 'public' })\nexport class FormTemplate {\n  @Column('integer', {\n    nullable: false,\n    primary: true,\n    name: 'id',\n  })\n  Id: number;\n\n  @Column('text', {\n    nullable: false,\n    name: 'name',\n  })\n  Name: string;\n\n  @Column('json', {\n    nullable: false,\n    name: 'form_data',\n  })\n  FormData: Object;\n\n  @OneToMany(type => Form, form => form.FormTemplate)\n  Forms: Form[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FormTemplateDTO.html":{"url":"classes/FormTemplateDTO.html","title":"class - FormTemplateDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FormTemplateDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/forms/form_template.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                formData\n                            \n                            \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            formData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/forms/form_template.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/forms/form_template.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\nexport class FormTemplateDTO {\n  @ApiModelProperty()\n  readonly name: string;\n  @ApiModelProperty()\n  readonly formData: object;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FormsController.html":{"url":"controllers/FormsController.html","title":"controller - FormsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FormsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/forms/forms.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                forms\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                captureFormResponse\n                            \n                            \n                                    Async\n                                createFormTemplate\n                            \n                            \n                                    Async\n                                editFormTemplate\n                            \n                            \n                                    Async\n                                getAllTemplates\n                            \n                            \n                                    Async\n                                getAppointmentForms\n                            \n                            \n                                    Async\n                                getFormTemplateById\n                            \n                            \n                                    Async\n                                removeFormTemplate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            captureFormResponse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    captureFormResponse(formDTO: FormDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/forms/forms.controller.ts:71\n                \n            \n\n\n            \n                \n                    Save a filled-out form\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    formDTO\n                                    \n                                                FormDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createFormTemplate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFormTemplate(formTemplateDTO: FormTemplateDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/forms/forms.controller.ts:40\n                \n            \n\n\n            \n                \n                    Create form template.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    formTemplateDTO\n                                    \n                                                FormTemplateDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            editFormTemplate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    editFormTemplate(formTemplateId: number, formTemplateDTO: FormTemplateDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':formTemplateId')\n                \n            \n\n            \n                \n                    Defined in src/forms/forms.controller.ts:50\n                \n            \n\n\n            \n                \n                    Edit form template.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    formTemplateId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    formTemplateDTO\n                                    \n                                                FormTemplateDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAllTemplates\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllTemplates()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/forms/forms.controller.ts:22\n                \n            \n\n\n            \n                \n                    Get all of the form templates\n\n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAppointmentForms\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAppointmentForms(appointmentId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':appointmentId')\n                \n            \n\n            \n                \n                    Defined in src/forms/forms.controller.ts:80\n                \n            \n\n\n            \n                \n                    Get the form(s) from a specific appointment\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    appointmentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getFormTemplateById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFormTemplateById(formTemplateId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':formTemplateId')\n                \n            \n\n            \n                \n                    Defined in src/forms/forms.controller.ts:31\n                \n            \n\n\n            \n                \n                    Get a specific form template\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    formTemplateId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            removeFormTemplate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeFormTemplate(formTemplateId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':formTemplateId')\n                \n            \n\n            \n                \n                    Defined in src/forms/forms.controller.ts:62\n                \n            \n\n\n            \n                \n                    Remove a form template\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    formTemplateId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n} from '@nestjs/common';\nimport { FormsService } from './forms.service';\nimport { FormTemplateDTO } from './form_template.dto';\nimport { FormDTO } from './form.dto';\n\n@Controller('forms')\nexport class FormsController {\n  constructor(private formService: FormsService) {}\n\n  /**\n   * Get all of the form templates\n   */\n  @Get()\n  async getAllTemplates() {\n    return this.formService.getAllTemplates();\n  }\n\n  /**\n   * Get a specific form template\n   * @param formTemplateId\n   */\n  @Get(':formTemplateId')\n  async getFormTemplateById(@Param('formTemplateId') formTemplateId: number) {\n    return this.formService.getFormTemplateById(formTemplateId);\n  }\n\n  /**\n   * Create form template.\n   * @param formTemplateDTO\n   */\n  @Post()\n  async createFormTemplate(@Body() formTemplateDTO: FormTemplateDTO) {\n    return this.formService.createFormTemplate(formTemplateDTO);\n  }\n\n  /**\n   * Edit form template.\n   * @param formTemplateId\n   * @param formTemplateDTO\n   */\n  @Put(':formTemplateId')\n  async editFormTemplate(\n    @Param('formTemplateId') formTemplateId: number,\n    @Body() formTemplateDTO: FormTemplateDTO,\n  ) {\n    return this.formService.editFormTemplate(formTemplateId, formTemplateDTO);\n  }\n\n  /**\n   * Remove a form template\n   * @param formTemplateId\n   */\n  @Delete(':formTemplateId')\n  async removeFormTemplate(@Param('formTemplateId') formTemplateId: number) {\n    return this.formService.removeFormTemplate(formTemplateId);\n  }\n\n  /**\n   * Save a filled-out form\n   * @param formDTO\n   */\n  @Post()\n  async captureFormResponse(@Body() formDTO: FormDTO) {\n    return this.formService.captureFormResponse(formDTO);\n  }\n\n  /**\n   * Get the form(s) from a specific appointment\n   * @param appointmentId\n   */\n  @Get(':appointmentId')\n  async getAppointmentForms(@Param('appointmentId') appointmentId: number) {\n    return this.formService.getAppointmentForms(appointmentId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FormsModule.html":{"url":"modules/FormsModule.html","title":"module - FormsModule","body":"\n                   \n\n\n\n\n    Modules\n    FormsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FormsModule\n\n\n\ncluster_FormsModule_providers\n\n\n\n\nFormsService\n\nFormsService\n\n\n\nFormsModule\n\nFormsModule\n\nFormsModule -->\n\nFormsService->FormsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/forms/forms.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FormsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FormsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FormsService } from './forms.service';\nimport { FormsController } from './forms.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { FormTemplate } from '../entities/form_template.entity';\nimport { Form } from '../entities/form.entity';\nimport { Appointment } from '../entities/appointment.entity';\nimport { Users } from '../entities/users.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([FormTemplate, Form, Appointment, Users])],\n  providers: [FormsService],\n  controllers: [FormsController],\n})\nexport class FormsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FormsService.html":{"url":"injectables/FormsService.html","title":"injectable - FormsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FormsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/forms/forms.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                captureFormResponse\n                            \n                            \n                                    Async\n                                createFormTemplate\n                            \n                            \n                                    Async\n                                editFormTemplate\n                            \n                            \n                                    Async\n                                getAllTemplates\n                            \n                            \n                                    Async\n                                getAppointmentForms\n                            \n                            \n                                    Async\n                                getFormTemplateById\n                            \n                            \n                                    Async\n                                removeFormTemplate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(formTemplateRepository: Repository, formRepository: Repository, appointmentRepository: Repository, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/forms/forms.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        formTemplateRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        formRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        appointmentRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            captureFormResponse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    captureFormResponse(formDTO: FormDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/forms/forms.service.ts:101\n                \n            \n\n\n            \n                \n                    Capture a form response\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    formDTO\n                                    \n                                                FormDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createFormTemplate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFormTemplate(formTemplateDTO: FormTemplateDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/forms/forms.service.ts:43\n                \n            \n\n\n            \n                \n                    Create a new form template\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    formTemplateDTO\n                                    \n                                                FormTemplateDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            editFormTemplate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    editFormTemplate(formTemplateId: number, formTemplateDTO: FormTemplateDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/forms/forms.service.ts:63\n                \n            \n\n\n            \n                \n                    Update an existing form template\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    formTemplateId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    formTemplateDTO\n                                    \n                                                FormTemplateDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAllTemplates\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllTemplates()\n                \n            \n\n\n            \n                \n                    Defined in src/forms/forms.service.ts:27\n                \n            \n\n\n            \n                \n                    Fetch all of the form templates\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAppointmentForms\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAppointmentForms(appointmentId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/forms/forms.service.ts:126\n                \n            \n\n\n            \n                \n                    Get forms for the initial interview\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    appointmentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getFormTemplateById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFormTemplateById(formTemplateId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/forms/forms.service.ts:35\n                \n            \n\n\n            \n                \n                    Fetch the template, using its Id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    formTemplateId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            removeFormTemplate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeFormTemplate(formTemplateId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/forms/forms.service.ts:88\n                \n            \n\n\n            \n                \n                    Remove a form template\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    formTemplateId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { FormTemplate } from '../entities/form_template.entity';\nimport { FormTemplateDTO } from './form_template.dto';\nimport { Form } from '../entities/form.entity';\nimport { FormDTO } from './form.dto';\nimport { Appointment } from '../entities/appointment.entity';\nimport { Users } from '../entities/users.entity';\n\n@Injectable()\nexport class FormsService {\n  constructor(\n    @InjectRepository(FormTemplate)\n    private formTemplateRepository: Repository,\n    @InjectRepository(Form)\n    private formRepository: Repository,\n    @InjectRepository(Appointment)\n    private appointmentRepository: Repository,\n    @InjectRepository(Users)\n    private usersRepository: Repository,\n  ) {}\n\n  /**\n   * Fetch all of the form templates\n   */\n  async getAllTemplates(): Promise {\n    return await this.formTemplateRepository.find();\n  }\n\n  /**\n   * Fetch the template, using its Id\n   * @param formTemplateId\n   */\n  async getFormTemplateById(formTemplateId: number): Promise {\n    return await this.formTemplateRepository.findOne(formTemplateId);\n  }\n\n  /**\n   * Create a new form template\n   * @param formTemplateDTO\n   */\n  async createFormTemplate(formTemplateDTO: FormTemplateDTO): Promise {\n    try {\n      // Get the form template details from the DTO\n      const { name, formData } = formTemplateDTO;\n      // Create the new form template object\n      const newFormTemplate = new FormTemplate();\n      newFormTemplate.Name = name;\n      newFormTemplate.FormData = formData;\n      // Save the new form template\n      return await this.formTemplateRepository.save(newFormTemplate);\n    } catch (e) {\n      e.printStackTrace;\n    }\n  }\n\n  /**\n   * Update an existing form template\n   * @param formTemplateId\n   * @param formTemplateDTO\n   */\n  async editFormTemplate(\n    formTemplateId: number,\n    formTemplateDTO: FormTemplateDTO,\n  ): Promise {\n    try {\n      // Get the updated form template details from the DTO\n      const { name, formData } = formTemplateDTO;\n      // Find the form template to update, using formTemplateId\n      const formTemplate = await this.formTemplateRepository.findOne(\n        formTemplateId,\n      );\n      // Update the form template details\n      formTemplate.Name = name;\n      formTemplate.FormData = formData;\n      // Save the updated form template\n      return await this.formTemplateRepository.save(formTemplate);\n    } catch (e) {\n      e.printStackTrace;\n    }\n  }\n\n  /**\n   * Remove a form template\n   * @param formTemplateId\n   */\n  async removeFormTemplate(formTemplateId: number): Promise {\n    try {\n      // Delete the form template, using its Id.\n      return await this.formTemplateRepository.delete(formTemplateId);\n    } catch (e) {\n      e.printStackTrace;\n    }\n  }\n\n  /**\n   * Capture a form response\n   * @param formDTO\n   */\n  async captureFormResponse(formDTO: FormDTO): Promise {\n    try {\n      // Get the form details from the DTO\n      const { formName, formData, appointmentId, formTemplateId } = formDTO;\n      // Create the new form object\n      const newForm = new Form();\n      newForm.FormName = formName;\n      newForm.FormData = formData;\n      newForm.Appointment = await this.appointmentRepository.findOne(\n        appointmentId,\n      );\n      newForm.FormTemplate = await this.formTemplateRepository.findOne(\n        formTemplateId,\n      );\n      // Save the new form\n      return await this.formRepository.save(newForm);\n    } catch (e) {\n      e.printStackTrace;\n    }\n  }\n\n  /**\n   * Get forms for the initial interview\n   * @param appointmentId\n   */\n  async getAppointmentForms(appointmentId: number): Promise {\n    try {\n      // Fetch the form(s) from the specific appointment\n      return await this.formRepository\n        .createQueryBuilder()\n        .where('appointmentId = :appointmentId', { appointmentId })\n        .getMany();\n    } catch (e) {\n      e.printStackTrace;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayloadInterface.html":{"url":"interfaces/JwtPayloadInterface.html","title":"interface - JwtPayloadInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JwtPayloadInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/interface/jwt-payload.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        emailaddress\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        emailaddress\n                                    \n                                \n                                \n                                    \n                                        emailaddress:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayloadInterface {\n  emailaddress: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtStrategy.html":{"url":"classes/JwtStrategy.html","title":"class - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayloadInterface)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/jwt.strategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayloadInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { JwtPayloadInterface } from './interface/jwt-payload.interface';\nimport { Inject, UnauthorizedException } from '@nestjs/common';\nimport { UserService } from '../user/user.service';\n\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    @Inject(UserService)\n    private usersService: UserService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: 'jwt-secret-1231!',\n    });\n  }\n\n  async validate(payload: JwtPayloadInterface) {\n    const user = await this.usersService.getUserByEmail(payload.emailaddress);\n\n    if (!user) {\n      throw new UnauthorizedException('Invalid user');\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Patient.html":{"url":"classes/Patient.html","title":"class - Patient","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Patient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/patient.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                Acknowledgements\n                            \n                            \n                                AddressPhysical\n                            \n                            \n                                AddressPostal\n                            \n                            \n                                Dob\n                            \n                            \n                                Email\n                            \n                            \n                                EmergencyContact\n                            \n                            \n                                FamilyDoctor\n                            \n                            \n                                Gender\n                            \n                            \n                                Id\n                            \n                            \n                                IdNumber\n                            \n                            \n                                LbUuid\n                            \n                            \n                                NameFirst\n                            \n                            \n                                NameLast\n                            \n                            \n                                Nationality\n                            \n                            \n                                PhoneCell\n                            \n                            \n                                PhoneHome\n                            \n                            \n                                PhoneWork\n                            \n                            \n                                Title\n                            \n                            \n                                Treatments\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Acknowledgements\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Acknowledgement[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/patient.entity.ts:116\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            AddressPhysical\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: true, name: 'address_physical'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/patient.entity.ts:98\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            AddressPostal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: true, name: 'address_postal'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/patient.entity.ts:92\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Dob\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Date | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('date', {nullable: true, name: 'dob'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/patient.entity.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: true, name: 'email'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/patient.entity.ts:86\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            EmergencyContact\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EmergencyContact | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {})@JoinColumn({name: 'emergency_contact_id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/patient.entity.ts:106\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            FamilyDoctor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FamilyDoctor | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {})@JoinColumn({name: 'family_doctor_id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/patient.entity.ts:110\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Gender\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: true, name: 'gender'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/patient.entity.ts:56\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('integer', {nullable: false, primary: true, name: 'id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/patient.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            IdNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: true, name: 'id_number'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/patient.entity.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            LbUuid\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: false, name: 'lb_uuid'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/patient.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NameFirst\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: true, name: 'name_first'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/patient.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NameLast\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: true, name: 'name_last'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/patient.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Nationality\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: true, name: 'nationality'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/patient.entity.ts:62\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PhoneCell\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: true, name: 'phone_cell'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/patient.entity.ts:74\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PhoneHome\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: true, name: 'phone_home'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/patient.entity.ts:68\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PhoneWork\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: true, name: 'phone_work'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/patient.entity.ts:80\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: true, name: 'title'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/patient.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Treatments\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Treatment[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/patient.entity.ts:119\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne, OneToMany } from 'typeorm';\nimport { EmergencyContact } from './emergency_contact.entity';\nimport { FamilyDoctor } from './family_doctor.entity';\nimport { Acknowledgement } from './acknowledgement.entity';\nimport { Treatment } from './treatment.entity';\n\n@Entity('patient', { schema: 'public' })\nexport class Patient {\n  @Column('integer', {\n    nullable: false,\n    primary: true,\n    name: 'id',\n  })\n  Id: number;\n\n  @Column('text', {\n    nullable: false,\n    name: 'lb_uuid',\n  })\n  LbUuid: string;\n\n  @Column('text', {\n    nullable: true,\n    name: 'title',\n  })\n  Title: string | null;\n\n  @Column('text', {\n    nullable: true,\n    name: 'name_first',\n  })\n  NameFirst: string | null;\n\n  @Column('text', {\n    nullable: true,\n    name: 'name_last',\n  })\n  NameLast: string | null;\n\n  @Column('date', {\n    nullable: true,\n    name: 'dob',\n  })\n  Dob: Date | null;\n\n  @Column('text', {\n    nullable: true,\n    name: 'id_number',\n  })\n  IdNumber: string | null;\n\n  @Column('text', {\n    nullable: true,\n    name: 'gender',\n  })\n  Gender: string | null;\n\n  @Column('text', {\n    nullable: true,\n    name: 'nationality',\n  })\n  Nationality: string | null;\n\n  @Column('text', {\n    nullable: true,\n    name: 'phone_home',\n  })\n  PhoneHome: string | null;\n\n  @Column('text', {\n    nullable: true,\n    name: 'phone_cell',\n  })\n  PhoneCell: string | null;\n\n  @Column('text', {\n    nullable: true,\n    name: 'phone_work',\n  })\n  PhoneWork: string | null;\n\n  @Column('text', {\n    nullable: true,\n    name: 'email',\n  })\n  Email: string | null;\n\n  @Column('text', {\n    nullable: true,\n    name: 'address_postal',\n  })\n  AddressPostal: string | null;\n\n  @Column('text', {\n    nullable: true,\n    name: 'address_physical',\n  })\n  AddressPhysical: string | null;\n\n  @ManyToOne(\n    type => EmergencyContact,\n    emergency_contact => emergency_contact.Patients,\n    {},\n  )\n  @JoinColumn({ name: 'emergency_contact_id' })\n  EmergencyContact: EmergencyContact | null;\n\n  @ManyToOne(type => FamilyDoctor, family_doctor => family_doctor.Patients, {})\n  @JoinColumn({ name: 'family_doctor_id' })\n  FamilyDoctor: FamilyDoctor | null;\n\n  @OneToMany(\n    type => Acknowledgement,\n    acknowledgement => acknowledgement.Patient,\n  )\n  Acknowledgements: Acknowledgement[];\n\n  @OneToMany(type => Treatment, treatment => treatment.Patient)\n  Treatments: Treatment[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PatientController.html":{"url":"controllers/PatientController.html","title":"controller - PatientController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PatientController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/patient/patient.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                patient\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPatient\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                logboxUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createPatient\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createPatient(patientDTO: PatientDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/patient/patient.controller.ts:46\n                \n            \n\n\n            \n                \n                    Create a new patient\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    patientDTO\n                                    \n                                                PatientDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')\n                \n            \n\n            \n                \n                    Defined in src/patient/patient.controller.ts:14\n                \n            \n\n\n            \n                \n                    Get all patients\n\n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(patientID: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':patientID')\n                \n            \n\n            \n                \n                    Defined in src/patient/patient.controller.ts:37\n                \n            \n\n\n            \n                \n                    Get specific patient\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    patientID\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            logboxUpdate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logboxUpdate()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUpdate')\n                \n            \n\n            \n                \n                    Defined in src/patient/patient.controller.ts:25\n                \n            \n\n\n            \n                \n                    Update patient list from LogBox. This happens in two stages due to an issue with the nestjs lifecycle\nThe first stage gets an observer from the nest http module by calling logboxUpdate\nThe second stage passes the observer to logboxDatabaseUpdate and converts the observer to a TypeScript\nobject and forces the resulting lambda to be asynchronous allowing for the relationships to be created within the object.\nThis is done using the ES5 and not ES6 functions, but this shouldn't result in any issues long term.\n\n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post } from '@nestjs/common';\nimport { PatientService } from './patient.service';\nimport { PatientDTO } from './dto/patient.dto';\nimport { TreatmentDTO } from './dto/treatment.dto';\n\n@Controller('patient')\nexport class PatientController {\n  constructor(private patientService: PatientService) {}\n\n  /**\n   * Get all patients\n   */\n  @Get('/list')\n  async findAll() {\n    return this.patientService.getPatientList();\n  }\n  /**\n   * Update patient list from LogBox. This happens in two stages due to an issue with the nestjs lifecycle\n   * The first stage gets an observer from the nest http module by calling logboxUpdate\n   * The second stage passes the observer to logboxDatabaseUpdate and converts the observer to a TypeScript\n   * object and forces the resulting lambda to be asynchronous allowing for the relationships to be created within the object.\n   * This is done using the ES5 and not ES6 functions, but this shouldn't result in any issues long term.\n   */\n  @Get('/listUpdate')\n  async logboxUpdate() {\n    const patientList = await this.patientService.logboxUpdate().catch(err => {\n      throw err;\n    });\n    return await this.patientService.logboxDatabaseUpdate(patientList);\n  }\n\n  /**\n   * Get specific patient\n   * @param patientID\n   */\n  @Get(':patientID')\n  async getUser(@Param('patientID') patientID: number) {\n    return this.patientService.getPatient(patientID);\n  }\n\n  /**\n   * Create a new patient\n   * @param patientDTO\n   */\n  @Post()\n  async createPatient(@Body() patientDTO: PatientDTO) {\n    return this.patientService.createPatient(patientDTO);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatientDTO.html":{"url":"classes/PatientDTO.html","title":"class - PatientDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatientDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/patient/dto/patient.dto.ts\n        \n\n            \n                Description\n            \n            \n                Patient Data Transfer Object\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                address_physical\n                            \n                            \n                                    Readonly\n                                    Optional\n                                address_postal\n                            \n                            \n                                    Readonly\n                                    Optional\n                                dob\n                            \n                            \n                                    Readonly\n                                    Optional\n                                email\n                            \n                            \n                                    Readonly\n                                    Optional\n                                emergency_contact_id\n                            \n                            \n                                    Readonly\n                                    Optional\n                                family_doctor_id\n                            \n                            \n                                    Readonly\n                                    Optional\n                                gender\n                            \n                            \n                                    Readonly\n                                    Optional\n                                id_number\n                            \n                            \n                                    Readonly\n                                lb_uuid\n                            \n                            \n                                    Readonly\n                                name_first\n                            \n                            \n                                    Readonly\n                                name_last\n                            \n                            \n                                    Readonly\n                                    Optional\n                                nationality\n                            \n                            \n                                    Readonly\n                                    Optional\n                                phone_cell\n                            \n                            \n                                    Readonly\n                                    Optional\n                                phone_home\n                            \n                            \n                                    Readonly\n                                    Optional\n                                phone_work\n                            \n                            \n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            address_physical\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/patient/dto/patient.dto.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            address_postal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/patient/dto/patient.dto.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            dob\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/patient/dto/patient.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/patient/dto/patient.dto.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            emergency_contact_id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/patient/dto/patient.dto.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            family_doctor_id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/patient/dto/patient.dto.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            gender\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/patient/dto/patient.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            id_number\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/patient/dto/patient.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            lb_uuid\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/patient/dto/patient.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name_first\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/patient/dto/patient.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name_last\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/patient/dto/patient.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            nationality\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/patient/dto/patient.dto.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            phone_cell\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/patient/dto/patient.dto.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            phone_home\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/patient/dto/patient.dto.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            phone_work\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/patient/dto/patient.dto.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/patient/dto/patient.dto.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelPropertyOptional } from '@nestjs/swagger';\n\n/**\n * Patient Data Transfer Object\n */\nexport class PatientDTO {\n  @ApiModelPropertyOptional()\n  readonly lb_uuid: string;\n  @ApiModelPropertyOptional()\n  readonly title: string;\n  @ApiModelPropertyOptional()\n  readonly name_first: string;\n  @ApiModelPropertyOptional()\n  readonly name_last: string;\n  @ApiModelPropertyOptional()\n  readonly dob?: string;\n  @ApiModelPropertyOptional()\n  readonly id_number?: string;\n  @ApiModelPropertyOptional()\n  readonly gender?: string;\n  @ApiModelPropertyOptional()\n  readonly nationality?: string;\n  @ApiModelPropertyOptional()\n  readonly phone_home?: string;\n  @ApiModelPropertyOptional()\n  readonly phone_cell?: string;\n  @ApiModelPropertyOptional()\n  readonly phone_work?: string;\n  @ApiModelPropertyOptional()\n  readonly email?: string;\n  @ApiModelPropertyOptional()\n  readonly address_postal?: string;\n  @ApiModelPropertyOptional()\n  readonly address_physical?: string;\n  @ApiModelPropertyOptional()\n  readonly emergency_contact_id?: number;\n  @ApiModelPropertyOptional()\n  readonly family_doctor_id?: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PatientModule.html":{"url":"modules/PatientModule.html","title":"module - PatientModule","body":"\n                   \n\n\n\n\n    Modules\n    PatientModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PatientModule\n\n\n\ncluster_PatientModule_providers\n\n\n\n\nPatientService\n\nPatientService\n\n\n\nPatientModule\n\nPatientModule\n\nPatientModule -->\n\nPatientService->PatientModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/patient/patient.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PatientService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PatientController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule, Module } from '@nestjs/common';\nimport { PatientService } from './patient.service';\nimport { PatientController } from './patient.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { EmergencyContact } from '../entities/emergency_contact.entity';\nimport { FamilyDoctor } from '../entities/family_doctor.entity';\nimport { Patient } from '../entities/patient.entity';\n\n@Module({\n  imports: [\n    HttpModule,\n    TypeOrmModule.forFeature([Patient, EmergencyContact, FamilyDoctor]),\n  ],\n  providers: [PatientService],\n  controllers: [PatientController],\n})\nexport class PatientModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PatientService.html":{"url":"injectables/PatientService.html","title":"injectable - PatientService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PatientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/patient/patient.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPatient\n                            \n                            \n                                    Async\n                                getPatient\n                            \n                            \n                                    Async\n                                getPatientList\n                            \n                            \n                                    Async\n                                logboxDatabaseUpdate\n                            \n                            \n                                    Async\n                                logboxUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(PatientRepository: Repository, EmergencyContactRepository: Repository, FamilyDoctorRepository: Repository, httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/patient/patient.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        PatientRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        EmergencyContactRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        FamilyDoctorRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createPatient\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createPatient(patientDTO: PatientDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/patient/patient.service.ts:152\n                \n            \n\n\n            \n                \n                    Create a new patient\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    patientDTO\n                                    \n                                                PatientDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPatient\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPatient(patientID: number)\n                \n            \n\n\n            \n                \n                    Defined in src/patient/patient.service.ts:41\n                \n            \n\n\n            \n                \n                    Get a patient by ID\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    patientID\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        patientID to lookup\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPatientList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPatientList()\n                \n            \n\n\n            \n                \n                    Defined in src/patient/patient.service.ts:31\n                \n            \n\n\n            \n                \n                    Get a list of all patients\n\n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            logboxDatabaseUpdate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logboxDatabaseUpdate(list: object)\n                \n            \n\n\n            \n                \n                    Defined in src/patient/patient.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    list\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            logboxUpdate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logboxUpdate()\n                \n            \n\n\n            \n                \n                    Defined in src/patient/patient.service.ts:50\n                \n            \n\n\n            \n                \n                    Get an updated patient list from LogBox\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpException,\n  HttpService,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { EmergencyContact } from '../entities/emergency_contact.entity';\nimport { FamilyDoctor } from '../entities/family_doctor.entity';\nimport { Patient } from '../entities/patient.entity';\nimport { validate } from 'class-validator';\nimport { PatientDTO } from './dto/patient.dto';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class PatientService {\n  constructor(\n    @InjectRepository(Patient)\n    private PatientRepository: Repository,\n    @InjectRepository(EmergencyContact)\n    private EmergencyContactRepository: Repository,\n    @InjectRepository(FamilyDoctor)\n    private FamilyDoctorRepository: Repository,\n    private readonly httpService: HttpService,\n  ) {}\n\n  /**\n   * Get a list of all patients\n   */\n  async getPatientList(): Promise {\n    return await this.PatientRepository.find({\n      relations: ['EmergencyContact', 'FamilyDoctor'],\n    });\n  }\n\n  /**\n   * Get a patient by ID\n   * @param patientID patientID to lookup\n   */\n  async getPatient(patientID: number): Promise {\n    return await this.PatientRepository.findOne(patientID, {\n      relations: ['EmergencyContact', 'FamilyDoctor'],\n    });\n  }\n\n  /**\n   * Get an updated patient list from LogBox\n   */\n  async logboxUpdate(): Promise {\n    return this.httpService\n      .get('https://qa.logbox.co.za/logboxrest_v2/patient/search', {\n        params: {\n          practiceNumber: '0458795',\n        },\n        headers: {\n          Connection: 'keep-alive',\n          Host: 'qa.logbox.co.za',\n          'Cache-Control': 'no-cache',\n          Accept: '*/*',\n          Authorization:\n            'Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJtYXJsaXZkbTk1QGdtYWlsLmNvbSJ9.am6gP8vm-_GFGKzyXEL_oKD5HnjxSItBF5jaTaGeCFd1hNjECd-cqLfzpQE6DeM7XCHj-IEP89PXbNgtdyI3oA',\n        },\n      })\n      .pipe(map(response => response.data));\n  }\n\n  async logboxDatabaseUpdate(list: object): Promise {\n    // @ts-ignore\n    list.subscribe(async data => {\n      for (const item of Object.keys(data)) {\n        // console.log(data[item]);\n        if (\n          !(await this.PatientRepository.findOne({\n            IdNumber: data[item].person.idNumber,\n          }))\n        ) {\n          const emergencyContact = new EmergencyContact();\n          emergencyContact.NameFirst = data[item].emergencyContact.firstname;\n          emergencyContact.NameLast = data[item].emergencyContact.lastname;\n          emergencyContact.PhoneNumber =\n            data[item].emergencyContact.phone.number;\n          emergencyContact.Relationship =\n            data[item].emergencyContact.relationship.name;\n\n          const familyDoctor = new FamilyDoctor();\n          familyDoctor.Name = data[item].familyDoctor.name;\n          familyDoctor.PhoneNumber = data[item].familyDoctor.phone;\n\n          const patient = new Patient();\n          patient.LbUuid = data[item].person.uuid;\n          patient.Title = data[item].person.title.name;\n          patient.NameFirst = data[item].person.firstname;\n          patient.NameLast = data[item].person.lastname;\n          const dateParts = data[item].person.dob.split('-');\n          patient.Dob = new Date(dateParts[2], dateParts[1] - 1, dateParts[0]);\n          patient.IdNumber = data[item].person.idNumber;\n          patient.Gender = data[item].person.gender;\n          patient.Nationality =\n            data[item].person.identityCountry.value == null\n              ? 'South African'\n              : data[item].person.identityCountry.value;\n          patient.PhoneCell = data[item].cellPhone.number;\n          patient.PhoneHome = data[item].homePhone;\n          patient.PhoneWork = data[item].workPhone;\n          patient.Email = data[item].email.address;\n          patient.AddressPostal = data[item].postalAddress;\n          patient.AddressPhysical = data[item].residentialAddress;\n          // The problem is in these two fields, which are respectively relationships.\n          // Due to the function being asynchronous, the 'await' keyword has to be utilized however,\n          // because list is an observation returned from the http module,\n          // it's impossible to query the await method inside, since the observable object itself is not asynchronous.\n          // getting around this requires the usage of a TypeScript observable object, not a nest one\n          if (\n            !(await this.FamilyDoctorRepository.findOne({\n              Name: data[item].familyDoctor.name,\n              PhoneNumber: data[item].familyDoctor.phone,\n            }))\n          ) {\n            await this.FamilyDoctorRepository.save(familyDoctor);\n          }\n          if (\n            !(await this.EmergencyContactRepository.findOne({\n              NameFirst: data[item].emergencyContact.firstname,\n              NameLast: data[item].emergencyContact.lastname,\n              PhoneNumber: data[item].emergencyContact.phone.number,\n            }))\n          ) {\n            await this.EmergencyContactRepository.save(emergencyContact);\n          }\n          patient.EmergencyContact = await this.EmergencyContactRepository.findOne(\n            {\n              NameFirst: data[item].emergencyContact.firstname,\n              NameLast: data[item].emergencyContact.lastname,\n              PhoneNumber: data[item].emergencyContact.phone.number,\n            },\n          );\n          patient.FamilyDoctor = await this.FamilyDoctorRepository.findOne({\n            Name: data[item].familyDoctor.name,\n            PhoneNumber: data[item].familyDoctor.phone,\n          });\n          await this.PatientRepository.save(patient);\n        }\n      }\n    });\n  }\n\n  /**\n   * Create a new patient\n   * @param patientDTO\n   */\n  async createPatient(patientDTO: PatientDTO): Promise {\n    const {\n      address_physical,\n      address_postal,\n      dob,\n      email,\n      emergency_contact_id,\n      family_doctor_id,\n      gender,\n      id_number,\n      name_first,\n      name_last,\n      nationality,\n      phone_cell,\n      phone_home,\n      phone_work,\n      title,\n      lb_uuid,\n    } = patientDTO;\n\n    const userCheck = await this.PatientRepository.createQueryBuilder()\n      .where('LbUuid = :lb_uuid', { lb_uuid })\n      .getOne();\n    if (userCheck) {\n      throw new HttpException('User already exists', HttpStatus.BAD_REQUEST);\n    }\n\n    const newPatient = new Patient();\n    newPatient.LbUuid = lb_uuid;\n    newPatient.Title = title;\n    newPatient.NameFirst = name_first;\n    newPatient.NameLast = name_last;\n    newPatient.Dob = new Date(dob);\n    newPatient.IdNumber = id_number;\n    newPatient.Gender = gender;\n    newPatient.Nationality = nationality;\n    newPatient.PhoneHome = phone_home;\n    newPatient.PhoneCell = phone_cell;\n    newPatient.PhoneWork = phone_work;\n    newPatient.Email = email;\n    newPatient.AddressPostal = address_postal;\n    newPatient.AddressPhysical = address_physical;\n    newPatient.EmergencyContact = await this.EmergencyContactRepository.findOne(\n      emergency_contact_id,\n    );\n    newPatient.FamilyDoctor = await this.FamilyDoctorRepository.findOne(\n      family_doctor_id,\n    );\n\n    const errors = await validate(newPatient);\n    if (errors.length > 0) {\n      throw new HttpException(\n        { message: 'Something went wrong', errors },\n        HttpStatus.BAD_REQUEST,\n      );\n    } else {\n      const savedUser = await this.PatientRepository.save(newPatient);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Report.html":{"url":"classes/Report.html","title":"class - Report","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Report\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/report.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                Appointment\n                            \n                            \n                                Id\n                            \n                            \n                                ReportData\n                            \n                            \n                                ReportTemplate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Appointment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Appointment | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {nullable: false})@JoinColumn({name: 'appointment_id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/report.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('integer', {nullable: false, primary: true, name: 'id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/report.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ReportData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Object\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('json', {nullable: false, name: 'report_data'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/report.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ReportTemplate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ReportTemplates | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {nullable: false})@JoinColumn({name: 'report_template_id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/report.entity.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\nimport { ReportTemplates } from './report_templates.entity';\nimport { Appointment } from './appointment.entity';\n\n@Entity('report', { schema: 'public' })\nexport class Report {\n  @Column('integer', {\n    nullable: false,\n    primary: true,\n    name: 'id',\n  })\n  Id: number;\n\n  @ManyToOne(\n    type => ReportTemplates,\n    report_templates => report_templates.Reports,\n    { nullable: false },\n  )\n  @JoinColumn({ name: 'report_template_id' })\n  ReportTemplate: ReportTemplates | null;\n\n  @ManyToOne(type => Appointment, appointment => appointment.Reports, {\n    nullable: false,\n  })\n  @JoinColumn({ name: 'appointment_id' })\n  Appointment: Appointment | null;\n\n  @Column('json', {\n    nullable: false,\n    name: 'report_data',\n  })\n  ReportData: Object;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReportTemplates.html":{"url":"classes/ReportTemplates.html","title":"class - ReportTemplates","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReportTemplates\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/report_templates.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                Id\n                            \n                            \n                                Name\n                            \n                            \n                                ReportData\n                            \n                            \n                                Reports\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('integer', {nullable: false, primary: true, name: 'id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/report_templates.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: false, name: 'name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/report_templates.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ReportData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Object\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('json', {nullable: false, name: 'report_data'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/report_templates.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Reports\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Report[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/report_templates.entity.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, OneToMany } from 'typeorm';\nimport { Report } from './report.entity';\n\n@Entity('report_templates', { schema: 'public' })\nexport class ReportTemplates {\n  @Column('integer', {\n    nullable: false,\n    primary: true,\n    name: 'id',\n  })\n  Id: number;\n\n  @Column('text', {\n    nullable: false,\n    name: 'name',\n  })\n  Name: string;\n\n  @Column('json', {\n    nullable: false,\n    name: 'report_data',\n  })\n  ReportData: Object;\n\n  @OneToMany(type => Report, report => report.ReportTemplate)\n  Reports: Report[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Scan.html":{"url":"classes/Scan.html","title":"class - Scan","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Scan\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/scan.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                Appointment\n                            \n                            \n                                Attachment\n                            \n                            \n                                Id\n                            \n                            \n                                ScanType\n                            \n                            \n                                User\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Appointment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Appointment | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {nullable: false})@JoinColumn({name: 'appointment_id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/scan.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Attachment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Buffer\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('bytea', {nullable: false, name: 'attachment'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/scan.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('integer', {nullable: false, primary: true, name: 'id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/scan.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ScanType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ScanTypes | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {nullable: false})@JoinColumn({name: 'scan_type_id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/scan.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            User\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Users | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {nullable: false})@JoinColumn({name: 'user_id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/scan.entity.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\nimport { ScanTypes } from './scan_types.entity';\nimport { Appointment } from './appointment.entity';\nimport { Users } from './users.entity';\n\n@Entity('scan', { schema: 'public' })\nexport class Scan {\n  @Column('integer', {\n    nullable: false,\n    primary: true,\n    name: 'id',\n  })\n  Id: number;\n\n  @ManyToOne(type => ScanTypes, scan_types => scan_types.Scans, {\n    nullable: false,\n  })\n  @JoinColumn({ name: 'scan_type_id' })\n  ScanType: ScanTypes | null;\n\n  @ManyToOne(type => Appointment, appointment => appointment.Scans, {\n    nullable: false,\n  })\n  @JoinColumn({ name: 'appointment_id' })\n  Appointment: Appointment | null;\n\n  @ManyToOne(type => Users, users => users.Scans, { nullable: false })\n  @JoinColumn({ name: 'user_id' })\n  User: Users | null;\n\n  @Column('bytea', {\n    nullable: false,\n    name: 'attachment',\n  })\n  Attachment: Buffer;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScanDTO.html":{"url":"classes/ScanDTO.html","title":"class - ScanDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScanDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/scan-tracking/scan.dto.ts\n        \n\n            \n                Description\n            \n            \n                Scan Data Transfer Object\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                appointmentId\n                            \n                            \n                                    Readonly\n                                attachment\n                            \n                            \n                                    Readonly\n                                scanTypeId\n                            \n                            \n                                    Readonly\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            appointmentId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/scan-tracking/scan.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            attachment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Buffer\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/scan-tracking/scan.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            scanTypeId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/scan-tracking/scan.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/scan-tracking/scan.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\n/**\n * Scan Data Transfer Object\n */\nexport class ScanDTO {\n  @ApiModelProperty()\n  readonly scanTypeId: number;\n  @ApiModelProperty()\n  readonly appointmentId: number;\n  @ApiModelProperty()\n  readonly userId: number;\n  @ApiModelProperty()\n  readonly attachment: Buffer;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ScanTrackingController.html":{"url":"controllers/ScanTrackingController.html","title":"controller - ScanTrackingController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ScanTrackingController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/scan-tracking/scan-tracking.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                scan-tracking\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addScan\n                            \n                            \n                                    Async\n                                fetchScanById\n                            \n                            \n                                    Async\n                                fetchScanTypes\n                            \n                            \n                                    Async\n                                fetchUserScans\n                            \n                            \n                                    Async\n                                removeScan\n                            \n                            \n                                    Async\n                                updateScan\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addScan\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addScan(scanDTO: ScanDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/scan-tracking/scan-tracking.controller.ts:40\n                \n            \n\n\n            \n                \n                    Upload a new scan.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scanDTO\n                                    \n                                                ScanDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchScanById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchScanById(scanId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':scanId')\n                \n            \n\n            \n                \n                    Defined in src/scan-tracking/scan-tracking.controller.ts:31\n                \n            \n\n\n            \n                \n                    Fetch a user's specific scan.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scanId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchScanTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchScanTypes()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/scan-tracking/scan-tracking.controller.ts:67\n                \n            \n\n\n            \n                \n                    Fetch all of the scan type options\n\n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchUserScans\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchUserScans(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userId')\n                \n            \n\n            \n                \n                    Defined in src/scan-tracking/scan-tracking.controller.ts:22\n                \n            \n\n\n            \n                \n                    Fetch all of the user's scans.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            removeScan\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeScan(scanId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':scanId')\n                \n            \n\n            \n                \n                    Defined in src/scan-tracking/scan-tracking.controller.ts:59\n                \n            \n\n\n            \n                \n                    Delete a scan.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scanId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateScan\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateScan(scanId: number, scanDTO: ScanDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':scanId')\n                \n            \n\n            \n                \n                    Defined in src/scan-tracking/scan-tracking.controller.ts:50\n                \n            \n\n\n            \n                \n                    Edit the details of a scan.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scanId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scanDTO\n                                    \n                                                ScanDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n} from '@nestjs/common';\nimport { ScanDTO } from './scan.dto';\nimport { ScanTrackingService } from '../scan-tracking/scan-tracking.service';\n\n@Controller('scan-tracking')\nexport class ScanTrackingController {\n  constructor(private scanService: ScanTrackingService) {}\n\n  /**\n   * Fetch all of the user's scans.\n   * @param userId\n   */\n  @Get(':userId')\n  async fetchUserScans(@Param('userId') userId: number) {\n    return this.scanService.fetchUserScans(userId);\n  }\n\n  /**\n   * Fetch a user's specific scan.\n   * @param scanId\n   */\n  @Get(':scanId')\n  async fetchScanById(@Param('scanId') scanId: number) {\n    return this.scanService.fetchScanById(scanId);\n  }\n\n  /**\n   * Upload a new scan.\n   * @param scanDTO\n   */\n  @Post()\n  async addScan(@Body() scanDTO: ScanDTO) {\n    return this.scanService.addScan(scanDTO);\n  }\n\n  /**\n   * Edit the details of a scan.\n   * @param scanId\n   * @param scanDTO\n   */\n  @Put(':scanId')\n  async updateScan(@Param('scanId') scanId: number, @Body() scanDTO: ScanDTO) {\n    return this.scanService.updateScan(scanId, scanDTO);\n  }\n\n  /**\n   * Delete a scan.\n   * @param scanId\n   */\n  @Delete(':scanId')\n  async removeScan(@Param('scanId') scanId: number) {\n    return this.scanService.removeScan(scanId);\n  }\n\n  /**\n   * Fetch all of the scan type options\n   */\n  @Get()\n  async fetchScanTypes() {\n    return this.scanService.fetchScanTypes();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ScanTrackingModule.html":{"url":"modules/ScanTrackingModule.html","title":"module - ScanTrackingModule","body":"\n                   \n\n\n\n\n    Modules\n    ScanTrackingModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ScanTrackingModule\n\n\n\ncluster_ScanTrackingModule_providers\n\n\n\n\nScanTrackingService\n\nScanTrackingService\n\n\n\nScanTrackingModule\n\nScanTrackingModule\n\nScanTrackingModule -->\n\nScanTrackingService->ScanTrackingModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/scan-tracking/scan-tracking.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ScanTrackingService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ScanTrackingController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ScanTrackingController } from './scan-tracking.controller';\nimport { ScanTrackingService } from './scan-tracking.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Scan } from '../entities/scan.entity';\nimport { ScanTypes } from '../entities/scan_types.entity';\nimport { Appointment } from '../entities/appointment.entity';\nimport { Users } from '../entities/users.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Scan, ScanTypes, Appointment, Users])],\n  controllers: [ScanTrackingController],\n  providers: [ScanTrackingService],\n})\nexport class ScanTrackingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ScanTrackingService.html":{"url":"injectables/ScanTrackingService.html","title":"injectable - ScanTrackingService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ScanTrackingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/scan-tracking/scan-tracking.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addScan\n                            \n                            \n                                    Async\n                                fetchScanById\n                            \n                            \n                                    Async\n                                fetchScanTypes\n                            \n                            \n                                    Async\n                                fetchUserScans\n                            \n                            \n                                    Async\n                                removeScan\n                            \n                            \n                                    Async\n                                updateScan\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scanRepository: Repository, scanTypesRepository: Repository, appointmentRepository: Repository, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/scan-tracking/scan-tracking.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        scanRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        scanTypesRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        appointmentRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addScan\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addScan(scanDTO: ScanDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/scan-tracking/scan-tracking.service.ts:54\n                \n            \n\n\n            \n                \n                    Add a new scan\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scanDTO\n                                    \n                                                ScanDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchScanById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchScanById(scanId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/scan-tracking/scan-tracking.service.ts:42\n                \n            \n\n\n            \n                \n                    Fetch a specific scan.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scanId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchScanTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchScanTypes()\n                \n            \n\n\n            \n                \n                    Defined in src/scan-tracking/scan-tracking.service.ts:114\n                \n            \n\n\n            \n                \n                    Get the types of scans\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchUserScans\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchUserScans(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/scan-tracking/scan-tracking.service.ts:27\n                \n            \n\n\n            \n                \n                    Get all of the user's scans.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            removeScan\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeScan(scanId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/scan-tracking/scan-tracking.service.ts:102\n                \n            \n\n\n            \n                \n                    Delete an existing scan\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scanId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateScan\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateScan(scanId: number, scanDTO: ScanDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/scan-tracking/scan-tracking.service.ts:78\n                \n            \n\n\n            \n                \n                    Update an existing scan\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scanId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scanDTO\n                                    \n                                                ScanDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Scan } from '../entities/scan.entity';\nimport { ScanTypes } from '../entities/scan_types.entity';\nimport { Appointment } from '../entities/appointment.entity';\nimport { Users } from '../entities/users.entity';\nimport { ScanDTO } from './scan.dto';\n\n@Injectable()\nexport class ScanTrackingService {\n  constructor(\n    @InjectRepository(Scan)\n    private scanRepository: Repository,\n    @InjectRepository(ScanTypes)\n    private scanTypesRepository: Repository,\n    @InjectRepository(Appointment)\n    private appointmentRepository: Repository,\n    @InjectRepository(Users)\n    private usersRepository: Repository,\n  ) {}\n\n  /**\n   * Get all of the user's scans.\n   * @param userId\n   */\n  async fetchUserScans(userId: number): Promise {\n    try {\n      return await this.scanRepository\n        .createQueryBuilder()\n        .where('user_id = :userId', { userId })\n        .getMany();\n    } catch (e) {\n      e.printStackTrace;\n    }\n  }\n\n  /**\n   * Fetch a specific scan.\n   * @param scanId\n   */\n  async fetchScanById(scanId: number): Promise {\n    try {\n      return await this.scanRepository.findOne(scanId);\n    } catch (e) {\n      e.printStackTrace;\n    }\n  }\n\n  /**\n   * Add a new scan\n   * @param scanDTO\n   */\n  async addScan(scanDTO: ScanDTO): Promise {\n    try {\n      // Get the scan details from the DTO\n      const { scanTypeId, appointmentId, userId, attachment } = scanDTO;\n      // Create the new scan object\n      const newScan = new Scan();\n      newScan.ScanType = await this.scanTypesRepository.findOne(scanTypeId);\n      newScan.Appointment = await this.appointmentRepository.findOne(\n        appointmentId,\n      );\n      newScan.User = await this.usersRepository.findOne(userId);\n      newScan.Attachment = attachment;\n      // Upload the new scan\n      return await this.scanRepository.save(newScan);\n    } catch (e) {\n      e.printStackTrace;\n    }\n  }\n\n  /**\n   * Update an existing scan\n   * @param scanId\n   * @param scanDTO\n   */\n  async updateScan(scanId: number, scanDTO: ScanDTO): Promise {\n    try {\n      // Get the updated scan details from the DTO\n      const { scanTypeId, appointmentId, userId, attachment } = scanDTO;\n      // Find the scan to update, using scanId\n      const scan = await this.scanRepository.findOne(scanId);\n      // Update the scan details\n      scan.ScanType = await this.scanTypesRepository.findOne(scanTypeId);\n      scan.Appointment = await this.appointmentRepository.findOne(\n        appointmentId,\n      );\n      scan.User = await this.usersRepository.findOne(userId);\n      scan.Attachment = attachment;\n      // Save the updated scan\n      return await this.scanRepository.save(scan);\n    } catch (e) {\n      e.printStackTrace;\n    }\n  }\n\n  /**\n   * Delete an existing scan\n   * @param scanId\n   */\n  async removeScan(scanId: number): Promise {\n    try {\n      // Delete the scan, using its Id.\n      await this.scanRepository.delete(scanId);\n    } catch (e) {\n      e.printStackTrace;\n    }\n  }\n\n  /**\n   * Get the types of scans\n   */\n  async fetchScanTypes(): Promise {\n    try {\n      // Fetch all of the scan type options.\n      await this.scanTypesRepository.find();\n    } catch (e) {\n      e.printStackTrace;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScanTypes.html":{"url":"classes/ScanTypes.html","title":"class - ScanTypes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScanTypes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/scan_types.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                Id\n                            \n                            \n                                Name\n                            \n                            \n                                Scans\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('integer', {nullable: false, primary: true, name: 'id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/scan_types.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: false, name: 'name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/scan_types.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Scans\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Scan[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/scan_types.entity.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, OneToMany } from 'typeorm';\nimport { Scan } from './scan.entity';\n\n@Entity('scan_types', { schema: 'public' })\nexport class ScanTypes {\n  @Column('integer', {\n    nullable: false,\n    primary: true,\n    name: 'id',\n  })\n  Id: number;\n\n  @Column('text', {\n    nullable: false,\n    name: 'name',\n  })\n  Name: string;\n\n  @OneToMany(type => Scan, scan => scan.ScanType)\n  Scans: Scan[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Task.html":{"url":"classes/Task.html","title":"class - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/task.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                AssigneeUser\n                            \n                            \n                                AssignerUser\n                            \n                            \n                                DateCreation\n                            \n                            \n                                DateDue\n                            \n                            \n                                Description\n                            \n                            \n                                Id\n                            \n                            \n                                Name\n                            \n                            \n                                Priority\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            AssigneeUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Users | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {nullable: false})@JoinColumn({name: 'assignee_user_id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/task.entity.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            AssignerUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Users | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {nullable: false})@JoinColumn({name: 'assigner_user_id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/task.entity.ts:49\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DateCreation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('date', {nullable: false, name: 'date_creation'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/task.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DateDue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('date', {nullable: false, name: 'date_due'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/task.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: false, name: 'description'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/task.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('integer', {nullable: false, primary: true, name: 'id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/task.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: false, name: 'name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/task.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Priority\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('smallint', {nullable: false, name: 'priority'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/task.entity.ts:41\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\nimport { Users } from './users.entity';\n\n@Entity('task', { schema: 'public' })\nexport class Task {\n  @Column('integer', {\n    nullable: false,\n    primary: true,\n    name: 'id',\n  })\n  Id: number;\n\n  @Column('text', {\n    nullable: false,\n    name: 'name',\n  })\n  Name: string;\n\n  @Column('date', {\n    nullable: false,\n    name: 'date_creation',\n  })\n  DateCreation: string;\n\n  @Column('date', {\n    nullable: false,\n    name: 'date_due',\n  })\n  DateDue: string;\n\n  @Column('text', {\n    nullable: false,\n    name: 'description',\n  })\n  Description: string;\n\n  @Column('smallint', {\n    nullable: false,\n    name: 'priority',\n  })\n  Priority: number;\n\n  @ManyToOne(type => Users, users => users.Tasks, { nullable: false })\n  @JoinColumn({ name: 'assignee_user_id' })\n  AssigneeUser: Users | null;\n\n  @ManyToOne(type => Users, users => users.Tasks2, { nullable: false })\n  @JoinColumn({ name: 'assigner_user_id' })\n  AssignerUser: Users | null;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskDTO.html":{"url":"classes/TaskDTO.html","title":"class - TaskDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task-manager/task.dto.ts\n        \n\n            \n                Description\n            \n            \n                Task Data Transfer Object\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                assignee_user_id\n                            \n                            \n                                    Readonly\n                                date_creation\n                            \n                            \n                                    Readonly\n                                date_due\n                            \n                            \n                                    Readonly\n                                description\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                priority\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            assignee_user_id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task-manager/task.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            date_creation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task-manager/task.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            date_due\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task-manager/task.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task-manager/task.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task-manager/task.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            priority\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task-manager/task.dto.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\n/**\n * Task Data Transfer Object\n */\nexport class TaskDTO {\n  @ApiModelProperty()\n  readonly name: string;\n  @ApiModelProperty()\n  readonly date_creation: string;\n  @ApiModelProperty()\n  readonly date_due: string;\n  @ApiModelProperty()\n  readonly description: string;\n  @ApiModelProperty()\n  readonly priority: number;\n  @ApiModelProperty()\n  readonly assignee_user_id: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TaskManagerController.html":{"url":"controllers/TaskManagerController.html","title":"controller - TaskManagerController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TaskManagerController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task-manager/task-manager.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                task-manager\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addTask\n                            \n                            \n                                    Async\n                                fetchAssignedTasks\n                            \n                            \n                                    Async\n                                fetchMyTasks\n                            \n                            \n                                    Async\n                                removeTask\n                            \n                            \n                                    Async\n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addTask(userId: number, taskDTO: TaskDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':userId')\n                \n            \n\n            \n                \n                    Defined in src/task-manager/task-manager.controller.ts:42\n                \n            \n\n\n            \n                \n                    Add a task to the assigned user.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskDTO\n                                    \n                                                TaskDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchAssignedTasks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchAssignedTasks(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/assignedTasks/:userId')\n                \n            \n\n            \n                \n                    Defined in src/task-manager/task-manager.controller.ts:32\n                \n            \n\n\n            \n                \n                    Fetch all of the tasks that this user has assigned to other users.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchMyTasks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchMyTasks(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/myTasks/:userId')\n                \n            \n\n            \n                \n                    Defined in src/task-manager/task-manager.controller.ts:23\n                \n            \n\n\n            \n                \n                    Fetch all of the user's assigned tasks.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            removeTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeTask(taskId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':taskId')\n                \n            \n\n            \n                \n                    Defined in src/task-manager/task-manager.controller.ts:61\n                \n            \n\n\n            \n                \n                    Delete a task.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTask(taskId: number, taskDTO: TaskDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':taskId')\n                \n            \n\n            \n                \n                    Defined in src/task-manager/task-manager.controller.ts:52\n                \n            \n\n\n            \n                \n                    Update a task. Note that task assigner cannot be updated.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskDTO\n                                    \n                                                TaskDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n} from '@nestjs/common';\nimport { TaskDTO } from './task.dto';\nimport { TaskManagerService } from './task-manager.service';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Controller('task-manager')\nexport class TaskManagerController {\n  constructor(private taskService: TaskManagerService) {}\n\n  /**\n   * Fetch all of the user's assigned tasks.\n   * @param userId\n   */\n  @Get('/myTasks/:userId')\n  async fetchMyTasks(@Param('userId') userId: number) {\n    return this.taskService.fetchMyTasks(userId);\n  }\n\n  /**\n   * Fetch all of the tasks that this user has assigned to other users.\n   * @param userId\n   */\n  @Get('/assignedTasks/:userId')\n  async fetchAssignedTasks(@Param('userId') userId: number) {\n    return this.taskService.fetchAssignedTasks(userId);\n  }\n\n  /**\n   * Add a task to the assigned user.\n   * @param userId\n   * @param taskDTO\n   */\n  @Post(':userId')\n  async addTask(@Param('userId') userId: number, @Body() taskDTO: TaskDTO) {\n    return this.taskService.addTask(userId, taskDTO);\n  }\n\n  /**\n   * Update a task. Note that task assigner cannot be updated.\n   * @param taskId\n   * @param taskDTO\n   */\n  @Put(':taskId')\n  async updateTask(@Param('taskId') taskId: number, @Body() taskDTO: TaskDTO) {\n    return this.taskService.updateTask(taskId, taskDTO);\n  }\n\n  /**\n   * Delete a task.\n   * @param taskId\n   */\n  @Delete(':taskId')\n  async removeTask(@Param('taskId') taskId: number) {\n    return this.taskService.removeTask(taskId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TaskManagerModule.html":{"url":"modules/TaskManagerModule.html","title":"module - TaskManagerModule","body":"\n                   \n\n\n\n\n    Modules\n    TaskManagerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TaskManagerModule\n\n\n\ncluster_TaskManagerModule_providers\n\n\n\n\nTaskManagerService\n\nTaskManagerService\n\n\n\nTaskManagerModule\n\nTaskManagerModule\n\nTaskManagerModule -->\n\nTaskManagerService->TaskManagerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/task-manager/task-manager.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TaskManagerService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TaskManagerController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TaskManagerController } from './task-manager.controller';\nimport { TaskManagerService } from './task-manager.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Task } from '../entities/task.entity';\nimport { Users } from '../entities/users.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Task, Users])],\n  controllers: [TaskManagerController],\n  providers: [TaskManagerService],\n})\nexport class TaskManagerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TaskManagerService.html":{"url":"injectables/TaskManagerService.html","title":"injectable - TaskManagerService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TaskManagerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task-manager/task-manager.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addTask\n                            \n                            \n                                    Async\n                                fetchAssignedTasks\n                            \n                            \n                                    Async\n                                fetchMyTasks\n                            \n                            \n                                    Async\n                                removeTask\n                            \n                            \n                                    Async\n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskRepository: Repository, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/task-manager/task-manager.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addTask(userId: number, taskDTO: TaskDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/task-manager/task-manager.service.ts:58\n                \n            \n\n\n            \n                \n                    Add a new task\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskDTO\n                                    \n                                                TaskDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchAssignedTasks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchAssignedTasks(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/task-manager/task-manager.service.ts:38\n                \n            \n\n\n            \n                \n                    Get all of the tasks assigned by the user, except for the tasks assigned by the user to himself/herself.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchMyTasks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchMyTasks(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/task-manager/task-manager.service.ts:21\n                \n            \n\n\n            \n                \n                    Get all of the tasks assigned to the user, including the tasks assigned by the user to himself/herself.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            removeTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeTask(taskId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/task-manager/task-manager.service.ts:123\n                \n            \n\n\n            \n                \n                    Delete an existing task\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTask(taskId: number, taskDTO: TaskDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/task-manager/task-manager.service.ts:92\n                \n            \n\n\n            \n                \n                    Update an existing task\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskDTO\n                                    \n                                                TaskDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Task } from '../entities/task.entity';\nimport { Repository } from 'typeorm';\nimport { TaskDTO } from './task.dto';\nimport { Users } from '../entities/users.entity';\n\n@Injectable()\nexport class TaskManagerService {\n  constructor(\n    @InjectRepository(Task)\n    private taskRepository: Repository,\n    @InjectRepository(Users)\n    private usersRepository: Repository,\n  ) {}\n\n  /**\n   * Get all of the tasks assigned to the user, including the tasks assigned by the user to himself/herself.\n   * @param userId\n   */\n  async fetchMyTasks(userId: number): Promise {\n    try {\n      return await this.taskRepository\n        .createQueryBuilder()\n        .where('assignee_user_id = :userId', { userId })\n        .orderBy('date_due', 'ASC')\n        .addOrderBy('priority', 'DESC')\n        .getMany();\n    } catch (e) {\n      e.printStackTrace;\n    }\n  }\n\n  /**\n   * Get all of the tasks assigned by the user, except for the tasks assigned by the user to himself/herself.\n   * @param userId\n   */\n  async fetchAssignedTasks(userId: number): Promise {\n    try {\n      return await this.taskRepository\n        .createQueryBuilder()\n        .where('assigner_user_id = :userId AND assignee_user_id != :userId', {\n          userId,\n        })\n        .orderBy('date_due', 'ASC')\n        .addOrderBy('priority', 'DESC')\n        .getMany();\n    } catch (e) {\n      e.printStackTrace;\n    }\n  }\n\n  /**\n   * Add a new task\n   * @param userId\n   * @param taskDTO\n   */\n  async addTask(userId: number, taskDTO: TaskDTO): Promise {\n    try {\n      // Get the task details from the DTO\n      const {\n        name,\n        date_creation,\n        date_due,\n        description,\n        priority,\n        assignee_user_id,\n      } = taskDTO;\n      // Create the new task object\n      const newTask = new Task();\n      newTask.Name = name;\n      newTask.DateCreation = date_creation;\n      newTask.DateDue = date_due;\n      newTask.Description = description;\n      newTask.Priority = priority;\n      newTask.AssigneeUser = await this.usersRepository.findOne(\n        assignee_user_id,\n      );\n      newTask.AssignerUser = await this.usersRepository.findOne(userId);\n      // Save the new task\n      return await this.taskRepository.save(newTask);\n    } catch (e) {\n      e.printStackTrace;\n    }\n  }\n\n  /**\n   * Update an existing task\n   * @param taskId\n   * @param taskDTO\n   */\n  async updateTask(taskId: number, taskDTO: TaskDTO): Promise {\n    try {\n      // Get the updated task details from the DTO\n      const {\n        name,\n        date_creation,\n        date_due,\n        description,\n        priority,\n        assignee_user_id,\n      } = taskDTO;\n      // Find the task to update, using taskId\n      const task = await this.taskRepository.findOne(taskId);\n      // Update the task details\n      task.Name = name;\n      task.DateCreation = date_creation;\n      task.DateDue = date_due;\n      task.Description = description;\n      task.Priority = priority;\n      task.AssigneeUser = await this.usersRepository.findOne(assignee_user_id);\n      // Save the updated task\n      return await this.taskRepository.save(task);\n    } catch (e) {\n      e.printStackTrace;\n    }\n  }\n\n  /**\n   * Delete an existing task\n   * @param taskId\n   */\n  async removeTask(taskId: number): Promise {\n    try {\n      return await this.taskRepository.delete(taskId);\n    } catch (e) {\n      e.printStackTrace;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestTable.html":{"url":"classes/TestTable.html","title":"class - TestTable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestTable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/test_table.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                Id\n                            \n                            \n                                TestText\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('integer', {nullable: false, primary: true, name: 'id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/test_table.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TestText\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: true, name: 'test_text'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/test_table.entity.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\n\n@Entity('test_table', { schema: 'public' })\nexport class TestTable {\n  @Column('integer', {\n    nullable: false,\n    primary: true,\n    name: 'id',\n  })\n  Id: number;\n\n  @Column('text', {\n    nullable: true,\n    name: 'test_text',\n  })\n  TestText: string | null;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Treatment.html":{"url":"classes/Treatment.html","title":"class - Treatment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Treatment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/treatment.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                Acknowledgements\n                            \n                            \n                                Appointments\n                            \n                            \n                                Id\n                            \n                            \n                                Patient\n                            \n                            \n                                Phase\n                            \n                            \n                                TreatmentCycle\n                            \n                            \n                                TreatmentName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Acknowledgements\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Acknowledgement[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/treatment.entity.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Appointments\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Appointment[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/treatment.entity.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('integer', {nullable: false, primary: true, name: 'id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/treatment.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Patient\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Patient | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {nullable: false})@JoinColumn({name: 'patient_id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/treatment.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Phase\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('integer', {nullable: false, primary: false, name: 'phase'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/treatment.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TreatmentCycle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('integer', {nullable: true, name: 'treatment_cycle'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/treatment.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TreatmentName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: false, name: 'treatment_name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/treatment.entity.ts:32\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne, OneToMany } from 'typeorm';\nimport { Patient } from './patient.entity';\nimport { Acknowledgement } from './acknowledgement.entity';\nimport { Appointment } from './appointment.entity';\n\n@Entity('treatment', { schema: 'public' })\nexport class Treatment {\n  @Column('integer', {\n    nullable: false,\n    primary: true,\n    name: 'id',\n  })\n  Id: number;\n\n  @ManyToOne(type => Patient, patient => patient.Treatments, {\n    nullable: false,\n  })\n  @JoinColumn({ name: 'patient_id' })\n  Patient: Patient | null;\n\n  @Column('integer', {\n    nullable: false,\n    primary: false,\n    name: 'phase',\n  })\n  Phase: number;\n\n  @Column('text', {\n    nullable: false,\n    name: 'treatment_name',\n  })\n  TreatmentName: string;\n\n  @Column('integer', {\n    nullable: true,\n    name: 'treatment_cycle',\n  })\n  TreatmentCycle: number | null;\n\n  @OneToMany(\n    type => Acknowledgement,\n    acknowledgement => acknowledgement.Treatment,\n  )\n  Acknowledgements: Acknowledgement[];\n\n  @OneToMany(type => Appointment, appointment => appointment.Treatment)\n  Appointments: Appointment[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TreatmentController.html":{"url":"controllers/TreatmentController.html","title":"controller - TreatmentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TreatmentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/treatment/treatment.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                treatment\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getPhaseTotals\n                            \n                            \n                                    Async\n                                getTreatment\n                            \n                            \n                                    Async\n                                setTreatmentPhase\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPhaseTotals\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPhaseTotals()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('totals')\n                \n            \n\n            \n                \n                    Defined in src/treatment/treatment.controller.ts:12\n                \n            \n\n\n            \n                \n                    Get phase totals\n\n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTreatment\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTreatment(patientID: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':patientID')\n                \n            \n\n            \n                \n                    Defined in src/treatment/treatment.controller.ts:21\n                \n            \n\n\n            \n                \n                    Get the current treatment for a specific patient\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    patientID\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            setTreatmentPhase\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setTreatmentPhase(patientID: number, phase: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':patientID/:phase')\n                \n            \n\n            \n                \n                    Defined in src/treatment/treatment.controller.ts:31\n                \n            \n\n\n            \n                \n                    Change the treatment phase for a specific patient\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    patientID\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    phase\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Post } from '@nestjs/common';\nimport { TreatmentService } from './treatment.service';\n\n@Controller('treatment')\nexport class TreatmentController {\n  constructor(private treatmentService: TreatmentService) {}\n\n  /**\n   * Get phase totals\n   */\n  @Get('totals')\n  async getPhaseTotals() {\n    return this.treatmentService.getPhaseTotals();\n  }\n\n  /**\n   * Get the current treatment for a specific patient\n   * @param patientID\n   */\n  @Get(':patientID')\n  async getTreatment(@Param('patientID') patientID: number) {\n    return this.treatmentService.getTreatment(patientID);\n  }\n\n  /**\n   * Change the treatment phase for a specific patient\n   * @param patientID\n   * @param phase\n   */\n  @Get(':patientID/:phase')\n  async setTreatmentPhase(\n    @Param('patientID') patientID: number,\n    @Param('phase') phase: number,\n  ) {\n    return this.treatmentService.setTreatmentPhase(patientID, phase);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TreatmentDTO.html":{"url":"classes/TreatmentDTO.html","title":"class - TreatmentDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TreatmentDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/patient/dto/treatment.dto.ts\n        \n\n            \n                Description\n            \n            \n                Treatment Data Transfer Object\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                patient_id\n                            \n                            \n                                    Readonly\n                                phase\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            patient_id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/patient/dto/treatment.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            phase\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/patient/dto/treatment.dto.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty, ApiModelPropertyOptional } from '@nestjs/swagger';\n\n/**\n * Treatment Data Transfer Object\n */\nexport class TreatmentDTO {\n  @ApiModelProperty()\n  readonly patient_id: number;\n  @ApiModelProperty()\n  readonly phase: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TreatmentModule.html":{"url":"modules/TreatmentModule.html","title":"module - TreatmentModule","body":"\n                   \n\n\n\n\n    Modules\n    TreatmentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TreatmentModule\n\n\n\ncluster_TreatmentModule_providers\n\n\n\n\nTreatmentService\n\nTreatmentService\n\n\n\nTreatmentModule\n\nTreatmentModule\n\nTreatmentModule -->\n\nTreatmentService->TreatmentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/treatment/treatment.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TreatmentService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TreatmentController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule, Module } from '@nestjs/common';\nimport { TreatmentService } from './treatment.service';\nimport { TreatmentController } from './treatment.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Patient } from '../entities/patient.entity';\nimport { Treatment } from '../entities/treatment.entity';\n\n@Module({\n  imports: [HttpModule, TypeOrmModule.forFeature([Treatment, Patient])],\n  providers: [TreatmentService],\n  controllers: [TreatmentController],\n})\nexport class TreatmentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TreatmentService.html":{"url":"injectables/TreatmentService.html","title":"injectable - TreatmentService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TreatmentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/treatment/treatment.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getPhaseTotals\n                            \n                            \n                                    Async\n                                getTreatment\n                            \n                            \n                                    Async\n                                setTreatmentPhase\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(treatmentRepository: Repository, patientRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/treatment/treatment.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        treatmentRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        patientRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPhaseTotals\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPhaseTotals()\n                \n            \n\n\n            \n                \n                    Defined in src/treatment/treatment.service.ts:56\n                \n            \n\n\n            \n                \n                    Get phase totals\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTreatment\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTreatment(patientID: number)\n                \n            \n\n\n            \n                \n                    Defined in src/treatment/treatment.service.ts:20\n                \n            \n\n\n            \n                \n                    Get a treatment entity from the database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    patientID\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        patientID to lookup\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            setTreatmentPhase\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setTreatmentPhase(patientID: number, phase: number)\n                \n            \n\n\n            \n                \n                    Defined in src/treatment/treatment.service.ts:33\n                \n            \n\n\n            \n                \n                    Update a treatment phase for a patient\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    patientID\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        patientID to lookup\n\n                                    \n                                \n                                \n                                    phase\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        phase to update to\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { Treatment } from '../entities/treatment.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Patient } from '../entities/patient.entity';\n\n@Injectable()\nexport class TreatmentService {\n  constructor(\n    @InjectRepository(Treatment)\n    private treatmentRepository: Repository,\n    @InjectRepository(Patient)\n    private patientRepository: Repository,\n  ) {}\n\n  /**\n   * Get a treatment entity from the database\n   * @param patientID patientID to lookup\n   */\n  async getTreatment(patientID: number): Promise {\n    const patient = await this.patientRepository.findOne(patientID);\n    return await this.treatmentRepository.findOne(\n      { Patient: patient },\n      { relations: ['Patient'] },\n    );\n  }\n\n  /**\n   * Update a treatment phase for a patient\n   * @param patientID patientID to lookup\n   * @param phase phase to update to\n   */\n  async setTreatmentPhase(\n    patientID: number,\n    phase: number,\n  ): Promise {\n    const patient = await this.patientRepository.findOne(patientID);\n    const toUpdate = await this.treatmentRepository.findOne(\n      { Patient: patient },\n      { relations: ['Patient'] },\n    );\n    if (toUpdate !== undefined) {\n      toUpdate.Phase = phase;\n      return await this.treatmentRepository.save(toUpdate);\n    } else {\n      const treatment = new Treatment();\n      treatment.Patient = patient;\n      treatment.Phase = phase;\n      return await this.treatmentRepository.save(treatment);\n    }\n  }\n\n  /**\n   * Get phase totals\n   */\n  async getPhaseTotals(): Promise {\n    return await this.treatmentRepository\n      .createQueryBuilder()\n      .select('phase, COUNT(phase)')\n      .groupBy('phase')\n      .orderBy('phase')\n      .getRawMany();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDTO.html":{"url":"classes/UpdateUserDTO.html","title":"class - UpdateUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                email\n                            \n                            \n                                    Readonly\n                                    Optional\n                                name_first\n                            \n                            \n                                    Readonly\n                                    Optional\n                                name_last\n                            \n                            \n                                    Readonly\n                                    Optional\n                                password_hash\n                            \n                            \n                                    Readonly\n                                    Optional\n                                user_groups_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/update-user.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            name_first\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/update-user.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            name_last\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/update-user.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            password_hash\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/update-user.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            user_groups_id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/update-user.dto.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelPropertyOptional } from '@nestjs/swagger';\n\nexport class UpdateUserDTO {\n  @ApiModelPropertyOptional()\n  readonly name_first?: string;\n  @ApiModelPropertyOptional()\n  readonly name_last?: string;\n  @ApiModelPropertyOptional()\n  readonly email?: string;\n  @ApiModelPropertyOptional()\n  readonly password_hash?: string;\n  @ApiModelPropertyOptional()\n  readonly user_groups_id?: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/User.html":{"url":"interfaces/User.html","title":"interface - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/interface/user.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                                \n                                        id\n                                \n                                \n                                        name_first\n                                \n                                \n                                        name_last\n                                \n                                \n                                        password_hash\n                                \n                                \n                                        user_groups_id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name_first\n                                    \n                                \n                                \n                                    \n                                        name_first:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name_last\n                                    \n                                \n                                \n                                    \n                                        name_last:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password_hash\n                                    \n                                \n                                \n                                    \n                                        password_hash:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user_groups_id\n                                    \n                                \n                                \n                                    \n                                        user_groups_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface User {\n  readonly id: number;\n  readonly name_first: string;\n  readonly name_last: string;\n  readonly email: string;\n  readonly password_hash: string;\n  readonly user_groups_id: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(userDTO: UserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:32\n                \n            \n\n\n            \n                \n                    Create a new user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDTO\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userID: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/delete/:userID')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:54\n                \n            \n\n\n            \n                \n                    Delete a user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:14\n                \n            \n\n\n            \n                \n                    Get all users\n\n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(userID: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userID')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:23\n                \n            \n\n\n            \n                \n                    Get specific user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(userID: number, user: UpdateUserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':userID')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:42\n                \n            \n\n\n            \n                \n                    Update an existing user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post, Put } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserDTO } from './dto/user.dto';\nimport { UpdateUserDTO } from './dto/update-user.dto';\n\n@Controller('user')\nexport class UserController {\n  constructor(private userService: UserService) {}\n\n  /**\n   * Get all users\n   */\n  @Get()\n  async findAll() {\n    return this.userService.getUsers();\n  }\n\n  /**\n   * Get specific user\n   * @param userID\n   */\n  @Get(':userID')\n  async getUser(@Param('userID') userID: number) {\n    return this.userService.getUser(userID);\n  }\n\n  /**\n   * Create a new user\n   * @param userDTO\n   */\n  @Post()\n  async createUser(@Body() userDTO: UserDTO) {\n    return this.userService.createUser(userDTO);\n  }\n\n  /**\n   * Update an existing user\n   * @param userID\n   * @param user\n   */\n  @Put(':userID')\n  async updateUser(\n    @Param('userID') userID: number,\n    @Body() user: UpdateUserDTO,\n  ) {\n    return this.userService.updateUser(userID, user);\n  }\n\n  /**\n   * Delete a user\n   * @param userID\n   */\n  @Get('/delete/:userID')\n  async deleteUser(@Param('userID') userID: number) {\n    return this.userService.deleteUser(userID);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDTO.html":{"url":"classes/UserDTO.html","title":"class - UserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                name_first\n                            \n                            \n                                    Readonly\n                                name_last\n                            \n                            \n                                    Readonly\n                                password_hash\n                            \n                            \n                                    Readonly\n                                    Optional\n                                user_groups_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/user.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name_first\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/user.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name_last\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/user.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            password_hash\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/user.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            user_groups_id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/user.dto.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty, ApiModelPropertyOptional } from '@nestjs/swagger';\n\nexport class UserDTO {\n  @ApiModelProperty()\n  readonly name_first: string;\n  @ApiModelProperty()\n  readonly name_last: string;\n  @ApiModelProperty()\n  readonly email: string;\n  @ApiModelProperty()\n  readonly password_hash: string;\n  @ApiModelPropertyOptional()\n  readonly user_groups_id?: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserGroups.html":{"url":"classes/UserGroups.html","title":"class - UserGroups","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserGroups\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/user_groups.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                Id\n                            \n                            \n                                Name\n                            \n                            \n                                Userss\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('integer', {nullable: false, primary: true, name: 'id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user_groups.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: false, name: 'name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user_groups.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Userss\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Users[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user_groups.entity.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, OneToMany } from 'typeorm';\nimport { Users } from './users.entity';\n\n@Entity('user_groups', { schema: 'public' })\nexport class UserGroups {\n  @Column('integer', {\n    nullable: false,\n    primary: true,\n    name: 'id',\n  })\n  Id: number;\n\n  @Column('text', {\n    nullable: false,\n    name: 'name',\n  })\n  Name: string;\n\n  @OneToMany(type => Users, users => users.UserGroups)\n  Userss: Users[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService\n\nUserService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Users } from '../entities/users.entity';\nimport { UserGroups } from '../entities/user_groups.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Users, UserGroups])],\n  controllers: [UserController],\n  providers: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                getUserGroup\n                            \n                            \n                                    Async\n                                getUsers\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, userGroupsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userGroupsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(userDTO: UserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDTO\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userID: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:117\n                \n            \n\n\n            \n                \n                    Delete a user based on userID\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        userID to lookup\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(userID: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:30\n                \n            \n\n\n            \n                \n                    Get a specific user by ID\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        userID to lookup\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUserByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:38\n                \n            \n\n\n            \n                \n                    Get a specific user by email\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        email to lookup\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUserGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserGroup(userID: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:46\n                \n            \n\n\n            \n                \n                    Get the UserGroups object for a specific userID\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user to lookup\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUsers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:22\n                \n            \n\n\n            \n                \n                    Get all users\n\n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(userID: number, userDTO: UpdateUserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:55\n                \n            \n\n\n            \n                \n                    Update an existing user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        userID to lookup\n\n                                    \n                                \n                                \n                                    userDTO\n                                    \n                                                UpdateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        userDTO to update off of\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Users } from '../entities/users.entity';\nimport { DeleteResult, Repository } from 'typeorm';\nimport { UserDTO } from './dto/user.dto';\nimport { UpdateUserDTO } from './dto/update-user.dto';\nimport { validate } from 'class-validator';\nimport { UserGroups } from '../entities/user_groups.entity';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(Users)\n    private usersRepository: Repository,\n    @InjectRepository(UserGroups)\n    private userGroupsRepository: Repository,\n  ) {}\n\n  /**\n   * Get all users\n   */\n  async getUsers(): Promise {\n    return await this.usersRepository.find();\n  }\n\n  /**\n   * Get a specific user by ID\n   * @param userID userID to lookup\n   */\n  async getUser(userID: number): Promise {\n    return await this.usersRepository.findOne(userID);\n  }\n\n  /**\n   * Get a specific user by email\n   * @param email email to lookup\n   */\n  async getUserByEmail(email: string): Promise {\n    return await this.usersRepository.findOne({ where: { Email: email } });\n  }\n\n  /**\n   * Get the UserGroups object for a specific userID\n   * @param userID user to lookup\n   */\n  async getUserGroup(userID: number): Promise {\n    return await this.userGroupsRepository.findOne(1);\n  }\n\n  /**\n   * Update an existing user\n   * @param userID userID to lookup\n   * @param userDTO userDTO to update off of\n   */\n  async updateUser(\n    userID: number,\n    userDTO: UpdateUserDTO,\n  ): Promise {\n    Logger.debug('Updating user: ' + userID);\n    const toUpdate = await this.usersRepository.findOne(userID);\n    Logger.debug('Found user object: ' + toUpdate);\n    delete toUpdate.PasswordHash;\n\n    const updatedUser = Object.assign(toUpdate, userDTO);\n    return await this.usersRepository.save(updatedUser);\n  }\n\n  async createUser(userDTO: UserDTO): Promise {\n    Logger.debug('Creating new user');\n    Logger.debug(userDTO);\n\n    const {\n      email,\n      name_first,\n      name_last,\n      password_hash,\n      user_groups_id,\n    } = userDTO;\n\n    const userCheck = await this.usersRepository\n      .createQueryBuilder()\n      .where('Email = :email', { email })\n      .getOne();\n    Logger.debug('User check result');\n    Logger.debug(userCheck);\n    if (userCheck) {\n      throw new HttpException('User already exists', HttpStatus.BAD_REQUEST);\n    }\n\n    const newUser = new Users();\n    newUser.Email = email;\n    newUser.NameFirst = name_first;\n    newUser.NameLast = name_last;\n    newUser.PasswordHash = password_hash;\n    newUser.UserGroups = await this.userGroupsRepository.findOne(\n      user_groups_id,\n    );\n\n    Logger.debug('New User object');\n    Logger.debug(newUser);\n\n    const errors = await validate(newUser);\n    if (errors.length > 0) {\n      throw new HttpException(\n        { message: 'Something went wrong', errors },\n        HttpStatus.BAD_REQUEST,\n      );\n    } else {\n      const savedUser = await this.usersRepository.save(newUser);\n    }\n  }\n\n  /**\n   * Delete a user based on userID\n   * @param userID userID to lookup\n   */\n  async deleteUser(userID: number): Promise {\n    return await this.usersRepository.delete(userID);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Users.html":{"url":"classes/Users.html","title":"class - Users","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Users\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/users.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                Appointments\n                            \n                            \n                                Email\n                            \n                            \n                                Id\n                            \n                            \n                                NameFirst\n                            \n                            \n                                NameLast\n                            \n                            \n                                PasswordHash\n                            \n                            \n                                PasswordSalt\n                            \n                            \n                                Scans\n                            \n                            \n                                Tasks\n                            \n                            \n                                Tasks2\n                            \n                            \n                                UserGroups\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                hashPassword\n                            \n                            \n                                    Async\n                                savePassword\n                            \n                            \n                                    Async\n                                validatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Appointments\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Appointment[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/users.entity.ts:78\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: false, name: 'email'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/users.entity.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('integer', {nullable: false, primary: true, name: 'id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/users.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NameFirst\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: false, name: 'name_first'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/users.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NameLast\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: false, name: 'name_last'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/users.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PasswordHash\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: false, name: 'password_hash'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/users.entity.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PasswordSalt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {nullable: true, name: 'password_salt'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/users.entity.ts:69\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Scans\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Scan[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/users.entity.ts:81\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Tasks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Task[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/users.entity.ts:84\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Tasks2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Task[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/users.entity.ts:87\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            UserGroups\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserGroups | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {nullable: false})@JoinColumn({name: 'user_groups_id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/users.entity.ts:75\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password: string, salt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/entities/users.entity.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    salt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            savePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    savePassword()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @BeforeInsert()@BeforeUpdate()\n                \n            \n\n            \n                \n                    Defined in src/entities/users.entity.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validatePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validatePassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/entities/users.entity.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BeforeInsert,\n  BeforeUpdate,\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  OneToMany,\n} from 'typeorm';\nimport { UserGroups } from './user_groups.entity';\nimport { Appointment } from './appointment.entity';\nimport { Scan } from './scan.entity';\nimport { Task } from './task.entity';\n\nimport bcrypt = require('bcrypt');\n\n@Entity('users', { schema: 'public' })\nexport class Users {\n  @Column('integer', {\n    nullable: false,\n    primary: true,\n    name: 'id',\n  })\n  Id: number;\n\n  @Column('text', {\n    nullable: false,\n    name: 'name_first',\n  })\n  NameFirst: string;\n\n  @Column('text', {\n    nullable: false,\n    name: 'name_last',\n  })\n  NameLast: string;\n\n  @Column('text', {\n    nullable: false,\n    name: 'email',\n  })\n  Email: string;\n\n  @Column('text', {\n    nullable: false,\n    name: 'password_hash',\n  })\n  PasswordHash: string;\n\n  @BeforeInsert()\n  @BeforeUpdate()\n  async savePassword(): Promise {\n    if (this.PasswordHash) {\n      const salt = bcrypt.genSaltSync();\n\n      this.PasswordHash = await Users.hashPassword(this.PasswordHash, salt);\n      this.PasswordSalt = salt;\n    }\n  }\n\n  private static hashPassword(password: string, salt: string): Promise {\n    return bcrypt.hash(password, salt);\n  }\n\n  @Column('text', {\n    nullable: true,\n    name: 'password_salt',\n  })\n  PasswordSalt: string;\n\n  @ManyToOne(type => UserGroups, user_groups => user_groups.Userss, {\n    nullable: false,\n  })\n  @JoinColumn({ name: 'user_groups_id' })\n  UserGroups: UserGroups | null;\n\n  @OneToMany(type => Appointment, appointment => appointment.User)\n  Appointments: Appointment[];\n\n  @OneToMany(type => Scan, scan => scan.User)\n  Scans: Scan[];\n\n  @OneToMany(type => Task, task => task.AssigneeUser)\n  Tasks: Task[];\n\n  @OneToMany(type => Task, task => task.AssignerUser)\n  Tasks2: Task[];\n\n  async validatePassword(password: string) {\n    const hash = await bcrypt.hash(password, this.PasswordSalt);\n    return hash === this.PasswordHash;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/authentication/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/authentication/dto/auth-credentials.dto.ts\n            \n            class\n            AuthCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/get-user.decorator.ts\n            \n            variable\n            GetUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/authentication/interface/jwt-payload.interface.ts\n            \n            interface\n            JwtPayloadInterface\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/jwt.strategy.ts\n            \n            class\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/entities/acknowledgement.entity.ts\n            \n            class\n            Acknowledgement\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/entities/appointment.entity.ts\n            \n            class\n            Appointment\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/entities/emergency_contact.entity.ts\n            \n            class\n            EmergencyContact\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/entities/family_doctor.entity.ts\n            \n            class\n            FamilyDoctor\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/entities/form.entity.ts\n            \n            class\n            Form\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/entities/form_template.entity.ts\n            \n            class\n            FormTemplate\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/entities/patient.entity.ts\n            \n            class\n            Patient\n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                src/entities/report.entity.ts\n            \n            class\n            Report\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/entities/report_templates.entity.ts\n            \n            class\n            ReportTemplates\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/entities/scan.entity.ts\n            \n            class\n            Scan\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/entities/scan_types.entity.ts\n            \n            class\n            ScanTypes\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/entities/task.entity.ts\n            \n            class\n            Task\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/entities/test_table.entity.ts\n            \n            class\n            TestTable\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/entities/treatment.entity.ts\n            \n            class\n            Treatment\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/entities/user_groups.entity.ts\n            \n            class\n            UserGroups\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/entities/users.entity.ts\n            \n            class\n            Users\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/forms/form.dto.ts\n            \n            class\n            FormDTO\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/forms/form_template.dto.ts\n            \n            class\n            FormTemplateDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/forms/forms.controller.ts\n            \n            controller\n            FormsController\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                src/forms/forms.service.ts\n            \n            injectable\n            FormsService\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/patient/dto/patient.dto.ts\n            \n            class\n            PatientDTO\n            \n                5 %\n                (1/17)\n            \n        \n        \n            \n                \n                src/patient/dto/treatment.dto.ts\n            \n            class\n            TreatmentDTO\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/patient/patient.controller.ts\n            \n            controller\n            PatientController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/patient/patient.service.ts\n            \n            injectable\n            PatientService\n            \n                57 %\n                (4/7)\n            \n        \n        \n            \n                \n                src/scan-tracking/scan-tracking.controller.ts\n            \n            controller\n            ScanTrackingController\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/scan-tracking/scan-tracking.service.ts\n            \n            injectable\n            ScanTrackingService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/scan-tracking/scan.dto.ts\n            \n            class\n            ScanDTO\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/task-manager/task-manager.controller.ts\n            \n            controller\n            TaskManagerController\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/task-manager/task-manager.service.ts\n            \n            injectable\n            TaskManagerService\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/task-manager/task.dto.ts\n            \n            class\n            TaskDTO\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/treatment/treatment.controller.ts\n            \n            controller\n            TreatmentController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/treatment/treatment.service.ts\n            \n            injectable\n            TreatmentService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDTO\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/dto/user.dto.ts\n            \n            class\n            UserDTO\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/interface/user.interface.ts\n            \n            interface\n            User\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                66 %\n                (6/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^6.8.0\n        \n            @nestjs/core : ^6.8.0\n        \n            @nestjs/jwt : ^6.1.1\n        \n            @nestjs/passport : ^6.1.0\n        \n            @nestjs/platform-express : ^6.8.0\n        \n            @nestjs/swagger : ^3.1.0\n        \n            @nestjs/typeorm : ^6.2.0\n        \n            @nestjsx/crud : ^4.2.0\n        \n            @nestjsx/crud-typeorm : ^4.2.0\n        \n            archiver : ^3.1.1\n        \n            bcrypt : ^3.0.6\n        \n            class-transformer : ^0.2.3\n        \n            class-validator : ^0.10.1\n        \n            fs : 0.0.2\n        \n            multer : ^1.4.2\n        \n            passport : ^0.4.0\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^7.12.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.0\n        \n            rxjs : ^6.5.3\n        \n            swagger-ui-express : ^4.1.1\n        \n            typeorm : ^0.2.19\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FormsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PatientModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ScanTrackingModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TaskManagerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TreatmentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_FormsModule\n\n\n\ncluster_FormsModule_providers\n\n\n\ncluster_PatientModule\n\n\n\ncluster_PatientModule_providers\n\n\n\ncluster_ScanTrackingModule\n\n\n\ncluster_ScanTrackingModule_providers\n\n\n\ncluster_TaskManagerModule\n\n\n\ncluster_TaskManagerModule_providers\n\n\n\ncluster_TreatmentModule\n\n\n\ncluster_TreatmentModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthenticationModule->JwtStrategy \n\n\n\n\n\nFormsModule\n\nFormsModule\n\nAppModule -->\n\nFormsModule->AppModule\n\n\n\nAppModule -->\n\nFormsModule->AppModule\n\n\n\n\n\nPatientModule\n\nPatientModule\n\nAppModule -->\n\nPatientModule->AppModule\n\n\n\n\n\nScanTrackingModule\n\nScanTrackingModule\n\nAppModule -->\n\nScanTrackingModule->AppModule\n\n\n\n\n\nTaskManagerModule\n\nTaskManagerModule\n\nAppModule -->\n\nTaskManagerModule->AppModule\n\n\n\n\n\nTreatmentModule\n\nTreatmentModule\n\nAppModule -->\n\nTreatmentModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nUserService\n\nUserService\n\nAuthenticationModule -->\n\nUserService->AuthenticationModule\n\n\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nFormsService\n\nFormsService\n\nFormsModule -->\n\nFormsService->FormsModule\n\n\n\n\n\nPatientService\n\nPatientService\n\nPatientModule -->\n\nPatientService->PatientModule\n\n\n\n\n\nScanTrackingService\n\nScanTrackingService\n\nScanTrackingModule -->\n\nScanTrackingService->ScanTrackingModule\n\n\n\n\n\nTaskManagerService\n\nTaskManagerService\n\nTaskManagerModule -->\n\nTaskManagerService->TaskManagerModule\n\n\n\n\n\nTreatmentService\n\nTreatmentService\n\nTreatmentModule -->\n\nTreatmentService->TreatmentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    26 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GetUser   (src/.../get-user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/authentication/get-user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GetUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator(\n  (data, req): Users => {\n    return req.user;\n  },\n)\n                        \n                    \n\n                \n                    \n                        A custom decorator to automatically retrieve the user object from a request\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
